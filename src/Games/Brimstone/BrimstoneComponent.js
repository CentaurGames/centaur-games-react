import * as React from "react";
import {lightningDataURLs, mazeImageSourceLevels, underImageSourceLevels, overImageSourceLevels, flameDataURLs, heiroglyphSourceLevel1, heiroglyphSourceLevel2, heiroglyphSourceLevel3, heiroglyphSourceLevel4, heiroglyphSourceLevel5, heiroglyphSourceLevel6, heiroglyphSourceLevel7, heiroglyphSourceLevel8, heiroglyphSourceLevel9, heiroglyphSourceLevel10, heiroglyphSourceLevel11, heiroglyphSourceLevel12, screenshotImageURL, footstepImageURLs, playerImageURLs, waterImageURL, spikesImageURL, floorTileImageURL, emberImageURL, ankhEdgeImageURL, ankhImageURL, targetImageURL, fireWreathImageURL, coinEdgeURL, coinImageURL} from "./BrimstoneImageSources";
import drumsURL from "./drums.mp3";
import deathURL from "./death.mp3";
import transitionURL from "./transition.mp3";

var scrollPreventCanvas, imageCanvas, hiddenCanvas, waterCanvas, backgroundCanvas, playerCanvas, shadowCanvas, textCanvas, overCanvas, glyphCanvas, underCanvas, dimmerCanvas, footstepsCanvas, coinsCanvas, scoreCanvas, powerupsCanvas;

var imageContext, hiddenContext, waterContext, backgroundContext, playerContext, shadowContext, textContext, overContext, glyphContext, underContext, dimmerContext, footstepsContext, coinsContext, scoreContext, powerupsContext;

var canvasWidth = 420;
var canvasHeight = 420;

var audioContext, audioVolume, drumsBuffer, lastAudioSource, audioContext2, audioVolume2, deathBuffer, transitionBuffer, lastAudioSource2;

var lightningImages = new Array(lightningDataURLs.length), lightningIndex = 0;

var gridLevels = [
    [[0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1],[0,0,0,0,-1,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0],[0,0,-1,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1],[0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,0],[-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,-1,-1,0],[0,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0],[0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,-1],[0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1],[0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,-1,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0],[0,0,-1,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,-1,0,0,-1],[0,0,0,0,0,0,0,0,-1,-1,-1,0,-1,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,-1,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0],[0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,-1,-1,-1,-1,-1],[0,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1],[0,-1,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,-1],[0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,-1,0],[0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,-1],[0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[-1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0],[0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0],[0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1],[0,0,-1,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0],[-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0]],
    [[0,-1,0,-1,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,-1],[0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,-1],[0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1],[-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0],[-1,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,-1,0,-1,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0],[0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0],[0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,0,-1,-1,-1,0,0,0,0,0,0,-1,0,-1,-1,0,0,-1,-1,0,0],[0,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,-1,0,0],[0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,-1,-1,0,0],[0,0,-1,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0],[0,0,-1,-1,-1,-1,0,-1,-1,0,-1,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,0],[0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0],[0,0,-1,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,-1,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0],[0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0],[-1,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1],[0,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0],[0,0,-1,0,-1,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,-1,-1,0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,-1,0],[0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0],[-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0],[0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,-1],[0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,-1,0]],
    [[0,-1,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0],[0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,-1,-1,0],[-1,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,-1,0,0,0,0,-1,0,0,0,-1,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,-1,0,0,-1,0,0],[0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0],[0,0,0,-1,-1,0,-1,-1,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,-1],[0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0],[-1,-1,0,-1,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0],[0,0,0,0,0,0,-1,-1,0,-1,0,0,-1,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0],[-1,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,0],[0,0,0,0,-1,0,-1,-1,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0],[-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,-1,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,0,0],[-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,-1,0],[0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,0,0,-1,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,-1,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0],[0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1],[0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,-1,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,-1,0,-1,-1,0,0,-1,0,-1,0,0,0,0,0,0,-1,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,0,-1,0,-1,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,-1],[0,0,-1,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,-1,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,-1,-1,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,-1,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,-1,-1,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,-1,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,-1,0,0],[0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1,-1,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,-1,0,0]],
    [[0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1],[-1,-1,0,0,0,-1,-1,0,0,0,-1,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,-1,-1,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0],[0,-1,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,0],[-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],[-1,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0],[0,0,0,-1,-1,-1,0,0,0,-1,-1,-1,0,-1,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,-1,-1,0,-1,-1,0,-1,0,-1,0,0,-1,0,0,0],[0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[-1,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,-1,0,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0],[0,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0],[0,-1,-1,0,-1,-1,0,0,0,0,0,-1,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,-1,0,-1,0,0,0,0,-1],[0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,-1,0,0,0,0],[0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0],[-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0],[0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,-1,-1,0,-1,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,-1,0],[0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1],[0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,-1,0],[0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1],[0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0],[0,-1,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0],[-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0],[-1,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0],[-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0],[-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0],[0,0,-1,0,-1,0,-1,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,-1,0,-1,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],[-1,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,-1,0,-1,0,-1],[0,0,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,-1,-1,0,0,0,-1,0,-1,0,-1,-1,0,0,0,0,-1,0,-1,0],[0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],[-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
    [[0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,-1,-1],[0,0,0,0,0,0,-1,0,-1,-1,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,-1,0,-1,-1,0,0,0,0,0,-1,-1,-1,-1],[0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,-1],[0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1],[0,-1,0,-1,-1,-1,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0],[0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,0],[-1,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1],[-1,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,-1,0,0],[0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1],[0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,-1,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0],[-1,0,0,-1,-1,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0],[-1,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,-1,-1],[0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0],[0,0,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0],[-1,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,-1,0,-1,-1,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0],[0,0,0,0,-1,-1,-1,0,0,-1,-1,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,0,0,-1,0,-1],[0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0],[0,0,0,-1,-1,0,-1,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0],[0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,-1,0,0,0],[0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,-1,0,0],[0,0,-1,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,-1,-1],[0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0],[0,0,0,0,-1,0,0,0,-1,-1,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,-1],[0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1],[0,-1,-1,0,-1,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,-1,-1,0,0,-1,0,0,0,0,-1],[0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1],[-1,0,-1,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0],[-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,-1],[-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,-1,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0],[-1,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,-1,0,0,-1,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,-1,-1,-1,0,0,-1,0,0,0,0,0,-1,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,-1,-1,-1,0,-1,0,0,0,0,-1,-1,-1,0,0],[-1,0,0,0,0,-1,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,-1,0,0,0,0,0],[0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,-1],[0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,0,0,0,0],[0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,-1,0,0,0,0,0,0,0]],
    [[0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-1],[0,0,-1,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,-1,-1,-1,0,-1,0,0,0,0,0,-1,0],[0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,-1,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0],[-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,-1,-1,0,-1,0,-1,0,0,-1,-1,0],[-1,0,0,-1,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,-1,0,-1,-1,0,0,0,0,-1,0,0,-1,-1,0,0,0],[-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0],[-1,0,0,0,-1,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,-1],[0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,0,-1,0,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,0],[-1,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,-1,0,0,-1,0],[0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,-1,0,0],[0,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,0],[-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1],[0,0,-1,0,0,-1,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0],[0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0],[0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,-1,0,-1,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0],[0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,-1,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,-1,-1],[0,0,0,-1,0,0,0,-1,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,-1,0,-1,0,0,0,-1,-1,0,0,-1,0,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,-1,0,-1,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,-1,0,0,0,0,-1,0,-1,0,-1,-1,0,-1,0,-1,0,0,0,0,0,0,0],[0,0,0,-1,0,-1,0,0,-1,-1,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,-1,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0],[0,0,0,-1,0,-1,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,-1,-1,0],[0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,-1,0,0,-1,-1,-1,0,0,-1,0,0,0,-1,0,0,-1,-1,0,0,-1,0,0,0,0,-1,-1,0],[0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,-1,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,-1,0,0],[-1,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,-1,0,-1,0,-1],[0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,-1],[0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,-1],[-1,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
    [[0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,-1,-1,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,-1,-1,-1,-1,0,0,0,-1,0,0,0,-1,-1],[-1,-1,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0],[0,0,-1,0,0,0,0,0,-1,0,-1,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,-1,0,-1,0,0,-1,0,0,0],[0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,-1,0,-1,0],[0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0],[0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,-1,0,-1,0,-1,-1,0,-1,0,0,0,0,0,-1,-1,0,0,0,-1],[0,-1,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0],[0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,-1,-1,0,0,-1,-1,0,0,-1,0,0,0,-1],[0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,0,0,0,-1,0,-1,-1,-1,0,-1,0,0,0,0,0],[-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,-1,-1,0,0,-1,0,0,-1,-1,-1,0,0,0],[0,-1,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0],[0,0,0,0,-1,0,0,0,-1,-1,-1,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1],[0,-1,0,-1,-1,0,-1,0,-1,0,0,0,0,-1,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1],[0,0,0,0,0,-1,-1,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0],[-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0],[-1,0,0,-1,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1],[0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,-1,0,0],[0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0],[0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0],[0,0,0,-1,-1,0,0,0,0,-1,0,0,0,-1,-1,0,-1,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0],[-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,-1,0,0],[0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,-1,0,-1,0,-1,0,0,0,0,0,0,-1],[-1,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1],[0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,-1,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1],[0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[-1,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,-1,-1,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,-1,0],[-1,-1,0,0,0,0,-1,-1,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1],[-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,-1],[0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,-1,0,0,0],[0,0,-1,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,-1,-1,-1,0],[0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,-1,-1,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,0,0,0,-1,0,0],[0,0,0,0,0,0,0,-1,-1,0,-1,-1,-1,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,-1,-1,-1,0,-1,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,-1,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,-1,0],[-1,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-1,0,0,-1,0,0,-1,-1,0,0,-1,-1,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,-1,-1,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0]],
    [[0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,-1],[0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,-1,-1,-1],[0,0,0,0,-1,0,0,0,0,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,-1,-1,0,-1,-1,-1],[0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,-1,0,-1,-1,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,-1,0,-1],[0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,-1,0,-1,-1,0,-1,0,0,0,0,-1,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1],[0,0,-1,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,0,0],[-1,0,-1,0,0,0,0,0,-1,-1,-1,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,-1],[-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1],[0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0],[0,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,0],[-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,-1],[0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0],[-1,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,-1,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,-1,-1,-1],[0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,-1],[-1,0,-1,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,-1,0,0,0,-1,0,0,0,-1,-1,0,0,-1,0,0,0,-1,0,0,-1,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0],[0,0,-1,0,0,-1,0,0,0,-1,-1,0,0,-1,0,0,-1,-1,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,-1],[0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,-1,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,-1],[0,-1,-1,0,0,-1,0,0,0,-1,-1,0,-1,-1,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,-1,0,0,0,0,0,-1,0,-1,-1,0,-1,0,0,-1,0,0],[0,-1,0,-1,0,-1,-1,0,0,-1,-1,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1],[-1,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,-1,-1,0,0,-1,0,0,0,0,0,-1,-1,0,0,-1,-1,-1,0,0,0,0,0],[0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,-1,0,0,0,0,-1],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,-1,0,-1,0,0,0,-1,0,0,0,-1,0,-1,0],[0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0],[0,0,0,-1,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,-1,0,-1,-1,-1,-1,-1,0],[0,0,0,-1,-1,0,0,0,0,-1,-1,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0],[0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0],[0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0],[-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,-1,0]],
    [[-1,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,0,0],[-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,-1,0,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0],[0,0,0,0,0,0,0,-1,-1,0,0,-1,0,-1,-1,-1,0,0,0,0,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0],[0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,-1,-1,-1,-1,0,0,0,-1,-1,0,0,-1,0,-1],[0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,-1],[0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,-1,-1,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0],[-1,0,-1,0,0,-1,0,-1,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,-1,-1,0,-1,0,0,0,-1,-1,0,0,0,-1,0],[0,0,0,0,0,0,0,0,-1,-1,-1,0,0,-1,0,0,-1,-1,-1,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0],[-1,0,0,-1,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1],[0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,-1,-1],[0,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,-1,0,-1,-1,0,0,0,-1,0,0,0,0,-1,0,-1,-1,0,0,-1,-1,0,-1,-1,-1],[0,0,0,0,-1,0,-1,-1,-1,0,0,0,0,-1,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,-1,0,0,-1,0],[0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0],[0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,-1,0,-1,0,0,0,-1,0,0,0,0,-1],[0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,-1,-1,-1,-1,0,0,-1,0,-1,-1,-1,0],[0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,-1,-1,-1,0,0,-1,0,0,0],[0,-1,0,0,-1,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,-1,-1,-1,0,0,0],[0,-1,0,0,0,-1,0,-1,0,0,0,0,-1,-1,0,0,0,-1,-1,0,-1,0,-1,0,0,0,-1,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,0],[0,-1,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,-1,0,-1,0,0,-1,0,0,0,0,0],[-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,-1,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,-1,0,-1,-1,-1,0,-1,0,0,0,-1,-1,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0],[-1,-1,0,0,0,-1,-1,-1,0,-1,-1,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,-1,-1,0,0,-1,0,-1,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,-1,-1,-1],[-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0],[-1,-1,-1,0,-1,-1,-1,0,0,0,-1,0,0,0,-1,0,-1,0,0,-1,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0],[0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,-1,0,-1,0,0,-1,0,0,-1,0,-1,0,0,0,0,-1,0,-1,-1,-1,0,0,0,0,0,0],[-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,-1,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0],[-1,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,-1,0,0,-1,-1,0,0,0,-1],[0,-1,0,0,0,0,-1,0,-1,0,0,0,-1,-1,0,-1,-1,0,0,0,0,0,0,-1,0,-1,-1,-1,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0],[0,0,0,-1,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,-1,0,0,-1,0,0],[0,-1,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,-1,-1,0,-1,-1,-1,0,0,0,0,0,-1,-1,0,0,0],[0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,-1,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1,0,0,0],[0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,0,0,0],[-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0]],
    [[-1,-1,0,0,0,0,0,0,-1,-1,0,0,-1,-1,-1,0,-1,-1,0,0,0,0,-1,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1],[0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,-1,0,-1,0,-1],[0,0,-1,0,0,0,0,-1,-1,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0],[-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,-1,0,-1,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,0],[0,0,0,0,-1,0,-1,0,-1,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,-1,0,-1,-1,0,0,0,0,-1,0,0,0,-1,0],[-1,-1,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,-1,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,0],[-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0],[0,0,-1,-1,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,-1],[-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,-1,0,0,0,0,-1,0,0],[-1,-1,0,0,-1,-1,0,0,0,0,-1,-1,0,0,-1,-1,0,-1,-1,-1,-1,0,-1,0,0,-1,0,-1,-1,0,0,0,-1,0,0,0,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,-1,-1],[-1,-1,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,-1],[-1,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,-1,-1,0,0],[0,0,0,0,0,0,0,-1,-1,-1,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,-1,-1,0,-1,0,0,0,0,-1,-1,0,0],[-1,0,0,0,-1,0,-1,0,0,0,-1,0,-1,-1,-1,0,-1,0,-1,0,0,0,-1,0,0,-1,0,0,0,-1,-1,0,0,0,0,-1,-1,0,0,0,0,0],[-1,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0],[-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,-1,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1],[0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[-1,-1,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,-1,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1],[0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,-1,-1,0,-1,0,0,0,0,0],[0,0,-1,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,-1,-1,0,-1,-1,0,-1,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,-1,0,-1,0,0,-1],[-1,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,-1,0,-1,0,0,0,0,-1,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,-1,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,-1,0,0,0],[0,0,-1,0,0,-1,0,0,0,0,-1,-1,-1,0,-1,0,0,0,-1,0,0,0,0,-1,-1,0,0,-1,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0],[0,-1,-1,0,0,0,0,-1,-1,0,0,0,-1,-1,0,0,-1,0,-1,-1,0,0,0,0,0,-1,0,-1,-1,-1,0,0,-1,0,0,0,0,-1,-1,0,0,-1],[-1,-1,-1,-1,0,0,-1,0,0,-1,0,-1,0,-1,0,-1,-1,-1,-1,-1,-1,0,-1,0,-1,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0],[-1,-1,-1,-1,0,0,0,0,0,0,0,-1,0,-1,0,-1,-1,-1,0,0,0,-1,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,-1,0,-1],[-1,-1,0,-1,0,0,0,-1,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1],[-1,0,0,-1,0,0,0,0,-1,-1,-1,-1,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,-1,0,-1,0,-1,-1,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,-1,0,0,0,0,-1,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0],[-1,-1,-1,0,-1,0,0,0,-1,0,0,0,-1,-1,0,-1,0,-1,-1,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,-1],[0,0,-1,0,0,-1,0,0,-1,0,-1,-1,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,-1],[0,0,0,-1,0,0,-1,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,-1,-1,0,-1,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,-1,-1,0,0,-1,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,-1,0,-1,-1,0,-1,0,0,0,0,-1],[-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,-1,-1,0,0],[-1,0,0,0,-1,0,0,-1,-1,0,-1,-1,0,0,0,0,-1,-1,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,-1,0,0,-1,0,0],[-1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0]],
    [[-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1],[-1,-1,0,0,0,0,-1,-1,-1,-1,0,0,-1,-1,-1,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,-1,0,-1,0,0,-1,0,-1,0,-1,0,-1],[-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,-1],[-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0],[-1,-1,0,0,0,0,-1,0,0,0,-1,0,-1,-1,0,-1,0,-1,-1,0,0,0,0,-1,0,-1,-1,-1,0,-1,0,-1,0,0,-1,0,0,0,-1,0,-1,0],[-1,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0],[-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,-1,0,0,-1,0,-1,0,0,0,0,-1,-1,0,-1,0,-1,0,-1],[0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,-1,-1,-1],[0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,-1],[0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,-1,-1,0,0,-1,-1,0,-1,-1,-1,0,0],[0,0,0,0,0,0,0,0,0,-1,-1,-1,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,-1,0,-1,0,0,0,-1,-1,0,-1],[0,0,-1,0,0,0,-1,0,0,0,0,-1,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,-1,-1,0,0,0,0,-1,0,-1,-1,-1],[-1,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0],[-1,-1,-1,0,0,0,-1,-1,-1,0,0,0,0,-1,-1,0,-1,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,-1,0,0,-1,-1,-1,0,0,0,0],[-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,-1,-1,0,0,-1,0,0,0,-1,-1,-1,0],[0,0,-1,0,-1,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,0,-1],[0,-1,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,0,0,0,-1,0,0,0,0,-1,-1,-1,-1,-1,0],[-1,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,-1,0,-1,-1,-1,0,-1,0,0,0,-1,-1,-1,-1,0,0,0],[0,0,-1,-1,0,-1,0,-1,0,0,-1,-1,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,-1,-1,-1,-1,0,0,0,0,0,-1,-1,-1,-1,0,0],[0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,-1,0],[0,0,0,0,0,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,-1,0,-1,0,0,-1,0,0,0,0,0,-1,0,0,-1,-1,0,-1,0,0,0,0,-1,0,0,0],[0,0,0,0,-1,-1,0,0,0,0,0,-1,0,-1,-1,-1,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,-1,0,0,0],[0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,-1,-1,0,-1,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,-1,0,-1,0,0,-1,0,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0],[0,-1,0,0,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,0,0,0,0,-1,-1,-1,0,-1,0,-1,0,0,0,0,-1,0,0,-1,0,0,-1,-1,-1,0,0,-1],[0,0,0,0,-1,-1,0,-1,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0],[-1,0,-1,-1,0,0,0,-1,-1,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,-1,-1,-1,-1,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,-1],[-1,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,-1,0,0],[0,-1,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,0,-1,0,-1,-1,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,-1,-1,0,0,0,0,-1,0,-1,-1,0,0,-1,-1,0,0,-1,0,0,0],[0,-1,0,0,-1,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,-1,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0],[0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,-1,-1,0,0,-1,0,0,-1,0],[0,0,-1,0,-1,-1,-1,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,-1,0,-1,0,0,-1,0,0,0,0,-1,-1],[0,0,0,0,-1,-1,-1,-1,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,-1,-1],[0,-1,0,-1,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,-1],[-1,-1,0,0,0,0,0,-1,-1,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,-1,-1],[-1,-1,-1,0,0,0,-1,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,-1]],
    [[0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,-1,-1,0,0,-1,-1,0,0,-1,0,0,0,0],[0,-1,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,-1,0,-1,0,-1,0,0,0,-1,-1,0,0,0,0,0,-1,0,-1,0,-1,0,0,0],[0,0,0,0,0,0,-1,-1,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,-1,-1,-1,0,-1,-1,0,0,0,0,0,0,-1,-1,0,0],[-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,-1,0,-1,-1,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,0,0,0,0,-1],[0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1],[0,0,0,-1,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,-1,0,-1,0,0,0,0,0,0],[0,-1,0,0,0,-1,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,0,-1,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,-1,-1,-1,-1,0,-1,0,0,0,0,0,-1,-1,0,0,0,-1,0,-1,-1,-1,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,-1],[0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,-1,-1,0,0,-1,0,0,0,-1,-1,0,0,0,0,-1,0,-1,0,0,-1,-1,0],[-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,0,0,0,0,0],[-1,-1,-1,0,0,0,0,0,0,-1,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1],[-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,-1,0,-1,-1,0,-1,0,-1,-1,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,-1,-1,-1,-1,-1,-1,0,0,0,-1,0,-1,0,0,0,0,-1],[0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,-1,-1,0,0,0,0,0,0,-1,0,-1,0,0,-1,-1,0,0,0,0,0],[0,0,0,0,0,-1,0,-1,0,0,-1,0,-1,0,-1,-1,0,0,0,-1,0,0,0,-1,-1,0,-1,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,0,0],[0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,-1,0,0],[0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0],[0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,-1,0,0,-1,0],[0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,-1,-1],[-1,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1],[0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1],[0,0,0,-1,0,0,0,0,-1,-1,-1,0,-1,0,0,-1,0,-1,0,-1,0,-1,0,0,0,0,0,-1,0,0,-1,-1,-1,0,-1,0,0,0,-1,-1,-1,0],[0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0],[0,0,-1,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,-1,-1,0,0,-1,-1,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,-1,-1,0,-1,-1],[0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,0,0,-1,0,0,-1,0,0,-1,-1,0,0,0,0,0,-1,0,0,-1,-1,0,-1,-1,0,0,0],[-1,-1,0,0,-1,0,0,-1,0,0,0,-1,-1,-1,-1,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0],[-1,-1,-1,0,0,-1,-1,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,-1,-1,0,0,0,-1,0,0],[-1,-1,-1,-1,0,0,-1,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,-1,0,-1,-1,0,-1,0],[0,0,-1,0,0,0,0,0,-1,-1,-1,-1,0,0,-1,-1,0,0,0,-1,-1,0,0,0,-1,0,-1,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,-1],[-1,0,0,-1,-1,-1,0,0,0,0,0,-1,0,0,-1,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0],[-1,0,0,-1,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,-1,-1,0,-1,-1,0,-1,0,0,0,0,0,0,-1,0,-1,-1,0,0],[-1,-1,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,-1,0],[-1,-1,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,-1,-1,0,-1,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0],[-1,-1,-1,-1,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,-1,-1,-1,-1,0,0,0,0,0,-1,-1,-1,0],[-1,-1,-1,-1,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0],[-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,-1,-1,0,-1,0,0,0,0],[-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,-1,-1,0,0,0,0,0],[-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1],[-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,-1,-1,-1,-1,-1,-1,0,0,0,-1,0,0,0,0,0,-1,0,-1,-1],[-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1]]
];
var coinsILevels = [[21,37,36,37,8,40,37,39,40,20,37,5,7,19,10,20,12,4,9,28],[38,8,0,8,24,26,2,25,0,18,4,36,27,36,39,7,24,20,3,5,15,35,12,27,34],[18,6,9,8,2,8,35,19,29,8,25,16,23,40,21,4,1,16,2,25,16,9,11,25,26,31,26,10,6,6],[13,6,35,19,38,36,26,38,18,33,35,21,1,19,23,9,13,35,10,23,14,28,16,5,2,29,11,21,13,7,10,12,6,1,29],[33,6,23,8,37,13,36,17,41,11,17,26,16,29,3,27,22,10,2,36,31,1,13,24,7,38,11,29,33,40,32,19,10,2,19,37,26,24,34,28],[39,17,24,11,15,23,25,41,21,13,37,27,19,17,37,29,37,30,16,13,29,13,12,31,19,11,15,11,12,32,30,5,34,11,1,41,8,33,13,27,35,38,17,37,19],[41,21,5,3,22,41,21,33,8,32,11,7,35,34,15,40,38,6,37,5,39,35,6,3,36,36,19,21,17,14,13,10,4,13,30,5,22,20,31,8,4,13,28,13,18,34,25,27,32,33],[14,29,15,30,2,9,22,6,28,38,40,27,7,15,18,6,37,7,2,8,31,25,22,11,33,4,9,5,37,3,18,6,24,34,13,16,28,22,27,36,29,39,13,26,26,34,35,23,34,34,15,28,12,35,31],[17,4,2,7,39,8,41,36,10,5,34,25,36,30,20,24,2,34,40,30,0,32,17,21,40,19,12,8,33,39,12,38,18,38,24,3,10,16,24,33,26,16,13,33,9,26,28,41,39,16,31,33,36,7,39,6,32,17,31,17],[1,13,39,24,20,20,6,37,32,17,26,23,22,19,38,1,34,7,27,8,5,25,33,16,19,39,4,7,22,26,41,38,25,25,20,32,22,9,31,12,39,37,36,13,34,37,4,25,15,28,37,38,19,21,22,21,15,28,35,26,23,23,2,3,6],[36,27,6,32,22,13,25,9,31,29,2,18,9,3,21,24,31,20,5,24,9,37,11,10,6,2,39,22,5,40,26,40,15,9,0,24,35,6,3,21,2,12,9,3,10,41,6,37,37,18,24,14,36,28,20,17,13,3,39,19,26,41,7,23,36,34,13,34,21,22],[21,2,41,9,20,16,12,40,17,31,8,33,41,1,12,6,28,7,26,16,14,34,9,23,17,11,6,2,18,18,2,16,11,33,32,30,14,37,22,37,12,26,5,2,27,39,0,7,31,21,1,21,14,29,24,5,17,14,4,26,20,34,1,6,2,15,15,37,2,14,21,4,39,11,32]];
var coinsJLevels = [[38,18,24,30,0,21,24,0,9,3,5,2,18,18,16,28,4,16,25,25],[30,24,21,15,11,18,25,9,9,38,10,39,12,12,7,0,30,18,2,36,11,34,3,4,37],[26,5,39,27,31,29,39,37,24,21,3,1,5,14,0,27,14,25,27,19,15,4,41,40,1,33,39,5,37,14],[20,2,1,29,39,41,29,12,37,16,32,25,41,21,13,9,0,39,21,38,10,37,27,31,9,16,26,7,0,19,30,22,20,34,35],[40,14,24,23,5,35,23,29,2,28,7,30,19,19,37,0,18,9,29,35,16,5,23,37,41,20,25,35,29,23,2,27,2,2,6,2,22,18,28,23],[9,17,40,41,32,38,35,18,2,2,19,28,1,11,5,1,11,41,10,28,33,3,1,14,29,2,21,18,0,0,32,7,9,3,39,21,33,32,8,12,26,16,8,23,1],[15,26,34,30,41,15,11,32,11,12,16,40,15,11,37,33,32,13,38,0,4,8,15,35,34,17,28,8,41,38,39,2,35,30,40,8,11,34,3,25,39,14,18,12,3,16,39,11,3,15],[16,30,37,15,31,6,3,24,40,21,26,38,25,5,10,0,5,25,13,24,37,14,2,0,2,24,18,33,2,0,31,3,40,27,13,1,20,39,23,3,30,6,28,6,38,39,30,11,16,8,41,30,11,32,23],[4,3,23,38,24,15,24,2,13,21,5,33,6,19,41,4,23,7,10,1,5,31,14,37,26,21,0,4,3,25,32,19,7,19,13,17,16,19,38,40,35,28,0,5,41,40,38,29,20,8,4,8,13,0,11,26,36,24,18,20],[40,1,24,35,26,11,29,39,5,8,34,30,15,19,28,13,5,7,40,40,33,35,3,15,14,41,41,21,0,15,19,23,36,12,0,5,40,12,28,13,8,1,19,41,39,30,22,25,41,33,26,18,9,32,37,19,19,20,36,6,1,4,17,27,39],[39,19,32,15,2,25,13,4,39,6,38,8,24,41,24,41,39,4,16,38,22,15,22,1,19,20,38,10,40,31,22,15,18,17,36,9,16,10,28,32,8,1,2,40,19,19,6,13,19,0,30,31,21,31,40,23,34,3,0,6,17,22,9,12,20,3,33,16,3,22],[15,2,35,22,34,0,35,30,27,35,7,41,28,37,4,16,22,8,41,1,27,34,20,5,2,32,23,3,36,25,37,24,24,33,41,4,24,31,22,31,16,36,29,37,2,27,36,37,1,22,9,6,40,14,24,8,3,12,34,2,13,16,2,39,40,2,38,20,10,33,16,18,38,12,35]];
var ankhsILevels = [[39],[31],[13],[18,39],[12,25],[33,40],[0,18],[19,15],[22,36],[34,6,27],[5,20,29],[37,29,19]];
var ankhsJLevels = [[11],[28],[14],[28,24],[1,19],[25,3],[2,9],[23,40],[40,23],[28,37,25],[5,0,37],[7,8,4]];
var embersILevels = [[28,26,12,12,3,34,18,2,6,0,16,28,35,26,10,21,33,33,2,10],[5,36,24,13,32,17,14,3,16,7,4,1,34,30,37,9,23,3,38,38,9],[26,40,26,27,36,18,30,1,12,10,20,3,29,19,37,38,37,13,20,3,38,39],[2,30,6,13,18,10,10,31,35,1,24,10,13,3,15,10,35,12,5,36,2,7,9],[1,12,22,3,34,41,30,17,31,28,41,16,41,41,35,14,14,30,8,37,13,38,26,21],[37,2,41,28,10,12,26,15,7,23,9,36,38,32,12,31,36,24,1,33,11,25,21,9,0],[32,2,20,25,21,2,28,22,29,36,12,36,1,6,11,0,28,16,30,31,34,26,21,39,16],[12,28,35,32,14,21,30,16,37,23,7,16,6,13,1,1,30,38,24,13,11,26,28,15,24,17],[17,41,37,11,28,14,23,7,27,23,20,28,21,28,8,22,19,35,30,28,3,41,12,9,30,34,37],[28,16,23,16,33,18,12,31,29,28,21,32,38,5,24,33,20,31,30,4,0,38,0,25,3,32,3,39],[30,41,9,17,34,16,10,27,16,21,11,35,35,16,27,26,28,21,31,17,19,9,24,38,36,15,22,36,35],[35,37,5,7,6,9,9,29,37,37,32,22,18,15,19,5,40,13,3,27,41,15,34,34,33,33,38,6,23,21]];
var embersJLevels = [[31,14,26,21,34,0,27,13,38,29,2,6,25,11,8,26,15,2,9,33],[1,32,23,25,33,25,4,8,0,16,36,28,10,39,35,41,25,9,1,34,34],[3,41,32,12,34,21,34,41,10,21,10,29,38,13,40,6,15,23,18,32,33,27],[22,38,19,29,8,27,34,23,26,8,35,27,13,26,37,39,31,38,22,40,12,21,13],[35,29,19,23,7,20,38,39,8,5,27,7,10,0,2,25,13,27,28,21,17,23,26,2],[13,26,12,1,13,3,12,3,16,21,11,29,3,36,25,30,22,21,17,40,33,0,20,0,13],[23,6,27,32,12,4,3,29,14,41,27,15,41,23,6,8,41,1,28,8,18,10,1,1,16],[30,7,11,29,39,34,38,2,21,24,24,38,4,8,6,2,22,7,5,27,21,4,8,18,30,38],[22,3,7,15,17,3,31,12,38,40,9,21,27,2,13,28,9,15,4,1,13,21,29,33,13,30,8],[14,33,32,12,26,41,18,18,5,35,1,18,0,19,25,2,6,5,24,4,35,14,4,30,0,18,6,31],[9,27,3,31,28,23,6,38,16,10,25,20,3,27,23,40,6,13,40,8,30,12,25,23,36,17,28,0,28],[9,33,5,6,40,1,1,18,21,36,16,19,40,6,24,39,21,8,40,33,19,35,2,20,32,9,39,22,41,5]];
var pentaclesILevels = [[40],[39],[3,30],[35,19],[36,30],[22,23,35],[4,21,33],[33,41,3,1],[7,10,13,0],[32,39,26,30],[26,3,13,34,8],[16,31,13,16,28]];
var pentaclesJLevels = [[27],[13],[22,20],[31,12],[12,32],[33,23,16],[32,8,37],[29,30,32,22],[10,36,0,13],[30,30,4,34],[32,11,30,10,37],[25,34,39,4,36]];

var numberOfPixelsPerCanvas = 21;
var pixelWidth = Math.round(canvasWidth/numberOfPixelsPerCanvas);
var pixelHeight = Math.round(canvasHeight/numberOfPixelsPerCanvas);
var numberOfPixelsInGrid = 2*numberOfPixelsPerCanvas;
var numberOfTraps = 30;
var numberOfCoins = 75;
var numberOfAnkhs = 3;
var numberOfEmbers = 5;
var numberOfLevels = 12;
var minimumNumberOfTiles = Math.round(0.6*numberOfPixelsInGrid*numberOfPixelsInGrid);
var cutoff = 0.85;
var tileOpacity = 0.3;

var dimmerRadius;
var grid;
var checkedGrid;

var playerI, playerJ, playerDirection, coinsI, coinsJ, isCoinActive, ankhsI, ankhsJ, isAnkhActive, embersI, embersJ, isEmberActive, pentacleI, pentacleJ;

var isWalking = 0;
var keyReleased = 1;
var isTargetTrackingOn = 0;
var lastkeycode;
var couldIGetAKeyInEdgewise = 0;
var playerWalkIndex = 0;
var playerTimer = 30;

var blankSpaceWidth = Math.round((canvasWidth-pixelWidth)/2);
var blankSpaceHeight = Math.round((canvasHeight-pixelHeight)/2);
var mazeImages = new Array(numberOfLevels);
var trapsImages = new Array(numberOfLevels);
var ballImage = new Image(pixelWidth,pixelHeight);
var playerImages = new Array(4);
var footstepImages = new Array(4);
var tileImages = [new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight)];
var liftedTileImages = [new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight)];
var overImages = new Array(numberOfLevels);
var underImages = new Array(numberOfLevels);
var gameOver = 0, dimmerCanvasIsDrawing = 0;
var footstepXs = new Array(20), footstepYs = new Array(20), footstepAlphas = new Array(20), footstepDirections = new Array(20);
var waterImage = new Image(1680,1680);
var fireWreathImage = new Image(420,420);
var waterTimer, waterX, waterY, waterTheta;

var largeImageWidth = numberOfPixelsInGrid*pixelWidth+2*blankSpaceWidth;
var largeImageHeight = numberOfPixelsInGrid*pixelHeight+2*blankSpaceHeight;

var brickImage = new Image(40,40);
var tileImage = new Image(20,20);
var floorTileImage = new Image(20,20);
var gateImage = new Image(265,200);
var heiroglyphImages = new Array(numberOfLevels);
var spikesImage = new Image(20,20);
var coinImage = new Image(20,20);
var coinEdge = new Image(20,20);
var scarabImage = new Image(20,20);
var emberImage = new Image(20,20);
var ankhImage = new Image(20,20);
var ankhEdgeImage = new Image(20,20);
var targetImage = new Image(20,20);

var flameImages = new Array(flameDataURLs.length);

var flameIndex;
var omega = 5*Math.PI/180;
var phiX = 0*Math.PI/180;
var phiY = 0*Math.PI/180;
var thetaX = 0, thetaY = 0, thetaZ = 0;
var rotationMatrix = [[1,0,0],[0,1,0],[0,0,1]];

var heiroglyphSourceLevels = [
	heiroglyphSourceLevel1,
	heiroglyphSourceLevel2,
	heiroglyphSourceLevel3,
	heiroglyphSourceLevel4,
	heiroglyphSourceLevel5,
	heiroglyphSourceLevel6,
	heiroglyphSourceLevel7,
	heiroglyphSourceLevel8,
	heiroglyphSourceLevel9,
	heiroglyphSourceLevel10,
	heiroglyphSourceLevel11,
	heiroglyphSourceLevel12
];

var score = 0, embersFound = 0, numberOfLives = 1, startingLives = 1, currentLevel = 0, isLevelComplete = 0, areImagesLoaded = 0, isPlacardDrawing = 0, isReplayOn = 0, targetI = -1, targetJ = -1, isTransitionRendering = 0, isDimmerTimerRunning = 0, areEmbersIgniting = 0, isVictoryPlacardUp = 0;

var isDeathAudioLoaded = 0, isDrumsAudioLoaded = 0, isTransitionAudioLoaded = 0, isDeathAudioLoading = 0, isDrumsAudioLoading = 0, isTransitionAudioLoading = 0, isIOS = 0, isMobile = 0;

var screenshotImage = new Image(420,460);

function drawScreenshotImage() {
	screenshotImage.src = screenshotImageURL;
	screenshotImage.onload = drawWaterImage;
}

function playTransitionSound() {
	if (!isTransitionAudioLoaded) return;
	if (lastAudioSource2) {
		lastAudioSource2.stop();
	}
	var audioSource = audioContext2.createBufferSource();
	audioVolume2.gain.value = 1;
	audioSource.connect(audioVolume2);
	audioSource.buffer = transitionBuffer;
	if (audioSource.start) {
		audioSource.start(0);
	} else if (audioSource.play) {
		audioSource.play(0);
	} else if (audioSource.noteOn) {
		audioSource.noteOn(0);	
	}
	lastAudioSource2 = audioSource;
}

function playDeathSound() {
	if (!isDeathAudioLoaded) return;
	var audioSource = audioContext2.createBufferSource();
	audioVolume2.gain.value = 1;
	audioSource.connect(audioVolume2);
	audioSource.buffer = deathBuffer;
	if (audioSource.start) {
		audioSource.start(0);
	} else if (audioSource.play) {
		audioSource.play(0);
	} else if (audioSource.noteOn) {
		audioSource.noteOn(0);	
	}
	lastAudioSource2 = audioSource;
}

function playDrums() {
	if (!isDrumsAudioLoaded) return;
	if (lastAudioSource) {
		lastAudioSource.loop = false;
		lastAudioSource.stop();
	}
	var audioSource = audioContext.createBufferSource();
	audioVolume.gain.value = 1;
	audioSource.connect(audioVolume);
	audioSource.buffer = drumsBuffer;
	audioSource.loop = true;
	if (audioSource.start) {
		audioSource.start(0);
	} else if (audioSource.play) {
		audioSource.play(0);
	} else if (audioSource.noteOn) {
		audioSource.noteOn(0);	
	}
	lastAudioSource = audioSource;
}

function loadTransitionAudio() {
	if (isTransitionAudioLoading) return;
	isTransitionAudioLoading = 1;
	var request = new XMLHttpRequest();
	request.open('GET', transitionURL, true);
	request.responseType = 'arraybuffer';
	request.onload = function() {
		audioContext2.decodeAudioData(request.response, function(buffer) {
			transitionBuffer = buffer;
			isTransitionAudioLoaded = 1;
		});
	};
	request.send();
}

function loadDeathAudio() {
	if (isDeathAudioLoading) return;
	isDeathAudioLoading = 1;
	audioContext2 = new (window.AudioContext || window.webkitAudioContext)();
	audioVolume2 = audioContext2.createGain();
	audioVolume2.connect(audioContext2.destination);
	var request = new XMLHttpRequest();
	request.open('GET', deathURL, true);
	request.responseType = 'arraybuffer';
	request.onload = function() {
		audioContext2.decodeAudioData(request.response, function(buffer) {
			deathBuffer = buffer;
			isDeathAudioLoaded = 1;
		});
	};
	request.send();
}

function loadDrumsAudio() {
	if (isDrumsAudioLoading) return;
	isDrumsAudioLoading = 1;
	audioContext = new (window.AudioContext || window.webkitAudioContext)();
	audioVolume = audioContext.createGain();
	audioVolume.connect(audioContext.destination);
	var request = new XMLHttpRequest();
	request.open('GET', drumsURL, true);
	request.responseType = 'arraybuffer';
	request.onload = function() {
		audioContext.decodeAudioData(request.response, function(buffer) {
			drumsBuffer = buffer;
			isDrumsAudioLoaded = 1;
			playDrums();
		});
	};
	request.send();
}

function matrixMultiply(mat1,mat2) {
	var matrix = [[0,0,0],[0,0,0],[0,0,0]];
	for (var i = 0; i < 3; i++) {
		for (var j = 0; j < 3; j++) {
			for (var k = 0; k < 3; k++) {
				matrix[i][j] += mat1[i][k]*mat2[k][j];
			}
		}
	}
	return matrix;
}

function vectorMultiply(mat,vec) {
	var vector = [0,0,0];
	for (var i = 0; i < 3; i++) {
		for (var j = 0; j < 3; j++) {
			vector[i] += mat[i][j]*vec[j];
		}
	}
	return vector;
}

function rotateX() {
	var xRotation = [[1,0,0],[0,1,0],[0,0,1]];
	xRotation[1][1] = Math.cos(thetaX);
	xRotation[2][2] = xRotation[1][1];
	xRotation[1][2] = -Math.sin(thetaX);
	xRotation[2][1] = -xRotation[1][2];
	rotationMatrix = matrixMultiply(xRotation,rotationMatrix);
}

function rotateY() {
	var yRotation = [[1,0,0],[0,1,0],[0,0,1]];
	yRotation[0][0] = Math.cos(thetaY);
	yRotation[2][2] = yRotation[0][0];
	yRotation[0][2] = Math.sin(thetaY);
	yRotation[2][0] = -yRotation[0][2];
	rotationMatrix = matrixMultiply(yRotation,rotationMatrix);
}

function rotateZ() {
	var zRotation = [[1,0,0],[0,1,0],[0,0,1]];
	zRotation[0][0] = Math.cos(thetaZ);
	zRotation[1][1] = zRotation[0][0];
	zRotation[0][1] = -Math.sin(thetaZ);
	zRotation[1][0] = -zRotation[0][1];
	rotationMatrix = matrixMultiply(zRotation,rotationMatrix);
}

function drawDimmerCanvas() {
	if (dimmerCanvasIsDrawing || dimmerRadius <= 0) return;
	dimmerContext.clearRect(0,0,420,420);
	//var grad = dimmerContext.createRadialGradient(210,210,40+170*embersFound/numberOfEmbers,210,210,210);
	var grad = dimmerContext.createRadialGradient(210,210,0,210,210,dimmerRadius);
	grad.addColorStop(0,"rgba(0,0,0,0)");
	grad.addColorStop(1,"rgba(0,0,0,1)");
	dimmerContext.fillStyle = grad;
	dimmerContext.fillRect(0,0,420,420);
}

function drawShadow(i,j) {
	if (Math.abs(i-playerI) > 10 || Math.abs(j-playerJ) > 10) return;
	var xLeft = i*pixelWidth + blankSpaceWidth;
	var yTop = j*pixelHeight + blankSpaceHeight;
	var xRight = xLeft + pixelWidth;
	var yBottom = yTop + pixelHeight;
	var playerX = playerI*pixelWidth + blankSpaceWidth;
	var playerY = playerJ*pixelHeight + blankSpaceHeight;
	var x1, x2, x3, x4, y1, y2, y3, y4;
	x4 = -1;
	y4 = -1;
	if (playerI > i) {
		if (playerJ > j) {
			x1 = xLeft;
			x2 = xLeft;
			x3 = xRight;
			y1 = yBottom;
			y2 = yTop;
			y3 = yTop;
		} else {
			if (playerJ === j) {
				x1 = xRight;
				x2 = xLeft;
				x3 = xLeft;
				x4 = xRight;
				y1 = yBottom;
				y2 = yBottom;
				y3 = yTop;
				y4 = yTop;
			} else {
				x1 = xLeft;
				x2 = xLeft;
				x3 = xRight;
				y1 = yTop;
				y2 = yBottom;
				y3 = yBottom;
			}
		}
	} else {
		if (playerI === i) {
			if (playerJ > j) {
				x1 = xLeft;
				x2 = xLeft;
				x3 = xRight;
				x4 = xRight;
				y1 = yBottom;
				y2 = yTop;
				y3 = yTop;
				y4 = yBottom;
			} else {
				x1 = xLeft;
				x2 = xLeft;
				x3 = xRight;
				x4 = xRight;
				y1 = yTop;
				y2 = yBottom;
				y3 = yBottom;
				y4 = yTop;
			}
		} else {
			if (playerJ > j) {
				x1 = xLeft;
				x2 = xRight;
				x3 = xRight;
				y1 = yTop;
				y2 = yTop;
				y3 = yBottom;
			} else {
				if (playerJ === j) {
					x1 = xLeft;
					x2 = xRight;
					x3 = xRight;
					x4 = xLeft;
					y1 = yTop;
					y2 = yTop;
					y3 = yBottom;
					y4 = yBottom;
				} else {
					x1 = xLeft;
					x2 = xRight;
					x3 = xRight;
					y1 = yBottom;
					y2 = yBottom;
					y3 = yTop;
				}
			}
		}
	}
	var x1_, x2_, x3_, y1_, y2_, y3_;
	//var ratioOfPlayerHeightToBlockHeight = 1.1 + dimmerRadius/210;
	//var factor = 1/(ratioOfPlayerHeightToBlockHeight-1);
	var factor = 0.5;
	playerX += pixelWidth/2;
	playerY += pixelHeight/2;
	var dx = playerX - x1;
	var dy = playerY - y1;
	var distanceToPlayer = Math.sqrt(dx*dx + dy*dy);
	var lengthOfShadow1 = factor*distanceToPlayer;
	var angleOfShadow1 = Math.atan2(-dy,-dx);
	dx = playerX - x2;
	dy = playerY - y2;
	distanceToPlayer = Math.sqrt(dx*dx + dy*dy);
	var lengthOfShadow2 = factor*distanceToPlayer;
	var angleOfShadow2 = Math.atan2(-dy,-dx);
	dx = playerX - x3;
	dy = playerY - y3;
	distanceToPlayer = Math.sqrt(dx*dx + dy*dy);
	var lengthOfShadow3 = factor*distanceToPlayer;
	var angleOfShadow3 = Math.atan2(-dy,-dx);
	dx = playerX - x4;
	dy = playerY - y4;
	distanceToPlayer = Math.sqrt(dx*dx + dy*dy);
	var lengthOfShadow4 = factor*distanceToPlayer;
	var angleOfShadow4 = Math.atan2(-dy,-dx);
	
	x1_ = x1 + lengthOfShadow1*Math.cos(angleOfShadow1);
	y1_ = y1 + lengthOfShadow1*Math.sin(angleOfShadow1);
	x2_ = x2 + lengthOfShadow2*Math.cos(angleOfShadow2);
	y2_ = y2 + lengthOfShadow2*Math.sin(angleOfShadow2);
	x3_ = x3 + lengthOfShadow3*Math.cos(angleOfShadow3);
	y3_ = y3 + lengthOfShadow3*Math.sin(angleOfShadow3);
	if (x4 > 0) {
		var x4_ = x4 + lengthOfShadow4*Math.cos(angleOfShadow4);
		var y4_ = y4 + lengthOfShadow4*Math.sin(angleOfShadow4);
	}
	imageContext.fillStyle = "black";
	imageContext.beginPath();
	imageContext.moveTo(Math.round(x1),Math.round(y1));
	imageContext.lineTo(Math.round(x1_),Math.round(y1_));
	imageContext.lineTo(Math.round(x2_),Math.round(y2_));
	imageContext.lineTo(Math.round(x3_),Math.round(y3_));
	if (x4 > 0) {
		imageContext.lineTo(Math.round(x4_),Math.round(y4_));
		imageContext.lineTo(Math.round(x4),Math.round(y4));
	}
	imageContext.lineTo(Math.round(x3),Math.round(y3));
	imageContext.lineTo(Math.round(x2),Math.round(y2));
	imageContext.lineTo(Math.round(x1),Math.round(y1));
	imageContext.closePath();
	imageContext.fill();
}

function drawCoinAura(i,j) {
	if (Math.abs(i-playerI) > 10 || Math.abs(j-playerJ) > 10) return;
	var radius = 50;
	var grad = imageContext.createRadialGradient(i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5,0,i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5,radius);
	grad.addColorStop(0.2,"rgba(158,11,0,1)");
	grad.addColorStop(1,"rgba(158,11,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5);
	imageContext.arc(i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5,radius,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
}

function drawAnkhAura(i,j) {
	if (Math.abs(i-playerI) > 10 || Math.abs(j-playerJ) > 10) return;
	var radius = 50;
	var grad = imageContext.createRadialGradient(i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5,0,i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5,radius);
	grad.addColorStop(0,"rgba(100,0,0,1)");
	grad.addColorStop(1,"rgba(100,0,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5);
	imageContext.arc(i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5,radius,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
}

function drawEmberAura(i,j) {
	if (Math.abs(i-playerI) > 10 || Math.abs(j-playerJ) > 10) return;
	var radius = 50;
	var grad = imageContext.createRadialGradient(i*pixelWidth+blankSpaceWidth+10,j*pixelHeight+blankSpaceHeight+10,0,i*pixelWidth+blankSpaceWidth+10,j*pixelHeight+blankSpaceHeight+10,radius);
	grad.addColorStop(0.6,"rgba(255,69,0,1)");
	grad.addColorStop(1,"rgba(255,69,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(i*pixelWidth+blankSpaceWidth+10,j*pixelHeight+blankSpaceHeight+10);
	imageContext.arc(i*pixelWidth+blankSpaceWidth+10,j*pixelHeight+blankSpaceHeight+10,radius,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
}

function drawPentacleAura(i,j) {
	if (Math.abs(i-playerI) > 10 || Math.abs(j-playerJ) > 10) return;
	var radius = 50;
	var grad = imageContext.createRadialGradient(i*pixelWidth+blankSpaceWidth+10,j*pixelHeight+blankSpaceHeight+10,0,i*pixelWidth+blankSpaceWidth+10,j*pixelHeight+blankSpaceHeight+10,radius);
	grad.addColorStop(0.6,"rgba(255,0,0,1)");
	grad.addColorStop(1,"rgba(255,0,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(i*pixelWidth+blankSpaceWidth+10,j*pixelHeight+blankSpaceHeight+10);
	imageContext.arc(i*pixelWidth+blankSpaceWidth+10,j*pixelHeight+blankSpaceHeight+10,radius,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
}

function drawShadowCanvas() {
	shadowContext.clearRect(0,0,canvasWidth,canvasHeight);
	imageContext.clearRect(0,0,canvasWidth,canvasHeight);
	imageContext.save();
	imageContext.translate(-playerI*pixelWidth,-playerJ*pixelHeight);
	for (var i = 0; i < grid.length; i++) {
		for (var j = 0; j < grid[i].length; j++) {
			if (grid[i][j] === -1) {
				drawShadow(i,j);
			}
		}
	}
	for (var i = 0; i < coinsI.length; i++) {
		if (isCoinActive[i]) {
			drawCoinAura(coinsI[i],coinsJ[i]);
		}
	}
	for (var i = 0; i < ankhsI.length; i++) {
		if (isAnkhActive[i]) {
			drawAnkhAura(ankhsI[i],ankhsJ[i]);
		}
	}
	for (var i = 0; i < embersI.length; i++) {
		if (isEmberActive[i]) {
			drawEmberAura(embersI[i],embersJ[i]);
		}
	}
	for (var i = 0; i < pentacleI.length; i++) {
		drawPentacleAura(pentacleI[i],pentacleJ[i]);
	}
	imageContext.clearRect(0,0,blankSpaceWidth,largeImageHeight);
	imageContext.clearRect(0,0,largeImageWidth,blankSpaceWidth);
	imageContext.clearRect(0,largeImageHeight-blankSpaceHeight,largeImageWidth,blankSpaceHeight);
	imageContext.clearRect(largeImageWidth-blankSpaceWidth,0,blankSpaceWidth,largeImageHeight);
	imageContext.restore();
	shadowContext.globalAlpha = 0.5;
	shadowContext.drawImage(imageCanvas,0,0,imageCanvas.width,imageCanvas.height,0,0,canvasWidth,canvasHeight);
}

function rankDirectionsByDistance(distanceArray) {
	var distArray = new Array(4);
	for (var i = 0; i < 4; i++) {
		distArray[i] = distanceArray[i];
	}
	var dist = distArray[0];
	var rank0 = 0;
	for (var i = 1; i < 4; i++) {
		if (distArray[i] < dist) {
			rank0 = i;
			dist = distArray[i];
		}
	}
	distArray[rank0] = 10000;
	dist = distArray[0];
	var rank1 = 0;
	for (var i = 1; i < 4; i++) {
		if (distArray[i] < dist) {
			rank1 = i;
			dist = distArray[i];
		}
	}
	distArray[rank1] = 10000;
	dist = distArray[0];
	var rank2 = 0;
	for (var i = 1; i < 4; i++) {
		if (distArray[i] < dist) {
			rank2 = i;
			dist = distArray[i];
		}
	}
	distArray[rank2] = 10000;
	dist = distArray[0];
	var rank3 = 0;
	for (var i = 1; i < 4; i++) {
		if (distArray[i] < dist) {
			rank3 = i;
			dist = distArray[i];
		}
	}
	var ranks = [rank0,rank1,rank2,rank3];
	return ranks;
}

function renderMaze()
{
	if (isVictoryPlacardUp) {
		drawVictoryPlacard();
		return;
	}
	footstepsContext.clearRect(0,0,420,420);
	footstepsContext.save();
	footstepsContext.translate(-playerI*pixelWidth,-playerJ*pixelHeight);
	for (var i = 0; i < footstepXs.length; i++) {
		if (footstepXs[i] >= 0) {
			footstepsContext.globalAlpha = footstepAlphas[i];
			footstepsContext.drawImage(footstepImages[footstepDirections[i]],footstepXs[i],footstepYs[i]);
		}
	}
	footstepsContext.restore();
	if (isTargetTrackingOn) {
		footstepsContext.globalAlpha = 1;
		footstepsContext.drawImage(targetImage,(targetI - playerI)*pixelWidth + blankSpaceWidth,(targetJ - playerJ)*pixelHeight + blankSpaceHeight);
	}
	drawShadowCanvas();
	drawEmbers();
	if (!isTransitionRendering) {
		playerContext.clearRect(0,0,canvasWidth,canvasHeight);
		playerContext.drawImage(playerImages[playerDirection],blankSpaceWidth-20,blankSpaceHeight-20);
	}
	backgroundContext.clearRect(0,0,canvasWidth,canvasHeight);
	backgroundContext.drawImage(mazeImages[currentLevel],playerI*pixelWidth,playerJ*pixelHeight,canvasWidth,canvasHeight,0,0,canvasWidth,canvasHeight);
	overContext.clearRect(0,0,canvasWidth,canvasHeight);
	overContext.drawImage(overImages[currentLevel],playerI*pixelWidth,playerJ*pixelHeight,canvasWidth,canvasHeight,0,0,canvasWidth,canvasHeight);
	underContext.clearRect(0,0,canvasWidth,canvasHeight);
	underContext.drawImage(underImages[currentLevel],playerI*pixelWidth,playerJ*pixelHeight,canvasWidth,canvasHeight,0,0,canvasWidth,canvasHeight);
	if (isLevelComplete) {
		underContext.drawImage(floorTileImage,(20-playerI)*pixelWidth+blankSpaceWidth,-playerJ*pixelHeight-20+blankSpaceHeight);
	}
}

function drawUnderImage(index) {
	if (index >= numberOfLevels) {
		areImagesLoaded = 1;
		drawWater();
		isReplayOn = 1;
		rescaleAllCanvases();
		window.addEventListener("resize",rescaleAllCanvases);
		document.onkeydown = function(e) {
			arrowKey(e.keyCode);
		};
		document.onkeyup = function(e) {
			if (e.keyCode == lastkeycode) {keyReleased = 1;}
		};
		return;
	}
	underImages[index] = new Image(largeImageWidth,largeImageHeight);
	underImages[index].src = underImageSourceLevels[index];
	underImages[index].onload = function() {
		drawUnderImage(index+1);
	};
}

function drawOverImage(index)
{
	if (index >= numberOfLevels) {
		drawUnderImage(0);
		return;
	}
	overImages[index] = new Image(largeImageWidth,largeImageHeight);
	overImages[index].src = overImageSourceLevels[index];
	overImages[index].onload = function() {
		drawOverImage(index+1);
	};
}

function drawMazeImage(index)
{
	if (index >= numberOfLevels) {
		drawOverImage(0);
		return;
	}
	mazeImages[index] = new Image(largeImageWidth,largeImageHeight);
	mazeImages[index].src = mazeImageSourceLevels[index];
	mazeImages[index].onload = function() {
		drawMazeImage(index+1);
	};
}

function dealiasArray(arr) {
	var newArray = new Array(arr.length);
	for (var i = 0; i < arr.length; i++) {
		newArray[i] = arr[i];
	}
	return newArray;
}

function dealiasGrid(arr) {
	var newArray = new Array(arr.length);
	for (var i = 0; i < arr.length; i++) {
		newArray[i] = new Array(arr[i].length);
		for (var j = 0; j < arr[i].length; j++) {
			newArray[i][j] = arr[i][j];
		}
	}
	return newArray;
}

function initializeGrid()
{
	embersFound = numberOfEmbers;
	scrollPreventCanvas.addEventListener("mousedown",function(evt) {
		if (isIOS && !isDrumsAudioLoaded) loadDrumsAudio();
		if (isIOS && !isDeathAudioLoaded) loadDeathAudio();
		if (isIOS && !isTransitionAudioLoaded) loadTransitionAudio();
		if (isReplayOn) {
			isVictoryPlacardUp = 0;
			numberOfLives = startingLives;
			score = 0;
			currentLevel = 0;
			initializeGrid();
		}
	});
	scrollPreventCanvas.addEventListener("touchstart",function(evt) {
		evt.preventDefault();
		if (isIOS && !isDrumsAudioLoaded) loadDrumsAudio();
		if (isIOS && !isDeathAudioLoaded) loadDeathAudio();
		if (isIOS && !isTransitionAudioLoaded) loadTransitionAudio();
		if (isReplayOn) {
			isVictoryPlacardUp = 0;
			numberOfLives = startingLives;
			score = 0;
			embersFound = 0;
			currentLevel = 0;
			initializeGrid();
		} else {
			touchScreen(evt);
		}
	});
	scrollPreventCanvas.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	});
	dimmerRadius = 10;
	isTargetTrackingOn = 0;
	targetI = -1;
	targetJ = -1;
	gameOver = 1;
	score = 0;

	isLevelComplete = 0;
	grid = dealiasGrid(gridLevels[currentLevel]);
	
	for (var i = 0; i < grid.length; i++) {
		for (var j = 0; j < grid[i].length; j++) {
			if (grid[i][j] === -2) grid[i][j] = 0;
		}
	}
	pentacleI = dealiasArray(pentaclesILevels[currentLevel]);
	pentacleJ = dealiasArray(pentaclesJLevels[currentLevel]);
	playerI = pentacleI[0];
	playerJ = pentacleJ[0];
	playerDirection = 0;
	for (var i = 0; i < footstepXs.length; i++) {
		footstepXs[i] = -1;
		footstepYs[i] = -1;
		footstepAlphas[i] = 0;
		footstepDirections[i] = 0;
	}
	coinsI = dealiasArray(coinsILevels[currentLevel]);
	coinsJ = dealiasArray(coinsJLevels[currentLevel]);
	isCoinActive = new Array(coinsI.length);
	for (var i = 0; i < coinsI.length; i++) {
		isCoinActive[i] = 1;
	}
	embersI = dealiasArray(embersILevels[currentLevel]);
	embersJ = dealiasArray(embersJLevels[currentLevel]);
	isEmberActive = new Array(embersI.length);
	for (var i = 0; i < embersI.length; i++) {
		isEmberActive[i] = 1;
	}
	ankhsI = dealiasArray(ankhsILevels[currentLevel]);
	ankhsJ = dealiasArray(ankhsJLevels[currentLevel]);
	isAnkhActive = new Array(ankhsI.length);
	for (var i = 0; i < ankhsI.length; i++) {
		isAnkhActive[i] = 1;
	}
	isReplayOn = 0;
	if (areImagesLoaded) {
		drawPlacard();
		return;
	}
	drawCoinImage();
}

function drawHat() {
	imageContext.fillStyle = "saddlebrown";
	imageContext.beginPath();
	imageContext.moveTo(30,30);
	imageContext.arc(30,30,6,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
	imageContext.fillStyle = "peru";
	imageContext.beginPath();
	imageContext.moveTo(30,30);
	imageContext.arc(30,30,3,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
	imageContext.fillStyle = "sienna";
	imageContext.beginPath();
	imageContext.moveTo(30,27);
	imageContext.bezierCurveTo(28,30,28,30,30,33);
	imageContext.bezierCurveTo(32,30,32,30,30,27);
	imageContext.closePath();
	imageContext.fill();
}

function drawTorch() {
	imageContext.fillStyle = "saddlebrown";
	imageContext.fillRect(18,22,6,6);
	imageContext.fillStyle = "rgb(109,39,0)";
	imageContext.fillRect(20,24,2,2);
	var grad = imageContext.createRadialGradient(21,22,0,21,25,20);
	grad.addColorStop(0,"orangered");
	grad.addColorStop(1,"rgba(255,69,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(19,22);
	imageContext.lineTo(0,0);
	imageContext.lineTo(42,0);
	imageContext.lineTo(23,22);
	imageContext.closePath();
	imageContext.fill();
	imageContext.beginPath();
	imageContext.moveTo(19,28);
	imageContext.lineTo(0,50);
	imageContext.lineTo(42,50);
	imageContext.lineTo(23,28);
	imageContext.closePath();
	imageContext.fill();
	grad = imageContext.createRadialGradient(21,22,0,21,25,20);
	grad.addColorStop(0,"yellow");
	grad.addColorStop(1,"rgba(255,25,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(19,22);
	imageContext.lineTo(21,0);
	imageContext.lineTo(23,22);
	imageContext.closePath();
	imageContext.fill();
	imageContext.beginPath();
	imageContext.moveTo(19,28);
	imageContext.lineTo(21,50);
	imageContext.lineTo(23,28);
	imageContext.closePath();
	imageContext.fill();
}

function drawFlashlight() {
	imageContext.fillStyle = "dimgrey";
	imageContext.beginPath();
	imageContext.moveTo(20,27);
	imageContext.lineTo(20,21);
	imageContext.lineTo(18,17);
	imageContext.lineTo(25,17);
	imageContext.lineTo(23,21);
	imageContext.lineTo(23,27);
	imageContext.lineTo(20,27);
	imageContext.closePath();
	imageContext.fill();
}

function drawHand() {
	imageContext.fillStyle = "darksalmon";
	imageContext.beginPath();
	imageContext.moveTo(20,22);
	imageContext.lineTo(18,27);
	imageContext.lineTo(20,29);
	imageContext.bezierCurveTo(24,28,24,28,23,27);
	imageContext.bezierCurveTo(21,26,21,26,20,22);
	imageContext.closePath();
	imageContext.fill();
}

function drawBody() {
	imageContext.fillStyle = "black";
	imageContext.beginPath();
	imageContext.moveTo(30,26);
	imageContext.bezierCurveTo(20,29,20,29,20,30);
	imageContext.bezierCurveTo(20,32,20,33,30,35);
	imageContext.lineTo(30,26);
	imageContext.closePath();
	imageContext.fill();
	imageContext.beginPath();
	imageContext.moveTo(30,26);
	imageContext.bezierCurveTo(40,29,40,29,40,30);
	imageContext.bezierCurveTo(40,32,40,33,30,35);
	imageContext.lineTo(30,26);
	imageContext.closePath();
	imageContext.fill();
}

function drawRays() {
	var grad = imageContext.createRadialGradient(21,18,0,22,18,16);
	grad.addColorStop(0,"rgba(255,69,0,1)");
	grad.addColorStop(1,"rgba(255,69,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(18,17);
	imageContext.lineTo(25,17);
	imageContext.lineTo(22,0);
	imageContext.lineTo(21,0);
	imageContext.lineTo(18,17);
	imageContext.closePath();
	imageContext.fill();
	var grad = imageContext.createRadialGradient(21,18,0,22,18,16);
	grad.addColorStop(0,"rgba(255,165,0,0.8)");
	grad.addColorStop(0.8,"rgba(255,165,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(18,17);
	imageContext.lineTo(0,0);
	imageContext.lineTo(43,0);
	imageContext.lineTo(25,17);
	imageContext.lineTo(18,17);
	imageContext.closePath();
	imageContext.fill();
}

function setFootstep(x,y,direction) {
	var index = -1;
	for (var i = 0; i < footstepXs.length; i++) {
		if (footstepXs[i] < 0) {
			index = i;
			break;
		}
	}
	if (index < 0) {
		return;
	}
	footstepXs[index] = x;
	footstepYs[index] = y;
	footstepAlphas[index] = 1;
	footstepDirections[index] = direction;
	var footstepTimer = setInterval(function() {
		footstepAlphas[index] -= 1./30.;
		if (footstepAlphas[index] <= 0) {
			clearInterval(footstepTimer);
			footstepXs[index] = -1;
			footstepYs[index] = -1;
			footstepAlphas[index] = 0;
			footstepDirections[index] = 0;
			renderMaze();
		}
	},playerTimer);
}

function drawFootstepImage4() {
	footstepImages[3] = new Image(10,10);
	footstepImages[3].src = footstepImageURLs[3];
	footstepImages[3].onload = function() {
		drawMazeImage(0);
	};
}

function drawFootstepImage3() {
	footstepImages[2] = new Image(10,10);
	footstepImages[2].src = footstepImageURLs[2];
	footstepImages[2].onload = drawFootstepImage4;
}

function drawFootstepImage2() {
	footstepImages[1] = new Image(10,10);
	footstepImages[1].src = footstepImageURLs[1];
	footstepImages[1].onload = drawFootstepImage3;
}

function drawFootstepImage1() {
	footstepImages[0] = new Image(10,10);
	footstepImages[0].src = footstepImageURLs[0];
	footstepImages[0].onload = drawFootstepImage2;
}

function drawPlayerImage4() {
	playerImages[3] = new Image(60,60);
	playerImages[3].src = playerImageURLs[3];
	playerImages[3].onload = drawFootstepImage1;
}

function drawPlayerImage3() {
	playerImages[2] = new Image(60,60);
	playerImages[2].src = playerImageURLs[2];
	playerImages[2].onload = drawPlayerImage4;
}

function drawPlayerImage2() {
	playerImages[1] = new Image(60,60);
	playerImages[1].src = playerImageURLs[1];
	playerImages[1].onload = drawPlayerImage3;
}

function drawPlayerImage1() {
	playerImages[0] = new Image(60,60);
	playerImages[0].src = playerImageURLs[0];
	playerImages[0].onload = drawPlayerImage2;
}

function setDimmerInterval() {
	if (isDimmerTimerRunning) return;
	isDimmerTimerRunning = 1;
	var dimmerInterval = setInterval(function() {
		if (dimmerCanvasIsDrawing) return;
		if (dimmerRadius <= 0) {
			clearInterval(dimmerInterval);
			isDimmerTimerRunning = 0;
			deathSequence();
			return;
		}
		dimmerRadius -= 0.03;
		drawDimmerCanvas();
	},10);
}

function drawWater() {
	waterTheta = 0;
	waterY = 0;
	waterTimer = setInterval(function() {
		waterContext.clearRect(0,0,420,420);
		waterContext.drawImage(waterImage,Math.round(waterX),waterY,420,420,0,0,420,420);
		waterY++;
		waterY %= 840;
		waterTheta += 0.3*Math.PI/180;
		waterX = 30*Math.sin(waterTheta)*Math.sin(waterTheta);
	},10);
	setDimmerInterval();
}

function drawWaterImage() {
	waterImage.src = waterImageURL;
	waterImage.onload = drawPlayerImage1;
}

function drawHeiroglyphImage(index) {
	if (index >= numberOfLevels) {
		drawSpikesImage();
		phiX = -50*Math.PI/180;
		phiY = -20*Math.PI/180;
		thetaX = phiX;
		thetaY = phiY;
		thetaZ = 0;
		rotateX();
		rotateY();
		rotateZ();
		var glyphTimer = setInterval(function() {
			lightningIndex++;
			lightningIndex %= lightningImages.length;
			thetaX = -omega*Math.sin(phiY)*Math.sin(phiX);
			thetaY = -omega*Math.cos(phiX);
			thetaZ = -omega*Math.sin(phiX)*Math.cos(phiY);
			rotateX();
			rotateY();
			rotateZ();
			drawRotatedHeiroglyph();
			drawCoins();
		},30);
		return;
	}
	heiroglyphImages[index] = new Image(60,60);
	heiroglyphImages[index].src = heiroglyphSourceLevels[index];
	heiroglyphImages[index].onload = function() {
		drawHeiroglyphImage(index+1);
	}
}

function drawRotatedCoin(i,j) {
	coinsContext.save();
	coinsContext.translate((i-playerI)*pixelWidth+blankSpaceWidth+5,(j-playerJ)*pixelHeight+blankSpaceHeight+5);
	coinsContext.transform(rotationMatrix[0][0],rotationMatrix[1][0],rotationMatrix[0][1],rotationMatrix[1][1],rotationMatrix[0][2],rotationMatrix[1][2]);
	coinsContext.translate(-8.5,-8.5);
	coinsContext.drawImage(coinEdge,0,0,20,20,0,0,17,17);
	coinsContext.restore();
	coinsContext.save();
	coinsContext.translate((i-playerI)*pixelWidth+blankSpaceWidth+5,(j-playerJ)*pixelHeight+blankSpaceHeight+7);
	coinsContext.transform(rotationMatrix[0][0],rotationMatrix[1][0],rotationMatrix[0][1],rotationMatrix[1][1],rotationMatrix[0][2],rotationMatrix[1][2]);
	coinsContext.translate(-8.5,-8.5);
	coinsContext.drawImage(coinImage,0,0,20,20,0,0,17,17);
	coinsContext.restore();
}

function drawCoins() {
	coinsContext.clearRect(0,0,420,420);
	for (var i = 0; i < coinsI.length; i++) {
		if (isCoinActive[i]) {
			drawRotatedCoin(coinsI[i],coinsJ[i]);
		}
	}
	for (var i = 0; i < ankhsI.length; i++) {
		if (isAnkhActive[i]) {
			drawRotatedAnkh(ankhsI[i],ankhsJ[i]);
		}
	}
}

function drawRotatedAnkh(i,j) {
	coinsContext.save();
	coinsContext.translate((i-playerI)*pixelWidth+blankSpaceWidth+5,(j-playerJ)*pixelHeight+blankSpaceHeight+5);
	coinsContext.transform(rotationMatrix[0][0],rotationMatrix[1][0],rotationMatrix[0][1],rotationMatrix[1][1],rotationMatrix[0][2],rotationMatrix[1][2]);
	coinsContext.translate(-8.5,-8.5);
	coinsContext.drawImage(ankhEdgeImage,0,0,20,20,0,0,17,17);
	coinsContext.restore();
	coinsContext.save();
	coinsContext.translate((i-playerI)*pixelWidth+blankSpaceWidth+5,(j-playerJ)*pixelHeight+blankSpaceHeight+7);
	coinsContext.transform(rotationMatrix[0][0],rotationMatrix[1][0],rotationMatrix[0][1],rotationMatrix[1][1],rotationMatrix[0][2],rotationMatrix[1][2]);
	coinsContext.translate(-8.5,-8.5);
	coinsContext.drawImage(ankhImage,0,0,20,20,0,0,17,17);
	coinsContext.restore();
}

function drawEmbers() {
	powerupsContext.clearRect(0,0,420,420);
	for (var i = 0; i < embersI.length; i++) {
		if (isEmberActive[i]) {
			//powerupsContext.drawImage(emberImage,(embersI[i]-playerI)*pixelWidth+blankSpaceWidth,(embersJ[i]-playerJ)*pixelHeight+blankSpaceHeight);
			powerupsContext.drawImage(flameImages[flameIndex],(embersI[i]-playerI)*pixelWidth+blankSpaceWidth,(embersJ[i]-playerJ)*pixelHeight+blankSpaceHeight-10);
		}
	}
}

function drawScore() {
	scoreContext.clearRect(0,0,420,460);
	scoreContext.fillStyle = "black";
	scoreContext.fillRect(0,0,420,40);
	if (isVictoryPlacardUp) return;
	scoreContext.drawImage(coinImage,390,10);
	scoreContext.fillStyle = "white";
	scoreContext.font = "14px helvetica";
	scoreContext.textAlign = "right";
	scoreContext.textBaseline = "middle";
	scoreContext.fillText("" + score + "/" + coinsI.length,385,20);
	scoreContext.drawImage(ankhImage,10,10);
	scoreContext.textAlign = "left";
	scoreContext.fillText("" + numberOfLives,35,20);
	scoreContext.textAlign = "center";
	scoreContext.fillText("Level " + (currentLevel+1),210,20);
}

function coinAnimation() {
	var x = 200;
	var y = 240;
	var coinTimer = setInterval(function() {
		//drawScore();
		scoreContext.clearRect(0,40,420,420);
		scoreContext.drawImage(coinImage,x,y);
		x += 19;
		y -= 23;
		if (x >= 390) {
			clearInterval(coinTimer);
			drawScore();
		}
	},10);
}

function ankhAnimation() {
	var x = 200;
	var y = 240;
	var ankhTimer = setInterval(function() {
		scoreContext.clearRect(0,40,420,420);
		scoreContext.drawImage(ankhImage,x,y);
		x -= 19;
		y -= 23;
		if (x <= 10) {
			clearInterval(ankhTimer);
			drawScore();
		}
	},10);
}

function drawRotatedHeiroglyph() {
	if (gameOver) {
		glyphContext.clearRect(0,0,420,420);
		return;
	}
	glyphContext.clearRect(0,0,420,420);
	glyphContext.drawImage(lightningImages[lightningIndex],-playerI*pixelWidth+570-lightningImages[lightningIndex].width/2,-playerJ*pixelHeight+20-lightningImages[lightningIndex].height/2);
}

function drawSpikesImage() {
	spikesImage.src = spikesImageURL;
	spikesImage.onload = drawScreenshotImage;
}

function drawFloorTileImage() {
	floorTileImage.src = floorTileImageURL;
	floorTileImage.onload = function() {
		drawHeiroglyphImage(0);
	}
}

function drawEmberImage() {
	emberImage.src = emberImageURL;
	emberImage.onload = drawFloorTileImage;
}

function drawAnkhEdge() {
	ankhEdgeImage.src = ankhEdgeImageURL;
	ankhEdgeImage.onload = drawEmberImage;
}

function drawAnkhImage() {
	ankhImage.src = ankhImageURL;
	ankhImage.onload = drawAnkhEdge;
}

function drawTargetImage() {
	targetImage.src = targetImageURL;
	targetImage.onload = drawAnkhImage;
}

function drawFlameImage(index) {
	if (index >= flameImages.length) {
		drawTargetImage();
		flameIndex = 0;
		var flameTimer = setInterval(function() {
			flameIndex++;
			flameIndex %= flameImages.length;
			drawEmbers();
		},30);
		return;
	}
	flameImages[index] = new Image();
	flameImages[index].src = flameDataURLs[index];
	flameImages[index].onload = function() {
		drawFlameImage(index+1);
	};
}

function drawFireWreathImage() {
	fireWreathImage.src = fireWreathImageURL;
	fireWreathImage.onload = function() {
		drawFlameImage(0);
	};
}

function drawLightningImage(index) {
	if (index >= lightningDataURLs.length) {
		drawFireWreathImage();
		return;
	}
	lightningImages[index] = new Image();
	lightningImages[index].src = lightningDataURLs[index];
	lightningImages[index].onload = function() {
		drawLightningImage(index+1);
	};
}

function drawCoinEdge() {
	coinEdge.src = coinEdgeURL;
	coinEdge.onload = function() {
		drawLightningImage(0);
	};
}

function drawCoinImage() {
	coinImage.src = coinImageURL;
	coinImage.onload = drawCoinEdge;
}

function walk(currentI,currentJ,newI,newJ,frame)
{
	playerWalkIndex = frame-1;
	if (frame > 4)
	{
		playerWalkIndex = 0;
		checkForPentacle();
		if (grid[playerI][playerJ] == -2 && !gameOver)
		{
			deathSequence();
			return;
		}
		for (var i = 0; i < coinsI.length; i++) {
			if (isCoinActive[i] && playerI === coinsI[i] && playerJ === coinsJ[i]) {
				isCoinActive[i] = 0;
				score++;
				coinAnimation();
				if (score === coinsI.length) isLevelComplete = 1;
			}
		}
		for (var i = 0; i < embersI.length; i++) {
			if (isEmberActive[i] && playerI === embersI[i] && playerJ === embersJ[i]) {
				isEmberActive[i] = 0;
				embersFound++;
				drawDimmerCanvas();
				drawEmbers();
			}
		}
		for (var i = 0; i < ankhsI.length; i++) {
			if (isAnkhActive[i] && playerI === ankhsI[i] && playerJ === ankhsJ[i]) {
				isAnkhActive[i] = 0;
				numberOfLives++;
				ankhAnimation();
			}
		}
		setTimeout( function() {
			isWalking = 0;
			if (!keyReleased || couldIGetAKeyInEdgewise)
			{
				arrowKey(lastkeycode);
				return;
			};
			if (isTargetTrackingOn) {
				targetTracking();
				return;
			}
			renderMaze();
		}, playerTimer);
		return;
	}
	playerI = (newI - currentI)*frame/4 + currentI;
	playerJ = (newJ - currentJ)*frame/4 + currentJ;
	renderMaze();
	(function(cI,cJ,nI,nJ,f) {
		setTimeout( function() {
			walk(cI,cJ,nI,nJ,f+1);
		}, playerTimer);
	})(currentI,currentJ,newI,newJ,frame);
}
/*
function TargetTracker(currentI,currentJ,avoidDirection,stepNumber) {
	this.i = currentI,
	this.j = currentJ,
	this.avoid = avoidDirection,
	this.step = stepNumber,
	this.findMinimumDistanceSquared = function distanceFinder() {
		var maxSteps = 5;
		if (this.step >= maxSteps) {
			if (this.i < 0 || this.j < 0 || this.i >= grid.length || this.j >= grid[this.i].length || grid[this.i][this.j] < 0) return 10000;
			return (this.i-targetI)*(this.i-targetI) + (this.j-targetJ)*(this.j-targetJ);
		}
		var tracker = new TargetTracker(this.i,this.j,-1,maxSteps);
		var distance = distanceFinder.call(tracker);
		if (distance >= 10000) return distance;
		var upTracker = new TargetTracker(this.i,this.j-1,1,this.step+1);
		var downTracker = new TargetTracker(this.i,this.j+1,0,this.step+1);
		var leftTracker = new TargetTracker(this.i-1,this.j,3,this.step+1);
		var rightTracker = new TargetTracker(this.i+1,this.j,2,this.step+1);
		var upDistSqrd = distanceFinder.call(upTracker);
		var downDistSqrd = distanceFinder.call(downTracker);
		var leftDistSqrd = distanceFinder.call(leftTracker);
		var rightDistSqrd = distanceFinder.call(rightTracker);
		var minDistSqrd = (upDistSqrd < downDistSqrd ? upDistSqrd : downDistSqrd);
		minDistSqrd = (minDistSqrd < leftDistSqrd ? minDistSqrd : leftDistSqrd);
		minDistSqrd = (minDistSqrd < rightDistSqrd ? minDistSqrd : rightDistSqrd);
		minDistSqrd = (minDistSqrd < distance ? minDistSqrd : distance);
		return minDistSqrd;
	},
	this.findMinimumSteps = function stepsFinder() {
		var maxSteps = 5;
		if (this.i === targetI && this.j === targetJ) return this.step;
		if (this.step >= maxSteps) return 10000;
		if (this.i < 0 || this.j < 0 || this.i >= grid.length || this.j >= grid[this.i].length || grid[this.i][this.j] < 0) return 10000;
		var upTracker = new TargetTracker(this.i,this.j-1,1,this.step+1);
		var downTracker = new TargetTracker(this.i,this.j+1,0,this.step+1);
		var leftTracker = new TargetTracker(this.i-1,this.j,3,this.step+1);
		var rightTracker = new TargetTracker(this.i+1,this.j,2,this.step+1);
		var upSteps = stepsFinder.call(upTracker);
		var downSteps = stepsFinder.call(downTracker);
		var leftSteps = stepsFinder.call(leftTracker);
		var rightSteps = stepsFinder.call(rightTracker);
		var minSteps = (upSteps < downSteps ? upSteps : downSteps);
		minSteps = (minSteps < leftSteps ? minSteps : leftSteps);
		minSteps = (minSteps < rightSteps ? minSteps : rightSteps);
		return minSteps;
	},
	this.rankDirections = function() {
		var upTracker = new TargetTracker(this.i,this.j-1,1,this.step+1);
		var downTracker = new TargetTracker(this.i,this.j+1,0,this.step+1);
		var leftTracker = new TargetTracker(this.i-1,this.j,3,this.step+1);
		var rightTracker = new TargetTracker(this.i+1,this.j,2,this.step+1);
		var upDistSqrd = upTracker.findMinimumDistanceSquared();
		var downDistSqrd = downTracker.findMinimumDistanceSquared();
		var leftDistSqrd = leftTracker.findMinimumDistanceSquared();
		var rightDistSqrd = rightTracker.findMinimumDistanceSquared();
		var distanceSquaredArray = [leftDistSqrd,rightDistSqrd,upDistSqrd,downDistSqrd];
		var zeroes = 0;
		for (var i = 0; i < distanceSquaredArray.length; i++) {
			if (distanceSquaredArray[i] === 0) zeroes++;
		}
		if (zeroes > 1) {
			upDistSqrd = upTracker.findMinimumSteps();
			downDistSqrd = downTracker.findMinimumSteps();
			leftDistSqrd = leftTracker.findMinimumSteps();
			rightDistSqrd = rightTracker.findMinimumSteps();
			distanceSquaredArray = [leftDistSqrd,rightDistSqrd,upDistSqrd,downDistSqrd];
		}
		var directionsRanked = rankDirectionsByDistance(distanceSquaredArray);
		return directionsRanked;
	}
}
*/
function TargetTracker(currentI,currentJ,avoidDirection,stepNumber) {
	this.i = currentI,
	this.j = currentJ,
	this.avoid = avoidDirection,
	this.step = stepNumber,
	this.findMinimumDistanceSquared = function distanceFinder() {
		var maxSteps = 7;
		if (this.step >= maxSteps) {
			if (this.i < 0 || this.j < 0 || this.i >= grid.length || this.j >= grid[this.i].length || grid[this.i][this.j] < 0) return 10000;
			return (this.i-targetI)*(this.i-targetI) + (this.j-targetJ)*(this.j-targetJ);
		}
		var tracker = new TargetTracker(this.i,this.j,-1,maxSteps);
		var distance = distanceFinder.call(tracker);
		if (distance >= 10000) return distance;
		var upTracker = new TargetTracker(this.i,this.j-1,1,this.step+1);
		var downTracker = new TargetTracker(this.i,this.j+1,0,this.step+1);
		var leftTracker = new TargetTracker(this.i-1,this.j,3,this.step+1);
		var rightTracker = new TargetTracker(this.i+1,this.j,2,this.step+1);
		var upDistSqrd = distanceFinder.call(upTracker);
		var downDistSqrd = distanceFinder.call(downTracker);
		var leftDistSqrd = distanceFinder.call(leftTracker);
		var rightDistSqrd = distanceFinder.call(rightTracker);
		var minDistSqrd = (upDistSqrd < downDistSqrd ? upDistSqrd : downDistSqrd);
		minDistSqrd = (minDistSqrd < leftDistSqrd ? minDistSqrd : leftDistSqrd);
		minDistSqrd = (minDistSqrd < rightDistSqrd ? minDistSqrd : rightDistSqrd);
		minDistSqrd = (minDistSqrd < distance ? minDistSqrd : distance);
		return minDistSqrd;
	},
	this.findMinimumSteps = function stepsFinder(dist) {
		var maxSteps = 7;
		if (this.i < 0 || this.j < 0 || this.i >= grid.length || this.j >= grid[this.i].length || grid[this.i][this.j] < 0) return 10000;
		if ((this.i-targetI)*(this.i-targetI) + (this.j-targetJ)*(this.j-targetJ) <= dist) return this.step;
		if (this.step >= maxSteps) return 10000;
		var upTracker = new TargetTracker(this.i,this.j-1,1,this.step+1);
		var downTracker = new TargetTracker(this.i,this.j+1,0,this.step+1);
		var leftTracker = new TargetTracker(this.i-1,this.j,3,this.step+1);
		var rightTracker = new TargetTracker(this.i+1,this.j,2,this.step+1);
		var upSteps = stepsFinder.call(upTracker,dist);
		var downSteps = stepsFinder.call(downTracker,dist);
		var leftSteps = stepsFinder.call(leftTracker,dist);
		var rightSteps = stepsFinder.call(rightTracker,dist);
		var minSteps = (upSteps < downSteps ? upSteps : downSteps);
		minSteps = (minSteps < leftSteps ? minSteps : leftSteps);
		minSteps = (minSteps < rightSteps ? minSteps : rightSteps);
		return minSteps;
	},
	this.rankDirections = function() {
		var upTracker = new TargetTracker(this.i,this.j-1,1,this.step+1);
		var downTracker = new TargetTracker(this.i,this.j+1,0,this.step+1);
		var leftTracker = new TargetTracker(this.i-1,this.j,3,this.step+1);
		var rightTracker = new TargetTracker(this.i+1,this.j,2,this.step+1);
		var upDistSqrd = upTracker.findMinimumDistanceSquared();
		var downDistSqrd = downTracker.findMinimumDistanceSquared();
		var leftDistSqrd = leftTracker.findMinimumDistanceSquared();
		var rightDistSqrd = rightTracker.findMinimumDistanceSquared();
		var distanceSquaredArray = [leftDistSqrd,rightDistSqrd,upDistSqrd,downDistSqrd];
		var directionsRanked = rankDirectionsByDistance(distanceSquaredArray);
		if (distanceSquaredArray[directionsRanked[0]] === distanceSquaredArray[directionsRanked[1]]) {
			upDistSqrd = upTracker.findMinimumSteps(distanceSquaredArray[directionsRanked[0]]);
			downDistSqrd = downTracker.findMinimumSteps(distanceSquaredArray[directionsRanked[0]]);
			leftDistSqrd = leftTracker.findMinimumSteps(distanceSquaredArray[directionsRanked[0]]);
			rightDistSqrd = rightTracker.findMinimumSteps(distanceSquaredArray[directionsRanked[0]]);
			distanceSquaredArray = [leftDistSqrd,rightDistSqrd,upDistSqrd,downDistSqrd];
			directionsRanked = rankDirectionsByDistance(distanceSquaredArray);
		}
		return directionsRanked;
	}
}

function targetTracking() {
	couldIGetAKeyInEdgewise = 0;
	keyReleased = 1;
	playerI = Math.round(playerI);
	playerJ = Math.round(playerJ);
	var deltaI = targetI - playerI;
	var deltaJ = targetJ - playerJ;
	isTargetTrackingOn = !(deltaI === 0 && deltaJ === 0);
	if (!isTargetTrackingOn) return;
	var tracker = new TargetTracker(playerI,playerJ,-1,0);
	var directionsRanked = tracker.rankDirections();
	var newI = playerI, newJ = playerJ;
	switch (directionsRanked[0]) {
		case 0:
			newI--;
			if (playerDirection === 1) isTargetTrackingOn = 0;
			playerDirection = 3;
			break;
		case 1:
			newI++;
			if (playerDirection === 3) isTargetTrackingOn = 0;
			playerDirection = 1;
			break;
		case 2:
			newJ--;
			if (playerDirection === 2) isTargetTrackingOn = 0;
			playerDirection = 0;
			break;
		case 3:
			newJ++;
			if (playerDirection === 0) isTargetTrackingOn = 0;
			playerDirection = 2;
			break;
	}
	isWalking = 1;
	var shiftFootstepX = (playerDirection % 2 === 0 ? 5:0);
	var shiftFootstepY = (playerDirection % 2 === 0 ? 0:5);
	setFootstep(playerI*pixelWidth+blankSpaceWidth-5+shiftFootstepX,playerJ*pixelHeight+blankSpaceHeight+5+shiftFootstepY,playerDirection);
	setFootstep(playerI*pixelWidth+blankSpaceWidth+5+shiftFootstepX,playerJ*pixelHeight+blankSpaceHeight-5+shiftFootstepY,playerDirection);
	walk(playerI,playerJ,newI,newJ,1);
}

function touchScreen(evt) {
	evt.preventDefault();
	if (gameOver) return;
	var rect = playerCanvas.getBoundingClientRect();
	var x = (evt.clientX || evt.targetTouches[0].clientX) - rect.left;
	x *= 420./playerCanvas.width;
	x += playerI*pixelWidth - 210;
	var y = (evt.clientY || evt.targetTouches[0].clientY) - rect.top;
	y *= 420./playerCanvas.height;
	y += playerJ*pixelHeight - 210;
	//x = Math.round(x/pixelWidth);
	//y = Math.round(y/pixelHeight);
	x /= pixelWidth;
	y /= pixelHeight;
	if (isLevelComplete && y < 0 && playerI === 20 && playerJ === 0) {
		animateTransition();
		return;
	}
	var xClosest = 0, yClosest = 0, distClosestSquared = x*x + y*y, tempDistance;
	for (var i = 0; i < grid.length; i++) {
		for (var j = 0; j < grid[i].length; j++) {
			if (grid[i][j]) continue;
			tempDistance = (i-x)*(i-x) + (j-y)*(j-y);
			if (tempDistance < distClosestSquared) {
				distClosestSquared = tempDistance;
				xClosest = i;
				yClosest = j;
			}
		}
	}
	targetI = xClosest;
	targetJ = yClosest;
	if (!isTargetTrackingOn) targetTracking();
}

function arrowKey(keycode)
{
	if (gameOver) return;
	if (isWalking)
	{
		if (lastkeycode != keycode) {couldIGetAKeyInEdgewise = 1;}
		lastkeycode = keycode;
		return;
	}
	keyReleased = 0;
	couldIGetAKeyInEdgewise = 0;
	lastkeycode = keycode;
	var newI = playerI;
	var newJ = playerJ;
	var newDirection = playerDirection;
	if (isLevelComplete && keycode === 38 && playerI === 20 && playerJ === 0) {
		animateTransition();
		return;
	}
	switch (keycode)
	{
		case 37: //left
			newI = playerI - 1;
			newDirection = 3;
			break;
		case 38: //up
			newJ = playerJ - 1;
			newDirection = 0;
			break;
		case 39: //right
			newI = playerI + 1;
			newDirection = 1;
			break;
		case 40: //down
			newJ = playerJ + 1;
			newDirection = 2;
			break;
	}
	if (newI < grid.length && newI >= 0 && newJ < grid[newI].length && newJ >= 0 && grid[newI][newJ] != -1)
	{
		playerDirection = newDirection;
		isWalking = 1;
		var shiftFootstepX = (playerDirection % 2 === 0 ? 5:0);
		var shiftFootstepY = (playerDirection % 2 === 0 ? 0:5);
		setFootstep(playerI*pixelWidth+blankSpaceWidth-5+shiftFootstepX,playerJ*pixelHeight+blankSpaceHeight+5+shiftFootstepY,playerDirection);
		setFootstep(playerI*pixelWidth+blankSpaceWidth+5+shiftFootstepX,playerJ*pixelHeight+blankSpaceHeight-5+shiftFootstepY,playerDirection);
		walk(playerI,playerJ,newI,newJ,1);
	} else {
		playerDirection = newDirection;
		renderMaze();
	}
	return;
}

function gameOverSequence()
{
	if (isVictoryPlacardUp) return;
	gameOver = 1;
	score = 0;
	embersFound = 0;
	numberOfLives = 0;
	isReplayOn = 1;
	dimmerContext.fillStyle = "black";
	dimmerContext.fillRect(0,0,420,420);
	scoreContext.clearRect(0,0,420,460);
	scoreContext.drawImage(screenshotImage,0,0);
}

function resetPlayerPosition() {
	var distanceSquared, tempI, tempJ, tempDistance;
	tempI = pentacleI[0];
	tempJ = pentacleJ[0];
	distanceSquared = (playerI-tempI)*(playerI-tempI) + (playerJ-tempJ)*(playerJ-tempJ);
	for (var i = 1; i < pentacleI.length; i++) {
		tempDistance = (playerI-pentacleI[i])*(playerI-pentacleI[i]) + (playerJ-pentacleJ[i])*(playerJ-pentacleJ[i]);
		if (tempDistance < distanceSquared) {
			distanceSquared = tempDistance;
			tempI = pentacleI[i];
			tempJ = pentacleJ[i];
		}
	}
	playerI = tempI;
	playerJ = tempJ;
}

function drawPlacard() {
	isPlacardDrawing = 1;
	textContext.fillStyle = "black";
	textContext.fillRect(0,0,canvasWidth,canvasHeight);
	textContext.fillStyle = "gold";
	textContext.font = "20px Georgia";
	textContext.textAlign = "center";
	textContext.textBaseline = "middle";
	textContext.fillRect(Math.round((canvasWidth-pixelWidth)/2)-2.5*pixelWidth,Math.round(canvasHeight/2)-0.85*pixelHeight,6*pixelWidth,1.7*pixelHeight);
	textContext.fillStyle = "indigo";
	textContext.fillText("Level " + (currentLevel+1),Math.round(canvasWidth/2),Math.round(canvasHeight/2));
	var timeout = setTimeout(function() {
		isPlacardDrawing = 0;
		textContext.clearRect(0,0,420,420);
		wakeUpSequence();
	},1500);
}

function checkForPentacle() {
	for (var i = 0; i < pentacleI.length; i++) {
		if (pentacleI[i] === playerI && pentacleJ[i] === playerJ) {
			igniteEmbers();
			return;
		}
	}
}

function igniteEmbers() {
	if (areEmbersIgniting) return;
	if (embersFound === 0) {
		gameOver = 0;
		return;
	}
	playDeathSound();
	areEmbersIgniting = 1;
	dimmerCanvasIsDrawing = 1;
	var embersCharged = Math.round(numberOfEmbers*(210-dimmerRadius)/210);
	embersCharged = (embersFound < embersCharged ? embersFound : embersCharged);
	var largeRadius = dimmerRadius + 210*embersCharged/numberOfEmbers;
	//var numberOfSteps = (210-dimmerRadius)*(embersFound < numberOfEmbers ? embersFound:numberOfEmbers)/numberOfEmbers;
	//embersFound -= (embersFound < numberOfEmbers ? embersFound:numberOfEmbers);
	embersFound -= embersCharged;
	var igniteTimer = setInterval(function() {
		if (isVictoryPlacardUp) return;
		var grad = dimmerContext.createRadialGradient(210,210,0,210,210,dimmerRadius);
		grad.addColorStop(0,"rgba(0,0,0,0)");
		grad.addColorStop(1,"rgba(0,0,0,1)");
		dimmerContext.clearRect(0,0,420,420);
		dimmerContext.fillStyle = grad;
		dimmerContext.fillRect(0,0,420,420);
		dimmerContext.save();
		dimmerContext.translate(210,210);
		dimmerContext.rotate(2*Math.PI*dimmerRadius/largeRadius);
		dimmerContext.translate(-210,-210);
		var imageWidth = 2*dimmerRadius;
		dimmerContext.drawImage(fireWreathImage,0,0,fireWreathImage.width,fireWreathImage.height,210-imageWidth/2,210-imageWidth/2,imageWidth,imageWidth);
		dimmerContext.restore();
		dimmerRadius++;
		if (dimmerRadius >= largeRadius) {
			clearInterval(igniteTimer);
			areEmbersIgniting = 0;
			dimmerCanvasIsDrawing = 0;
			setDimmerInterval();
			drawDimmerCanvas();
			gameOver = 0;
		}
	},10);
}

function wakeUpSequence() {
	isTargetTrackingOn = 0;
	dimmerRadius = 10;
	resetPlayerPosition();
	renderMaze();
	drawScore();
	igniteEmbers();
}

function deathSequence() {
	if (isVictoryPlacardUp) return;
	gameOver = 1;
	numberOfLives--;
	if (numberOfLives > 0) {
		wakeUpSequence();
	} else {
		gameOverSequence();
	}
}

function drawVictoryPlacard() {
	textContext.clearRect(0,0,canvasWidth,canvasHeight);
	textContext.fillStyle = "black";
	textContext.fillRect(0,0,canvasWidth,canvasHeight);
	textContext.fillStyle = "gold";
	textContext.font = "20px Georgia";
	textContext.textAlign = "center";
	textContext.textBaseline = "bottom";
	var rectWidth = 11*pixelWidth;
	var rectHeight = 4*pixelHeight;
	textContext.fillRect(Math.round(canvasWidth/2-rectWidth/2),Math.round(canvasHeight/2-rectHeight/2),rectWidth,rectHeight);
	textContext.fillStyle = "indigo";
	textContext.fillText("SCORE: " + (embersFound + 2*numberOfLives)*100,Math.round(canvasWidth/2),Math.round(canvasHeight/2)+2);
	textContext.textBaseline = "top";
	textContext.font = "10px Georgia";
	textContext.fillText("CLICK TO PLAY AGAIN",Math.round(canvasWidth/2),Math.round(canvasHeight/2)+5);
}

function victorySequence()
{
	if (lastAudioSource) {
		lastAudioSource.loop = false;
		lastAudioSource.stop();
	}
	gameOver = 1;
	isReplayOn = 1;
	isVictoryPlacardUp = 1;
	drawScore();
	drawVictoryPlacard();
}

function animateTransition() {
	if (isTransitionRendering) return;
	isTransitionRendering = 1;
	if (isTransitionAudioLoaded) playTransitionSound();
	gameOver = 1;
	isDimmerCanvasDrawing = 1;
	var counter = 0;
	var numberOfFrames = 20;
	var maxRadius = dimmerRadius;
	var transitionTimer = setInterval(function() {
		playerContext.clearRect(0,0,420,420);
		playerContext.drawImage(playerImages[0],180,180-5*counter);
		var grad = dimmerContext.createRadialGradient(210,210,0,210,210,dimmerRadius);
		grad.addColorStop(0,"rgba(0,0,0,0)");
		grad.addColorStop(1,"rgba(0,0,0,1)");
		dimmerContext.clearRect(0,0,420,420);
		dimmerContext.fillStyle = grad;
		dimmerContext.fillRect(0,0,420,420);
		counter++;
		dimmerRadius = (1-counter/numberOfFrames)*maxRadius;
		if (counter >= numberOfFrames) {
			isTransitionRendering = 0;
			clearInterval(transitionTimer);
			currentLevel++;
			if (currentLevel >= numberOfLevels) {
				victorySequence();
			} else {
				isDimmerCanvasDrawing = 0;
				initializeGrid();
			}
		}
	},playerTimer);
}

function centerCanvas(canvas) {
	canvas.style.left = "0px";
	canvas.style.top = "0px";
	var rect = canvas.getBoundingClientRect();
	var leftPosition = Math.floor((window.innerWidth - canvas.width)/2);
	leftPosition -= rect.left;
	var topPosition = Math.floor((window.innerHeight - canvas.height)/2);
	topPosition -= rect.top;
	canvas.style.left = leftPosition + "px";
	canvas.style.top = topPosition + "px";
}

function centerAllCanvases() {
	centerCanvas(scrollPreventCanvas);
	centerCanvas(imageCanvas);
	centerCanvas(hiddenCanvas);
	centerCanvas(waterCanvas);
	centerCanvas(backgroundCanvas);
	centerCanvas(playerCanvas);
	centerCanvas(shadowCanvas);
	centerCanvas(textCanvas);
	centerCanvas(overCanvas);
	centerCanvas(glyphCanvas);
	centerCanvas(underCanvas);
	centerCanvas(dimmerCanvas);
	centerCanvas(footstepsCanvas);
	centerCanvas(coinsCanvas);
	centerCanvas(scoreCanvas);
	centerCanvas(powerupsCanvas);
}

function rescaleCanvas(canvas,context,scale,offsetX,offsetY) {
	canvas.width = Math.floor(canvasWidth*scale);
	canvas.height = Math.floor(canvasHeight*scale);
	canvas.top = offsetY + "px";
	canvas.left = offsetX + "px";
	context.scale(scale,scale);
}

function rescaleAllCanvases() {
	window.scrollTo(0,0);
	scrollPreventCanvas.style.left = "0px";
	scrollPreventCanvas.style.top = "0px";
	scrollPreventCanvas.width = window.innerWidth;
	scrollPreventCanvas.height = window.innerHeight;
	scoreCanvas.style.left = "0px";
	scoreCanvas.style.top = "0px";
	var rect = scrollPreventCanvas.getBoundingClientRect();
	var widthNeeded = window.innerWidth;
	var heightNeeded = window.innerHeight;
	var scaleX = widthNeeded/520;
	var scaleY = heightNeeded/460;
	var scale = (scaleX < scaleY ? scaleX:scaleY);
	scale = (scale >= 1. ? 1.:scale);
	var offsetY = scale*40;
	var offsetX = 0;
	scoreCanvas.width = Math.floor(420.*scale);
	scoreCanvas.height = Math.floor(460.*scale);
	scoreCanvas.top = "0px";
	scoreCanvas.left = "0px";
	scoreContext.scale(scale,scale);
	rescaleCanvas(imageCanvas,imageContext,scale,offsetY);
	hiddenCanvas.width = 0;
	hiddenCanvas.height = 0;
	rescaleCanvas(waterCanvas,waterContext,scale,offsetX,offsetY);
	rescaleCanvas(backgroundCanvas,backgroundContext,scale,offsetX,offsetY);
	rescaleCanvas(playerCanvas,playerContext,scale,offsetX,offsetY);
	rescaleCanvas(shadowCanvas,shadowContext,scale,offsetX,offsetY);
	rescaleCanvas(textCanvas,textContext,scale,offsetX,offsetY);
	rescaleCanvas(overCanvas,overContext,scale,offsetX,offsetY);
	rescaleCanvas(glyphCanvas,glyphContext,scale,offsetX,offsetY);
	rescaleCanvas(underCanvas,underContext,scale,offsetX,offsetY);
	rescaleCanvas(dimmerCanvas,dimmerContext,scale,offsetX,offsetY);
	rescaleCanvas(footstepsCanvas,footstepsContext,scale,offsetX,offsetY);
	rescaleCanvas(coinsCanvas,coinsContext,scale,offsetX,offsetY);
	rescaleCanvas(powerupsCanvas,powerupsContext,scale,offsetX,offsetY);
	if (isMobile) {
		setTimeout(function() {
			window.scrollTo(0,rect.top);
			centerAllCanvases();
		},500);
	} else {
		window.scrollTo(0,rect.top);
		centerAllCanvases();
	}
	waterContext.fillStyle = "black";
	waterContext.fillRect(0,0,canvasWidth,canvasHeight);
	drawDimmerCanvas();
	drawScore();
	renderMaze();
	if (isPlacardDrawing) {
		textContext.fillStyle = "black";
		textContext.fillRect(0,0,canvasWidth,canvasHeight);
		textContext.fillStyle = "gold";
		textContext.font = "20px Georgia";
		textContext.textAlign = "center";
		textContext.textBaseline = "middle";
		textContext.fillRect(Math.round((canvasWidth-pixelWidth)/2)-2.5*pixelWidth,Math.round(canvasHeight/2)-0.85*pixelHeight,6*pixelWidth,1.7*pixelHeight);
		textContext.fillStyle = "indigo";
		textContext.fillText("Level " + (currentLevel+1),Math.round(canvasWidth/2),Math.round(canvasHeight/2));
		dimmerContext.fillStyle = "black";
		dimmerContext.fillRect(0,0,canvasWidth,canvasHeight);
	}
	if (isReplayOn && !isVictoryPlacardUp) {
		hiddenContext.fillStyle = "black";
		hiddenContext.fillRect(0,0,620,460);
		gameOverSequence();
	}
}

function play()
{
	if (/iPhone|iPad|iPod|Android|webOS|Blackberry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
		isMobile = 1;
	}
	if (/iPhone|iPad|iPod/i.test(navigator.userAgent) || true) {
		isIOS = 1;
	} else {
		loadDrumsAudio();
		loadDeathAudio();
		loadTransitionAudio();
	}
	dimmerContext.fillStyle = "black";
	dimmerContext.fillRect(0,0,canvasWidth,canvasHeight);
	initializeGrid();
	return;
}

export class Brimstone extends React.Component {
    componentDidMount() {
        scrollPreventCanvas = document.getElementById("scrollPreventCanvas");
        imageCanvas = document.getElementById("imgCanvas");
        imageContext = imageCanvas.getContext("2d");
        hiddenCanvas = document.getElementById("hddnCanvas");
        hiddenContext = hiddenCanvas.getContext("2d");
        waterCanvas = document.getElementById("wtrCanvas");
        waterContext = waterCanvas.getContext("2d");
        backgroundCanvas = document.getElementById("bkgrndCanvas");
        backgroundContext = backgroundCanvas.getContext("2d");
        playerCanvas = document.getElementById("plyrCanvas");
        playerContext = playerCanvas.getContext("2d");
        shadowCanvas = document.getElementById("shdwCanvas");
        shadowContext = shadowCanvas.getContext("2d");
        textCanvas = document.getElementById("txtCanvas");
        textContext = textCanvas.getContext("2d");
        overCanvas = document.getElementById("ovrCanvas");
        overContext = overCanvas.getContext("2d");
        glyphCanvas = document.getElementById("hrglCanvas");
        glyphContext = glyphCanvas.getContext("2d");
        underCanvas = document.getElementById("undrCanvas");
        underContext = underCanvas.getContext("2d");
        dimmerCanvas = document.getElementById("dmrCanvas");
        dimmerContext = dimmerCanvas.getContext("2d");
        footstepsCanvas = document.getElementById("ftstpsCanvas");
        footstepsContext = footstepsCanvas.getContext("2d");
        coinsCanvas = document.getElementById("cnsCanvas");
        coinsContext = coinsCanvas.getContext("2d");
        scoreCanvas = document.getElementById("scrCanvas");
        scoreContext = scoreCanvas.getContext("2d");
        powerupsCanvas = document.getElementById("pwrupsCanvas");
		powerupsContext = powerupsCanvas.getContext("2d");
		document.documentElement.style.overflow = "hidden";
		document.body.scroll = "no";

        play();
    }

    render() {
        return (
            <div>
                <canvas id="scrollPreventCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 13, border: "0px solid black"}} />
                <canvas id="imgCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 0, border: "0px solid black"}} />
                <canvas id="hddnCanvas" width="620" height="460" style={{position: "absolute", top: "0", left: "0", zIndex: 1, border: "0px solid black"}} />
                <canvas id="wtrCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 2, border: "0px solid black"}} />
                <canvas id="bkgrndCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 3, border: "0px solid black"}} />
                <canvas id="ftstpsCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 4, border: "0px solid black"}} />
                <canvas id="cnsCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 7, border: "0px solid black"}} />
                <canvas id="pwrupsCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 9, border: "0px solid black"}} />
                <canvas id="undrCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 6, border: "0px solid black"}} />
                <canvas id="plyrCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 8, border: "0px solid black"}} />
                <canvas id="shdwCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 5, border: "0px solid black"}} />
                <canvas id="ovrCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 9, border: "0px solid black"}} />
                <canvas id="hrglCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 11, border: "0px solid black"}} />
                <canvas id="dmrCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 10, border: "0px solid black"}} />
                <canvas id="txtCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 12, border: "0px solid black"}} />
                <canvas id="scrCanvas" width="420" height="460" style={{position: "absolute", top: "0", left: "100", zIndex: 12, border: "0px solid black"}} />
            </div>
        );
    }
}
