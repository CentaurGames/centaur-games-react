import * as React from "react";
import {mazeImageSourceLevel1, mazeImageSourceLevel2, mazeImageSourceLevel3, mazeImageSourceLevel4, mazeImageSourceLevel5, mazeImageSourceLevel6, mazeImageSourceLevel7, mazeImageSourceLevel8, mazeImageSourceLevel9, mazeImageSourceLevel10, mazeImageSourceLevel11, mazeImageSourceLevel12, overImageSourceLevel1, overImageSourceLevel2, overImageSourceLevel3, overImageSourceLevel4, overImageSourceLevel5, overImageSourceLevel6, overImageSourceLevel7, overImageSourceLevel8, overImageSourceLevel9, overImageSourceLevel10, overImageSourceLevel11, overImageSourceLevel12, underImageSourceLevel1, underImageSourceLevel2, underImageSourceLevel3, underImageSourceLevel4, underImageSourceLevel5, underImageSourceLevel6,underImageSourceLevel7, underImageSourceLevel8, underImageSourceLevel9, underImageSourceLevel10, underImageSourceLevel11, underImageSourceLevel12,trapsImageSourceLevel1, trapsImageSourceLevel2, trapsImageSourceLevel3,trapsImageSourceLevel4, trapsImageSourceLevel5, trapsImageSourceLevel6, trapsImageSourceLevel7, trapsImageSourceLevel8, trapsImageSourceLevel9, trapsImageSourceLevel10, trapsImageSourceLevel11, trapsImageSourceLevel12, heiroglyphSourceLevel1, heiroglyphSourceLevel2, heiroglyphSourceLevel3, heiroglyphSourceLevel4, heiroglyphSourceLevel5, heiroglyphSourceLevel6, heiroglyphSourceLevel7, heiroglyphSourceLevel8, heiroglyphSourceLevel9, heiroglyphSourceLevel10, heiroglyphSourceLevel11, heiroglyphSourceLevel12, screenshotImageURL, snakeImageSources0, snakeImageSources1, snakeImageSources2, snakeImageSources3, snakeImageSources4, spiderImageSources0, spiderImageSources1, spiderImageSources2, spiderImageSources3, spiderImageSources4, footstepImageURLs, playerImageURLs, waterImageURL, spikesImageURL, floorTileImageURL, emberImageURL, ankhEdgeImageURL, ankhImageURL, targetImageURL, coinEdgeURL, coinImageURL} from "./EntombedImageSources";
import drumsURL from "./drums.mp3";
import deathURL from "./death.mp3";
import transitionURL from "./transition.mp3";
import { startGlobalLoadingIndicator, stopGlobalLoadingIndicator } from "../../Components/GlobalLoadingIndicator";

var scrollPreventCanvas, imageCanvas, hiddenCanvas, waterCanvas, backgroundCanvas, trapsCanvas, playerCanvas, monsterCanvas, shadowCanvas, textCanvas, overCanvas, glyphCanvas, underCanvas, dimmerCanvas, footstepsCanvas, coinsCanvas, scoreCanvas, powerupsCanvas;

var imageContext, hiddenContext, waterContext, backgroundContext, trapsContext, playerContext, monsterContext, shadowContext, textContext, overContext, glyphContext, underContext, dimmerContext, footstepsContext, coinsContext, scoreContext, powerupsContext;

var canvasWidth = 420;
var canvasHeight = 420;

var audioContext, audioVolume, drumsBuffer, lastAudioSource, audioContext2, audioVolume2, deathBuffer, transitionBuffer, lastAudioSource2;

var gridLevel1 = [[0,-2,0,0,0,-1,0,-2,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-2,0,0,0,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0],[0,-1,-1,0,0,0,-1,0,0,0,-2,0,0,0,-1,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-2,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-2,-1,0,0,-1,0,0,0,0,0,0],[0,0,0,-2,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-2,-1,0,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,-2,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0],[0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0],[0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-2,0,-1,-2,0,0,0,0,0,0,-1,-1],[0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,-1,0,0,0,0,0,-2,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0],[0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-2,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],[0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],[0,-1,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,-2,-2,0,0,0,0,0,0,0,0,0,-1],[0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0],[0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0],[0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-2,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-2,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0],[0,-2,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,-1,0,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,-1,0,0],[0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,-2,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-2,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0],[0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-2,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1],[0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,-1]];
var gridLevel2 = [[0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,-1,0,0,-1,0,0],[0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-2,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,-1,0,0,0,-1,0,0],[0,0,0,0,0,-2,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-2,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,-1,0,0,0,-2,-1],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0],[0,-1,0,-1,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,-2,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,-2,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,-1,0],[0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2],[0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-2],[0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0],[0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,-1,-2,-1,-1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-2,0,0,0,0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,0],[0,0,-1,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-2,-2,0,0,0,0,0,0,-1,0,-2,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-2,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-2,0,0,-2,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,-2,-2,-1,-2,-1,0,-1,0,0,0,-2,0,0,0,0,-1,0,0,-1,0,-2,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,-2,-1,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0],[0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0]];
var gridLevel3 = [[0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-2,0,-1,0,0,0,0,0,0,0,0,0,0],[0,-1,-1,0,-2,0,0,-2,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0],[0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1],[0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0],[0,0,0,0,0,0,0,0,-1,0,0,0,0,-2,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1],[0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,-1,0],[0,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0],[0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0],[0,-1,0,0,-2,0,0,-1,0,0,-2,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,-1,0,0,0,0],[0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-2,0],[0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,-2,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,-2,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,-1,0,-1,-1,0,0,0,0,-1,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,-1,-2,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,-1,0],[0,0,0,-1,0,0,-1,0,-2,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0],[0,-1,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-2,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-2,0,0,-2,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0],[0,-1,0,-1,0,0,0,-2,-1,0,0,0,0,-1,0,0,-1,0,-1,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0],[0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,-1,0,0,0,0],[0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,-1,-1,-1,0,0,-1,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,-1,-1,-1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0],[0,0,0,0,0,0,-2,0,0,-1,0,-1,0,0,0,0,-1,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-2],[0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,-1,-2,0,-1,-1,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-1,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,-1,0,0],[0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,0],[0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-2,-1,0,0,0,-1,-1,0,0,0,0,-2,0,-1,-2,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1],[0,-1,0,-1,-1,0,0,0,-2,0,0,0,0,0,0,0,0,0,-2,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0]];
var gridLevel4 = [[0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,-1,0,-1,0,-1,0,0,0,-2,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,0,-1,0,-1,-2,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,-2,0,0,0],[0,-1,0,0,0,0,0,0,0,0,-2,-1,0,0,0,0,-2,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-2,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-2,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-1,0,-2,0,-1,-1,0],[0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,-1,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0],[0,0,-1,-1,0,0,0,-1,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,-1,-2,0,-1,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,-2,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],[0,-1,0,-1,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-2,0,0,0,0,-1],[0,0,0,0,0,0,-2,0,0,-1,-1,-1,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,-1],[0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0],[0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0],[0,0,-2,-1,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,-1,0,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,-2,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1],[0,0,0,0,0,0,-1,0,0,-2,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,-2],[0,0,0,0,0,0,0,0,0,-1,-2,0,-1,0,0,-1,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,-1,0,-1,-2,0,0,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1],[0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,-1,0,-2,0,-1,0,-1,0,0,-2],[0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0],[0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,-1,0,0,0],[0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-2,0,0,0],[0,0,0,-1,-1,0,0,0,-1,-1,0,-2,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,-2,0,0,-2,0,0,0,0,-2,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-2,0,0,0,0,0,-2,0,-1,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,-1,0,0,0,0],[0,-2,-1,-1,0,0,0,-1,0,-2,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-2,0,0,-1,0,0],[0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-2,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-2,0,-1,0,0,-1,0],[0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,-1,0,-1,-1,0,-1,-1,0,0,0,0,0,0,0,0,-2,0,0,0,0,-1,0,0]];
var gridLevel5 = [[0,-1,0,0,-1,0,0,0,-1,-1,-1,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],[0,-1,0,-2,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-2,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1,0,-1,0,-1,0,0,-1,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0],[0,0,-1,0,0,-1,0,-1,-2,0,0,0,0,0,0,0,-1,0,-2,0,0,-2,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0],[0,0,0,-1,0,0,-1,-1,0,-1,-1,0,0,0,-1,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,-2,0,0,0,0,-2,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,-1,-2,-1,0,0,0,-1,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,-2,-1,-1,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,-1],[0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-2,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0],[0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,-1],[0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,-1],[0,-1,0,-1,0,0,0,-1,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0],[0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,0],[0,0,0,0,0,0,0,-2,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,-1,-2,-1,0,0,0,0,0,-1,0,-2],[0,0,0,0,-1,0,-1,-1,-2,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,-1,0,-1,0,0,0,-1,0,0,0,0],[0,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,-1,-1,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,-1,-1,0,-1,0,0,0,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-2,0,0,0,0,0,-1,0,0,0,0,0,-1],[0,-1,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-2,0,0,0,-1,0,0,0,0,0,0,0,0,-2,0,0,0],[0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0],[0,0,0,0,0,-2,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,-1],[0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0],[0,-1,0,0,0,0,0,0,0,-1,0,-2,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,-2,0,0,0,0,0,0,0,0,-1],[0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0],[0,-1,0,-1,0,0,-1,0,0,0,0,0,-1,-1,-1,-1,-2,0,0,0,0,-2,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,-2,0,0,0,0,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0],[0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,-2,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0],[0,0,0,0,-1,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-2,0,-1,0,0,0],[0,0,-1,0,0,-1,0,-1,0,-1,0,-1,-1,0,0,0,-1,0,-1,-1,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,-2,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1],[0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-2,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,-2,-1,-2,0,0],[0,0,0,-1,0,0,-1,0,0,0,0,-2,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-2,0,-1,-1,0,-1,0]];
var gridLevel6 = [[0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-2,0,0,-1,0,-1,0,0,0,0,0,0,-2,0,0,0,-1,-1,0,0,-1,0],[0,0,0,0,-1,-1,0,-1,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-2,0,-2,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,-2,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,-1,0,-1,0,0,-1],[0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,0,-1,0,0,0],[0,0,-1,-2,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0],[0,-1,0,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0],[0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,-1,-2,0,0,-1,0,0,-1,-1,-1,0,0,-1,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,-1,0,0,0,0],[0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,-1,-1,0,0,0,-2,-1,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0],[0,0,0,0,-2,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,-1,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0],[0,-1,-1,0,0,-2,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1],[0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,-2,0,0,-2,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1],[0,0,-1,0,-2,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,-1,0,-1,0,0,-2,-2,0,0,0,0,-1,0,0,-1,0,0],[0,0,-1,0,-1,0,0,-1,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-2,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-2,-1,0,-1,-1,-1,-1,-1,0,0,0,0],[0,-1,0,-1,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-2,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0],[0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0],[0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,-1,0,0,0,0,-2,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-1],[0,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,0,-1,0,0,0,0,-2,-1,-2,0,0,0,0,-1,0,0,0,-1,0,0,-1,-1,0,-1,0,0],[0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,-2,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,-1],[0,0,0,0,0,0,0,0,-1,0,-1,-1,-2,0,-1,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-1,0,-2,-1,0,0,0,0,-1,-1,0,0,0,-1,0,0,-2,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-2,-1,0,0,0,0,0,0,0,0,0],[0,-1,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,-2,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0],[0,-1,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,0],[0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,-2,-1,0,0,-1,0,0],[0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1],[0,-2,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,-2,0,0,-1,0,0,-1,-1,-1,0,-1,0,0,-1,0],[0,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,-1,0,0,-1,-2,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,-1,-1,0,-1,0,-2,-1,0,0,-2,0,-2,-1,0,0,0,0,-1,-1,-1,0,0,0,0,0],[0,0,-1,-1,0,-1,-1,-1,0,-1,0,0,0,0,0,-1,-1,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,0,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,-1,-1,0,0,-1,-1,0,0,0],[0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,-2,-1,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,-1,0],[0,0,0,0,-1,-1,0,0,0,0,0,-1,-1,-1,0,-1,0,-1,-1,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0]];
var gridLevel7 = [[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,-2,0,0,0,0,0,0,0,-1,-1,0,-1,-1,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-2,0,-1,0,-1,-1,0,0,0,0,0,-1,-1,-1,0,-1],[0,0,0,-1,-1,-1,0,-1,-1,0,0,0,-1,0,-1,0,0,-2,-1,-2,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,-1,-1,0,0],[0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,-1,0,0,0,-1,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0],[0,-1,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,-2,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,-1,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,-1,0,0,-1,-1,0,-1,-1,0,-1,0],[0,0,-2,0,0,-1,0,-1,0,0,0,-1,0,0,-1,0,-2,0,0,0,-1,-1,-1,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0],[0,-1,0,-1,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,-1,0,0,0,-2,0,-1,0,0,-1,0,-1,-1,0,0],[0,-1,0,0,0,0,-2,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,-1,0],[0,0,0,-1,0,0,0,-1,0,0,-1,0,0,-2,0,0,-1,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1],[0,0,0,0,-2,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,-1,0,-2,0,-1,0,0,0,0,0,0],[0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-2],[0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-2,0,0,-1,0,0,0,-1,0,-2,0,0,0,-1,0,-1,0,0,0,-2,0,0,-2,-1,-2,0,-1,0,0,0,-1],[0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-2,0,-1,-1,-1,0,0,0,-1,0,0,-1,0,0,-2,0,0,-2,0,0,0,0,-1,0,-2,0,0],[0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,-1,-1,0,0,-1,-1,0,0,0,0,-1,0,-1,0,0,-2,0,0,0,0,0,0,0,-1,0,0,-1,0],[0,-1,0,0,0,0,-1,0,0,-1,0,0,-1,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,-1,0,0,-1,-1,0,-1,0,0,-1,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,-2,-1,0,-1,0,0,0,0,-1,0,-1,0,0],[0,0,0,0,0,-1,0,0,0,-2,0,-1,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,-1,-1,0,0,0,0],[0,0,0,-1,0,0,-1,0,-1,-1,-1,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1],[0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-2,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,-2,-1,0],[0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,-2,-1,-1,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,-1,-1,0,-1,0,0,0],[0,0,0,0,0,-2,0,0,-2,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0],[0,0,-2,-1,0,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,-1,-2,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,0,-2,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],[0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-2,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,-1,0,0,0,-1,0,0,-1,0,-1,0,0,0,-1],[0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,-2,0,0,0,-1,-1,-1,-1,0,-1,0,0],[0,0,0,0,0,0,0,0,-2,-1,-1,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,-1,-2,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,-1],[0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,-2,0,0,-1,0,-1,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,-1],[0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,-1,-2,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1],[0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0],[0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0],[0,0,0,0,0,0,-2,0,-1,0,0,-1,0,0,-2,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,0,-1,0,0,0],[0,-1,0,-1,0,0,0,0,0,-2,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-2,0,0,0,0,0,-2,-1,0,0,0,-1,0,0,0,0,0,0,0],[0,0,-1,0,0,0,-1,0,-2,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,-1,-1,0,-1,-1,0,0,0,0,0,0,0,0,-1,-1],[0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-2,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,-1,0,0],[0,0,-1,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,-1,-1,-1,-1,0,0,0,0,-1,0,0,0,-1]];
var gridLevel8 = [[0,-1,0,0,0,-1,0,-1,0,0,-1,0,0,-1,0,-1,-1,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,-2,-1,-1,0,-1,0,-1,-1,0,-1,0,0],[0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],[0,-1,0,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0],[0,0,0,-1,-2,-1,0,-1,-1,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,-1,-1,0,0,0,0,-1,0,0,0,-1,0,0,-1,-1,-2,0,-1],[0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0],[0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,-1,-1,0,0,-1,0,0,-1,-1,0],[0,0,0,0,0,0,0,-2,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-2,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,-1,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0],[0,0,-1,0,-2,-1,-1,0,0,-1,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1],[0,0,0,0,0,0,-1,0,0,-1,0,-1,0,-2,0,0,0,0,0,-1,0,0,0,-1,-1,-1,0,0,0,0,0,-1,0,0,0,-1,-1,0,-1,-1,0,0],[0,0,-1,0,0,0,0,-1,0,-1,0,-1,0,0,0,-1,-1,-1,0,0,0,0,-2,0,-1,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,-1,0,-1,0],[0,0,0,0,-1,-1,0,0,0,-1,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,-2,0,0,0,0],[0,0,0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,-1,-1,0,0,-2,0,-1,0,0,0,0,0,0,0,-1,0,-1],[0,0,0,0,0,-1,0,0,-1,0,-1,0,-1,-1,0,0,0,0,0,0,0,-1,0,-1,-1,0,-1,-1,0,0,-1,0,0,0,0,-1,-1,0,-1,0,0,-1],[0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,-1,0,-1,-1,0,0,0,0,-2,0,-1,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0],[0,0,0,0,0,-1,-1,-1,0,0,-1,0,0,0,-2,-1,0,-1,-1,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,-1,-2,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,-1,0],[0,-1,-1,0,-1,0,0,0,0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,-2,0,-1,-1,0,-1,0],[0,-1,0,0,-1,0,0,0,0,0,-1,-1,0,0,-1,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,-1,0,-1,0,0,0,0,0,0,-1,-1,-1,-1,-1,-2,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,-2,0,-1,0,0,0,-1,0,-1,-1,0,0],[0,-1,0,0,-1,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,-2,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,-2,0,0,-1,0,0,-1,0,-2,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0],[0,0,0,-1,0,-1,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-1,0,0,0,0,-1,0],[0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-2,0,-1,-1,-1,0,0,-1,0,0,0,0],[0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,-2,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-2,0,0],[0,0,0,0,0,-2,0,0,0,0,0,0,-2,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0],[0,0,-1,-1,0,0,0,0,-1,0,-1,0,-1,0,0,0,-1,-2,-1,0,0,0,0,-1,0,-2,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0],[0,0,0,0,-2,0,0,-1,0,0,0,-1,0,-2,-1,0,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,0,0,-1,-1,0,0,-2,-1,-1,0,-1,0,0,-1,0],[0,0,0,-1,0,0,0,0,-2,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-2,0,0,0,0,-1,0,0,-1,-1,0,0,-1,0,-1,0,-1,0,0],[0,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,-1,0,0,0],[0,0,0,-1,-1,0,-1,0,0,-1,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,-2,0,-1,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,-2,0,-1,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,-1,0,0,0,0,0,0],[0,-1,0,0,0,0,0,-1,0,0,-1,-1,-1,0,0,-2,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,-2,0,0],[0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,-2,0,-2,0,-1,0,0,0,-2,0,0,0,0,-1,-1,0,0,0],[0,0,-1,-1,0,0,-1,-1,-1,-1,-1,0,-1,0,0,0,0,-1,0,-2,0,0,0,0,-1,0,-2,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,-1,-2,0,-1,0,-1,0,0,0,0,0,-1,-1,-2,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,-1,-2],[0,-2,0,0,-1,0,0,-1,0,-1,-1,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-2,-1,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,-1,-1,0,0,0,0,0,0,-1,0,0],[0,-1,0,0,0,-1,0,0,-2,-1,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],[0,-1,0,0,0,-1,0,-1,-1,0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1],[0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,-1,-1,-1,0,-1,-1,-1,0,0,0,-1,-1]];
var gridLevel9 = [[0,0,0,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,-1,0,-1,-1,-1],[0,0,0,0,0,0,-1,-1,0,0,-1,-1,-1,0,-1,0,-1,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0],[0,0,-1,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,-1,0,0,-1,0,-1,0,0,-1,0,0,0,-1],[0,-1,-1,0,0,-1,0,0,0,-1,-1,0,0,-1,0,0,-1,0,0,-1,-2,0,-1,-1,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,-1],[0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,-2,0,-1,0,0,-1,0,0,-1,-1,0,-1,0,0,-1,0,0,-1,0,-1,0],[0,0,0,0,0,0,-1,0,-1,-1,0,0,0,-1,-1,-1,-1,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,-1,0],[0,0,-1,0,0,-1,0,0,0,0,-1,0,-1,0,-1,-1,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,-1,0,-1,0,0,0,-1,-1,-1,-1,0,0,-1],[0,-1,0,0,0,-1,0,0,-2,0,0,-1,0,0,-1,0,0,-2,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,-1,-1,-1,0,0,0],[0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,0,-1,0,-1,-2,-1,-1,-1,0,-1,0],[0,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,-2,-2,0,0,0,-1,0,-1,0,0],[0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,-1,-1,-1,-1,0,0,0,-1,0],[0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,-1,-1,0,-1,0,-1,0,-1,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0],[0,-1,0,0,0,-1,-1,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,-1,-1,0,-1,0,0,-1,-1,0,0,0,-1],[0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,-1,-2,0,0,0,-1,0,0,0,-1,-1,-1,0,0,0,0,-1,0,0,0,0],[0,-1,0,0,0,0,-1,-1,0,-2,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0],[0,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,-1,-1,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,-1,0,0],[0,0,0,-1,0,0,0,-1,0,0,-1,-1,0,-1,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-2,0,0,0,0,-1],[0,0,0,0,-1,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,-1,-1,0,0,0,0,0,-1,0,-1,0,-1,0,-1,0,-1,0,0,0,0],[0,0,0,0,0,0,-1,0,-1,0,-1,0,-1,0,0,0,0,0,-1,0,-2,0,-1,0,-2,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-2,-1,-1,0,0,0,0,0,-1,-1,0,0,0,0,-1,-1,-1,0,0,0,0,0,-1,-2,-1],[0,-1,0,0,-1,0,0,-1,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-2,0,-2,0,0,0,0,-2,0,0,0,0,0,0,0],[0,-1,-1,0,-1,-2,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,-1,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,-1,-1],[0,-1,0,-1,-1,0,-1,0,0,0,-1,0,0,-1,-1,-1,0,0,0,-1,0,0,-1,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,-1,-1,-1,-1,0,-2],[0,-1,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,-1,0,0,-1,-1,0,0,0,0,0,-1,0,0,-1,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0],[0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,-2,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-2,0,0,-1,-1,0,0,0,0,-1,0,0,-1,0,0,0,0],[0,0,0,-2,0,0,0,0,-1,0,-1,0,-2,0,0,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,0,-1,0,-1,0],[0,0,-1,0,-1,0,0,-1,0,-1,-1,0,0,0,0,-1,0,-1,-1,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,-1,-1,-1,0],[0,-1,0,0,0,0,-2,0,0,0,0,-1,-1,0,0,-1,-1,0,0,-1,-1,0,0,0,-1,0,-1,0,-1,0,0,0,0,-1,0,-2,0,0,0,0,0,0],[0,0,-1,0,0,-1,-2,0,0,0,0,0,0,0,0,0,0,-2,0,0,-2,0,0,0,0,-1,-1,-1,-1,0,0,0,0,-1,0,0,0,0,-1,0,-1,0],[0,0,-1,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,-1,-1,0,-1,-1],[0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,-1,-2,0,-1,-1],[0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,-1,-2,0,0,-1,0,-1,-1,0,0,0,-1,-1,0,0,-2,0,-2],[0,0,-1,0,0,0,0,0,0,0,-2,-1,-2,0,0,-1,0,0,0,0,-1,-1,-1,-1,0,-2,0,0,-1,0,-1,-1,-1,-1,-1,0,0,0,-2,-1,0,0],[0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,-1,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],[0,-1,-1,0,0,0,0,0,0,0,0,0,-1,-2,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1],[0,0,0,0,-1,0,0,-1,-1,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-2,0,-1,0,-2],[0,0,0,0,0,0,0,0,-1,0,0,0,0,-2,0,0,-1,-1,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,-1,0,0,-1,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-2,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,-1,0,0,-2,-1,-1,-1,-1,-1,-1,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0]];
var gridLevel10 = [[0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,-1,0,-1,0,0,0,-2,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,-1],[0,0,0,0,0,0,0,0,-1,-1,0,-1,-1,-1,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,-1,-1,0,0,0,-1,0,-2,0],[0,-1,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,-1,-1,0,0,-1],[0,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,-1,0,-1,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0],[0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,-2,-1,-1,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1],[0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,-1,-1,-1,0,-1,-1,0,-2,0,0,0,0,0,-1,-1,0,0,0,0,0,0,-2,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,-1],[0,0,-1,0,-2,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,-2,-1,0,-1,-1,-1,-1,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1],[0,0,-1,-1,0,0,-1,0,0,0,-2,0,0,0,-1,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,-1],[0,0,0,0,0,-1,0,0,0,0,-1,-1,0,-1,-1,-1,0,-1,-1,0,-1,-1,-1,0,-1,0,0,-1,-1,-1,0,-1,-1,0,0,0,-1,-1,0,0,0,0],[0,0,0,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,-1,-1,-1,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,-2,-1],[0,-1,-1,-2,0,-2,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-2,0,0,-1,-2,-1,-1,0,0,0,0,-1,-1,-1,-1,0,0,0,-2],[0,0,-1,-1,-1,0,-1,-1,0,-1,0,0,-1,0,-1,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,-1,-1,0,-1,-1,0,-1,0,-1,-1,-1],[0,0,0,-1,0,-1,0,-1,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,-2,-1,-1,0,0,-1,-1,-1,0,0,0,0,0,-1,0],[0,-1,0,0,0,0,0,-1,0,0,0,0,0,-2,0,0,0,0,-1,0,0,-1,0,0,0,0,-2,0,-1,-1,-1,0,0,-2,0,0,0,0,-1,0,0,0],[0,0,-1,0,0,0,-2,0,-1,-1,-1,0,0,0,0,-1,0,0,0,-2,0,0,0,0,0,0,-1,-2,0,-1,-1,0,-1,0,0,0,0,0,0,-1,0,0],[0,-1,0,-1,0,0,0,-1,-1,-1,-1,0,0,-1,0,0,0,0,-1,-1,-1,0,0,-2,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,-1,-1],[0,0,0,-1,0,0,0,0,-1,-1,-1,0,0,-1,0,-1,0,0,0,0,-1,-1,0,0,0,-1,0,-1,0,-2,-1,-1,0,-1,0,-2,0,0,-1,0,0,0],[0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,0,0,0,0,-1,-2,-2,0,0,0,0,-2,0,0,-1,-1,-1,-1,0,0,0,0,-1,0,0,0,0,0,-1],[0,0,0,-1,0,0,0,-1,-1,-1,-2,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,-2,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,0,0,0],[0,0,0,0,0,-1,0,-1,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,-1,-1,-1,0,-1,0,0,-2,-2,-1,-1,0,-1],[0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,-1,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,-1,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,-1,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,-2,0],[0,-2,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,-1,0,-2,-1,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,-1],[0,0,0,0,-1,0,0,-1,-1,0,0,0,-1,0,0,0,-1,0,0,0,-2,0,-2,-1,-1,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,-1,-1],[0,0,-1,-1,-1,0,-1,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,-1,-1,0,0,0,-1],[0,-1,0,0,0,0,0,0,0,0,-1,-1,0,-1,-1,0,-1,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,-1,-1,0,0,-1,-1,0,0,0,0,0],[0,-2,0,0,-1,0,0,-1,0,0,0,0,-1,-1,0,0,0,-1,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0],[0,-2,0,-1,-1,-1,0,0,0,-1,0,-1,0,0,0,0,0,-2,-1,0,0,0,-2,0,0,0,0,0,-1,-1,-1,0,-1,0,-1,0,-1,-1,0,0,0,0],[0,0,0,0,0,0,-1,0,0,-2,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-2,-1,0,0,0,-2,0],[0,0,0,-2,-1,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,-2,-1,-1,0,0,0,-1,-1,0,0,-1,0,0,-1,-1,-1,-1,0,-1],[0,-1,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,-1,-1,-1,0,0,0,-1,0,0,0,-1,-1,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,-1,-1],[0,-1,0,0,-1,-1,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0],[0,-1,0,-1,-1,-1,-1,0,0,0,0,0,-2,0,0,-1,0,-2,0,0,0,0,-2,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,-1,-2,0,0,0,0,0,0,0,-2,-1,0,-1,0,0,0,-1,-1,0,0,-1,-1,-1,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-2,0,0,-1,-1,-1,-1,0,0,0,0,0,-1,0,-1,-1,-1,0,0],[0,0,0,-1,-2,0,0,-1,0,-1,0,0,0,-1,0,-1,-1,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0],[0,0,-1,0,-1,-1,0,-2,0,0,0,0,0,-1,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,-1,0,0,-1,0,0,0,0,-2],[0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,-1,0,-1,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,-1,-1,-1,0,-1],[0,-1,0,-1,0,0,-1,-1,0,-1,-1,0,0,0,-1,0,-1,0,-1,-1,-1,-1,0,0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,-1],[0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1]];
var gridLevel11 = [[0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-2,-1,0,0,0,0,0,-1,-1,-1,0,0,-2,0,0,0,0,0,0,-1,0,0,0,-1],[0,-1,-1,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,0,-1,0,0,-1,-2,-1,0,0,0,0,-1,0,-2,0,-1,-1,0,0,0],[0,-2,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,-1,-1,0,0,-1,-1,-1,0,-1,-2,-1,0,-2,0,0,0,0,0,-2,-1,0,0,0,0,0,0,0],[0,-1,-1,-1,0,0,-1,-1,0,0,0,0,-1,-1,0,-1,-1,0,-1,-1,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-2,0,-1],[0,-1,-1,-1,0,-1,-1,-2,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,-1,0,-2,-1,-1,-1,0,-1],[0,0,-1,-1,-1,0,-1,0,0,-1,0,0,-1,-1,-1,-1,0,-1,-1,0,0,0,-1,-1,-1,0,0,-1,0,-1,-1,0,-1,0,-1,0,0,0,0,0,-1,0],[0,0,-1,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,-1,0,0,-2,0,0,0,0],[0,-1,-1,0,0,-1,0,0,-1,-1,0,-1,-1,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,-1,0,-1,0,0,-1],[0,0,0,-1,0,-1,0,0,0,-1,0,-1,-1,-1,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,-2,-1,-1,0,-1,-1,0,0,0,0,-1],[0,0,-1,-1,0,0,-1,-1,-2,-1,-1,-1,0,0,0,0,-2,0,0,-1,0,-1,0,0,0,-1,0,-2,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,-1],[0,-1,-1,-1,0,-1,0,0,0,0,-1,0,0,0,-1,0,-1,-1,-1,0,0,-1,0,-1,0,0,0,0,-1,0,0,0,0,-1,-1,0,-1,0,0,-2,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,-1,-1,0,-1,0,0,-1,0,0,0,0,-1,-2,-2,-1,0,-2,-1,0,-1,-1,0,-1,-1,-1,0],[0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,-1,0,0,-2,0,-1,0,0,0,0,-2,-1,0,0,0,0,0,0,-2,-1,0,0,0,0,0,-1],[0,0,-1,-1,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,-1,-1,-1,0,0,0,0],[0,0,0,-1,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,-1,0,0,0,-1,0,0,0,-1,0,-1,0,0,-1,-1,0,0,-1,-1,0,-1,0,0],[0,0,0,-1,-1,0,0,0,0,-1,0,0,-1,-1,-1,0,0,0,0,-1,0,0,-1,0,0,-2,-1,0,0,0,-2,0,0,0,0,0,-1,0,0,0,0,-1],[0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,-1,-1,0,-1,-1,0,0,-1,0,0,-1],[0,0,-1,0,-1,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,-2,0,0,-1,-2,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,-1,-1,-1,0],[0,0,0,-1,-1,0,0,-1,-1,0,0,0,-1,-1,-1,-1,0,-1,-1,-1,0,0,0,0,0,-2,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,-1,-2,0,-1,0,0,-1,-1,0,-1,0,0,-1,0,0,0,0,-1,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,-1,0,0,-1,0,-1,0,0,-1,-1,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,-1,0,-1,-1,0,0,-1,-1,0,0,0,-1,-1,0,0,-1,-1,-1,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0],[0,0,0,0,0,-2,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,-2,-1,-2,-2,-1,0,-1,-1,0,0,-1,-1,0,0,0,0,-1,0],[0,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],[0,-1,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,-2,-1,-2,0,0,-1,0,0,-1,0,0,-1,0,-1,0,-1,-1,-1,-1,-1,0,-1,-1,0,-1],[0,-1,0,-1,0,-2,0,-1,-1,0,-1,0,-2,-1,0,0,-1,-1,-1,-1,0,-1,-1,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,-1,-2,0],[0,0,0,-1,-1,0,0,0,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,-1,-1,0,0,0,0],[0,-1,0,-1,0,0,0,0,-1,0,0,-1,0,-1,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,-2,0,0,0,0,-1,0,-1,-1,-1,0,-1,0],[0,0,0,-1,0,0,0,-1,-1,-1,0,-1,0,-1,-1,0,0,0,-2,0,-1,0,0,-1,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,0],[0,-1,0,-1,0,-1,0,-1,0,0,-1,-1,0,-1,-1,-2,0,-2,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,-1,0],[0,0,0,-1,0,-1,0,0,-1,0,-1,0,0,-1,0,0,0,-2,-1,-1,0,0,-1,0,0,0,0,-1,-1,0,0,-1,0,-1,0,0,0,-2,0,0,0,0],[0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,-2,0,-1,-1,0,-1,0,-1,-1,0,-1,-1,0,0,0,0,0,0,0,-1,0,-1],[0,-1,-1,-2,0,0,0,0,0,0,0,-1,0,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,-1,0,-1,0,-1,-1,0,-1,-1,0,0,0,0,0,0,0,-1,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,-1,-1,0,-2,0,0,-1,-1,0,-2,0,-1,0,-1,0,-1,0,0,-1,-1,-1,0],[0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,0,-2,0,0,0,-1,-1,-1,0,0,0,0,0,0,-1,-1,-1,-1,-1],[0,-1,0,-1,-2,-1,0,-2,0,-1,0,0,0,0,0,-1,0,0,-1,-1,-1,-1,0,0,0,-1,0,0,-1,-1,-1,-1,-2,0,0,0,0,0,-1,-1,-1,-1],[0,0,-1,-2,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,0,0,0,-1,0],[0,0,-1,0,-1,-1,0,0,0,-1,-1,0,0,0,0,-1,0,-1,-1,0,0,-1,-2,0,0,0,0,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,0,0,0,0],[0,0,0,0,0,0,0,-2,-1,-1,0,0,0,0,0,-1,0,0,-2,-1,0,0,0,-1,0,0,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1],[0,0,-1,0,0,0,-1,0,-1,-1,-1,-2,0,0,0,0,-1,-1,0,-1,0,0,-1,0,0,0,0,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1],[0,0,0,0,-1,0,0,-1,-1,-1,-1,-1,0,-1,0,-1,0,0,0,0,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1]];
var gridLevel12 = [[0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,0,0,0,-1,0,0,-1,0,0],[0,-1,0,0,-1,0,0,-1,0,-1,0,0,0,0,0,-1,-1,0,-1,-1,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0],[0,-1,-1,0,0,0,0,0,0,-2,0,0,-1,-1,0,-1,-1,-1,-1,-1,0,-1,0,-1,-1,-1,0,0,-2,0,0,-1,0,0,-1,0,0,-1,0,-2,-1,0],[0,-1,-1,-1,0,-1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,-1,-2,0,0,-1,-1,-1,0,0,0,-1,0,0,0],[0,-1,-1,-1,0,-1,0,0,-1,-1,-1,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,-1,-1,0,0,-1,-1,-1,0,0,0,0,-1,0,-1,0,0,0,-1],[0,-1,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,-1,-2,0,0,0,-1,-1,-1,0,-2,0,0,-1,0,0,0,0,0,0,-1,-1,-2,-1,-1],[0,-1,-1,-1,0,0,-2,0,-1,-1,0,-1,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,-1,0,0,0,-1,-2,0,0,-1,0,-1,0,0,0,-1,-1,-1],[0,-1,-1,0,0,-1,-1,0,0,0,0,-1,-1,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,-1,0,0,-2,-1,-1,0,0,0,0,0,0,0,-2,0],[0,-1,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,-1,-1,-1,0,-2],[0,-2,0,0,-1,0,0,0,-1,-1,0,-1,-1,0,-1,0,0,0,-1,-1,-1,-1,0,-1,0,-2,0,0,0,-2,0,0,-1,0,0,0,0,-2,-1,0,-1,0],[0,-1,0,-1,0,-1,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,-1,-2,0,0,-1,0,0,0,-1,0,0,-1,-1,0,-1,0,0,-1,-1,-1,0,0,-1],[0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,-1,-1,0,-1,0,0,-1,0,-1,-2,0,-1,-1,-1,0,0,-2,0,-1,0,0,0,0,0,0,-1],[0,0,-1,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,-1,-1,-1,-1,0,0,-1,-1,0,-1,-1,-1,0,0,0,0,-1,0,0,-1,0,0,-1,-1],[0,0,-1,0,0,-1,-1,-1,0,-1,0,-1,0,-1,0,0,0,0,0,-1,-2,-2,0,0,-1,0,-2,-1,0,-1,-1,0,-1,-2,0,-1,-1,-1,0,0,0,-1],[0,0,-1,0,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,0,0,-1,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,-1,-1,0,0,0,-1,0,-2,-1,-1,-1,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,-2,0,-1,-2],[0,0,-1,-1,0,0,-1,0,-1,-2,-1,-1,-2,0,0,0,0,0,0,0,-1,-1,0,0,-1,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1],[0,0,-1,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,-1,0,0,0,0,-1,0,-1,0,0,-1,0,0,-2,0,-1],[0,0,0,-1,0,-1,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,-2,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,0,0,-1,0,0,-1,0,-1,0,-1],[0,0,-2,0,0,-1,0,0,0,-2,-1,-1,-1,-1,0,0,-2,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0],[0,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,-1,0,-2,0,-1,0,-1,0,-1,-1,0,-1,-1,-1,-1,0,0,0,0,-1,0,0,0,0],[0,-1,0,0,0,-1,-1,-1,0,0,0,0,0,-1,-1,-1,0,-1,0,-1,0,0,0,-1,0,0,-1,-1,0,-1,-1,-1,0,-1,0,0,-1,0,0,-1,0,-1],[0,-1,0,0,-1,0,0,0,0,0,-1,0,-1,-1,-1,-1,-2,0,0,0,0,0,0,0,0,0,0,0,0,-2,-1,0,0,0,0,-1,-1,-1,0,0,-1,0],[0,-1,0,0,0,0,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,-1,0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0,0,-1,-1,0],[0,-2,0,0,0,-1,-1,-1,0,0,-1,0,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,0,-1,-2,0,0,0,0,-1,0,0,-1,0,-1,0,0,-1,0],[0,-1,-1,-1,0,0,-1,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,-1,0,-1,0,0,-1,0,-1,0,0,0,0,-1,-1,-1,-1,0,-1,0,-1,-1,0,0,-1,-1,-1,-1,0,0,-1,0,0,0,-1,-1,-1,0,0,0,-1],[0,0,-1,0,-1,0,-1,0,0,0,-2,0,-2,0,0,-1,-1,-1,0,0,0,0,-1,-1,0,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,0,0,-1,-1],[0,0,-1,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,-2,0,0,-1,0,-2,-1,0,0,0,-1,-2,0,0,0,0,-1,0,0,-1],[0,0,0,0,0,-2,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,-1,-1,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,-1,0,0,-2,-1,0,0,-2,0,0,0,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,-1],[0,0,0,-1,0,0,0,-1,-1,-1,0,0,-1,-1,0,0,0,-1,-1,-2,0,-1,0,-1,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,-1,0,0,0,0,0],[0,-1,0,-1,0,-1,0,0,-1,0,-1,0,-1,0,0,-2,0,0,-1,-1,0,0,0,-1,0,0,0,-1,-1,0,-1,-1,-1,-1,-1,0,0,-1,0,0,0,0],[0,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,-2,0,0,0,0,0,-1,0,-1,0,-1,-1,0,0,0,0,-1,-1,-1,-1,0,-1,0,0,0,-2,-1,0],[0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-2,-1,0,-1,0,0,-1,0,0,0,0,-2,-1,-2,0,0,-1,-1,-1,-1,0,0,0,0,0,0,-1,0],[0,0,-1,0,0,0,0,0,0,-1,-1,-1,0,0,-2,0,0,0,-1,-1,0,0,-2,0,-1,-1,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0],[0,0,0,-1,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,-1,-1,-1,-1,0,0,-2,0,0,0,-1,-2,0,0,0,0,-1,-1,0,-1,-1,0,0,0,-1],[0,-1,-1,0,-1,0,0,-1,0,-1,0,0,-1,-2,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,-2,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0],[0,-2,0,0,-1,0,0,-1,-1,-1,0,-2,-1,0,-1,0,0,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,-1,-1,0,0,0,0,-1,0,-1,-2,0,-1],[0,-1,-1,0,0,-1,-1,0,-1,0,0,0,-1,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,-1],[0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,0,0,-2,0,-1,-1,-1,-1],[0,-1,-1,0,0,-1,0,0,-1,0,0,-1,0,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,-2,0,0,-1,-1,-1,-1,-1]];

var gridLevels = [
	gridLevel1,
	gridLevel2,
	gridLevel3,
	gridLevel4,
	gridLevel5,
	gridLevel6,
	gridLevel7,
	gridLevel8,
	gridLevel9,
	gridLevel10,
	gridLevel11,
	gridLevel12
];

var playerILevel1 = 41;
var playerJLevel1 = 35;
var monsterILevel1 = [41,7,26,15,16,9,33,16,23,13];
var monsterJLevel1 = [23,33,7,3,12,18,18,5,36,20];
var monsterDirectionLevel1 = [2,0,2,2,3,0,1,2,2,1];
var coinsILevel1 = [0,32,30,15,16,3,29,3,24,27,31,24,1,15,15,4,3,33,9,3];
var coinsJLevel1 = [40,19,37,23,2,31,34,25,4,26,33,37,20,13,8,26,4,41,8,21];
var ankhsILevel1 = [28];
var ankhsJLevel1 = [12];
var embersILevel1 = [3];
var embersJLevel1 = [23];
var playerILevel2 = 2;
var playerJLevel2 = 18;
var monsterILevel2 = [41,33,32,39,15,9,16,29,15,4,2,14,38,7,26];
var monsterJLevel2 = [6,40,26,15,25,20,38,5,39,38,5,12,30,14,3];
var monsterDirectionLevel2 = [3,0,0,2,2,0,0,0,1,3,0,2,1,3,1];
var coinsILevel2 = [34,38,30,27,38,5,22,36,17,28,10,23,40,41,18,37,8,14,26,4,26,10,10,21,19];
var coinsJLevel2 = [17,36,15,29,14,22,12,8,1,13,5,5,11,34,20,32,13,4,41,12,26,4,24,4,11];
var ankhsILevel2 = [28];
var ankhsJLevel2 = [24];
var embersILevel2 = [26];
var embersJLevel2 = [38];
var playerILevel3 = 4;
var playerJLevel3 = 8;
var monsterILevel3 = [13,18,3,41,38,19,3,0,35,15,32,23,0,32,35,38,13,26,22,12];
var monsterJLevel3 = [12,23,35,41,30,4,2,0,25,13,21,6,39,4,29,0,30,0,12,37];
var monsterDirectionLevel3 = [1,0,1,2,1,1,1,1,1,0,0,0,2,0,2,1,0,1,1,2];
var coinsILevel3 = [8,27,38,39,10,28,3,33,33,25,23,41,11,40,33,39,16,6,10,12,17,25,4,3,28,35,21,31,6,19];
var coinsJLevel3 = [20,4,28,6,19,4,29,0,26,36,29,31,19,34,23,37,13,23,18,38,7,27,27,4,25,2,40,17,36,9];
var ankhsILevel3 = [15];
var ankhsJLevel3 = [19];
var embersILevel3 = [2];
var embersJLevel3 = [22];
var playerILevel4 = 15;
var playerJLevel4 = 25;
var monsterILevel4 = [0,39,1,15,21,33,21,19,4,13,2,26,1,21,1,18,39,29,41,16,30,20,17,29,6];
var monsterJLevel4 = [21,16,26,40,35,24,27,35,32,40,24,24,18,25,18,39,16,40,2,2,31,20,34,41,10];
var monsterDirectionLevel4 = [3,1,0,3,1,3,2,1,1,2,3,3,2,0,0,1,0,3,2,3,1,2,0,2,0];
var coinsILevel4 = [32,16,26,30,39,12,31,14,6,22,9,35,28,23,26,3,33,9,29,35,5,30,31,38,32,9,9,22,27,31,15,19,15,16,25];
var coinsJLevel4 = [15,27,31,39,5,28,2,35,12,0,15,23,16,5,40,15,18,41,3,20,8,2,9,10,15,34,40,26,2,40,24,38,38,35,25];
var ankhsILevel4 = [19];
var ankhsJLevel4 = [11];
var embersILevel4 = [34];
var embersJLevel4 = [41];
var playerILevel5 = 24;
var playerJLevel5 = 32;
var monsterILevel5 = [11,10,34,4,28,37,24,12,3,29,31,31,31,41,2,30,7,17,25,13,6,0,5,14,39,31,7,0,27,14];
var monsterJLevel5 = [5,11,28,9,40,36,23,22,0,19,31,19,28,17,38,21,4,0,21,24,29,39,33,18,33,37,33,3,8,36];
var monsterDirectionLevel5 = [1,0,2,1,2,0,2,3,3,3,2,3,2,2,3,0,1,1,1,2,3,2,3,3,3,3,3,2,1,2];
var coinsILevel5 = [33,4,5,31,11,21,20,35,34,29,12,23,1,3,9,40,20,32,35,33,39,33,26,14,38,31,38,25,21,22,39,7,11,3,1,30,4,6,11,29];
var coinsJLevel5 = [36,19,39,39,7,16,19,29,18,26,15,18,4,37,14,33,16,13,19,20,18,37,19,16,32,35,27,6,40,20,35,25,17,2,26,30,1,20,26,9];
var ankhsILevel5 = [40];
var ankhsJLevel5 = [29];
var embersILevel5 = [4,28];
var embersJLevel5 = [32,24];
var playerILevel6 = 19;
var playerJLevel6 = 25;
var monsterILevel6 = [1,38,4,20,7,25,22,35,11,25,30,32,31,35,4,33,7,15,4,16,30,38,16,21,9,35,37,27,1,5,11,0,21,5,7];
var monsterJLevel6 = [13,35,35,39,25,6,34,35,32,7,9,35,2,17,10,12,21,40,20,13,15,36,19,7,30,1,28,33,33,4,34,0,13,12,10];
var monsterDirectionLevel6 = [0,3,0,0,3,3,3,3,2,0,0,3,0,3,0,0,2,1,2,2,2,1,2,2,1,3,0,1,1,3,2,3,3,1,1];
var coinsILevel6 = [21,15,24,23,27,37,40,14,9,3,7,30,9,27,23,15,0,34,19,7,5,17,31,33,10,17,40,8,3,1,17,6,23,27,24,6,35,7,31,23,0,8,16,18,29];
var coinsJLevel6 = [27,35,16,32,21,0,1,24,31,39,14,16,14,26,37,24,41,26,16,7,18,30,17,7,26,20,30,8,15,21,26,35,17,19,25,41,40,3,3,32,22,1,32,5,37];
var ankhsILevel6 = [12];
var ankhsJLevel6 = [26];
var embersILevel6 = [8,20];
var embersJLevel6 = [34,24];
var playerILevel7 = 12;
var playerJLevel7 = 32;
var monsterILevel7 = [6,14,23,39,14,18,5,5,8,2,1,8,19,15,1,35,37,6,9,30,20,35,0,27,40,19,26,26,15,37,33,21,24,41,38,11,16,21,9,27];
var monsterJLevel7 = [25,40,18,38,7,10,23,11,23,27,28,10,13,40,10,9,32,6,4,13,40,4,27,14,2,35,9,41,6,29,12,1,38,36,26,11,22,15,37,17];
var monsterDirectionLevel7 = [3,1,0,1,3,1,1,0,2,2,0,0,3,2,0,1,1,0,0,3,0,0,3,3,2,2,0,2,0,0,1,1,3,2,0,3,0,2,1,2];
var coinsILevel7 = [31,29,20,17,13,40,7,37,26,17,21,40,38,14,13,28,21,21,36,8,24,31,15,17,36,24,35,19,13,21,14,20,28,9,15,36,35,39,22,14,9,17,26,5,6,35,25,33,28,38];
var coinsJLevel7 = [3,31,6,2,25,18,10,41,35,1,5,37,11,38,2,3,30,29,31,37,29,20,19,1,9,7,35,10,30,13,26,4,4,40,38,14,31,9,15,13,9,34,39,19,23,27,10,4,20,12];
var ankhsILevel7 = [20,16];
var ankhsJLevel7 = [27,35];
var embersILevel7 = [7,39];
var embersJLevel7 = [36,21];
var playerILevel8 = 41;
var playerJLevel8 = 11;
var monsterILevel8 = [29,12,41,40,32,11,7,23,21,6,7,37,19,2,2,9,17,41,23,38,22,10,13,37,17,41,8,2,25,0,7,20,31,25,22,24,15,1,3,14,19,2,34,29,16];
var monsterJLevel8 = [21,0,24,28,5,35,35,0,0,17,38,29,20,24,0,22,29,33,31,41,2,13,14,41,15,27,26,37,35,33,27,40,28,11,29,5,27,35,36,36,35,21,22,26,20];
var monsterDirectionLevel8 = [0,1,0,0,1,2,1,1,3,3,2,2,0,3,0,2,2,0,0,2,2,0,0,2,3,3,2,3,2,1,2,1,0,2,2,1,1,2,2,1,1,3,1,2,3];
var coinsILevel8 = [3,32,8,18,20,10,35,40,34,24,13,20,27,10,32,31,27,26,20,15,36,24,23,17,32,23,32,10,32,15,8,31,8,0,3,40,19,11,37,30,6,25,35,27,37,32,19,9,4,38,5,29,23,32,20];
var coinsJLevel8 = [1,34,16,13,34,1,35,17,27,36,11,27,14,36,26,23,4,29,9,35,31,38,15,27,28,14,20,34,24,32,27,12,20,21,15,19,0,33,28,35,22,22,20,0,0,11,40,14,28,25,28,22,2,41,23];
var ankhsILevel8 = [21,13];
var ankhsJLevel8 = [37,4];
var embersILevel8 = [10,6];
var embersJLevel8 = [37,24];
var playerILevel9 = 21;
var playerJLevel9 = 0;
var monsterILevel9 = [34,2,10,11,33,27,11,17,21,7,12,24,15,25,10,26,14,23,36,0,10,15,17,21,38,15,12,22,32,7,38,24,41,26,5,32,39,13,8,13,33,21,41,14,6,11,12,40,36,36];
var monsterJLevel9 = [9,6,14,38,17,27,22,8,22,12,40,31,33,11,9,31,20,16,8,18,10,24,14,16,28,19,0,30,13,13,3,5,6,33,2,20,36,35,39,19,35,24,31,0,35,27,34,20,9,28];
var monsterDirectionLevel9 = [0,2,1,0,0,3,2,3,2,1,3,3,0,2,3,3,1,3,1,1,0,1,1,3,1,1,0,3,0,3,1,2,0,0,0,3,2,2,1,1,0,1,0,0,0,2,1,3,0,2];
var coinsILevel9 = [6,38,20,17,28,6,35,40,28,35,14,15,39,4,21,15,22,5,37,34,22,25,2,31,16,0,25,12,13,34,14,28,5,26,6,6,12,11,5,31,35,32,36,33,11,39,9,14,25,19,17,36,0,13,7,0,27,3,36,41];
var coinsJLevel9 = [8,31,20,22,28,38,0,27,13,4,24,23,33,14,15,15,24,35,34,37,29,26,35,1,18,38,10,29,15,22,5,36,27,12,28,32,4,31,29,12,29,15,35,1,5,33,5,17,20,21,15,32,20,7,17,24,4,35,16,9];
var ankhsILevel9 = [17,9];
var ankhsJLevel9 = [28,2];
var embersILevel9 = [24,33,35];
var embersJLevel9 = [21,27,35];
var playerILevel10 = 21;
var playerJLevel10 = 0;
var monsterILevel10 = [26,21,30,9,25,37,36,2,1,25,16,21,26,10,27,20,36,35,5,41,41,39,9,20,9,15,10,21,32,30,19,14,28,25,20,12,12,16,0,41,15,10,14,29,37,34,26,20,16,16,38,14,15,28,29];
var monsterJLevel10 = [26,8,0,35,17,20,5,18,18,10,13,23,18,4,24,28,7,30,10,2,34,33,17,29,16,37,9,14,10,4,34,0,28,6,11,22,32,31,25,2,41,3,0,2,34,27,11,16,1,17,18,23,22,0,8];
var monsterDirectionLevel10 = [2,3,3,3,1,2,0,0,3,1,0,3,2,2,0,3,2,2,2,2,0,3,3,2,1,0,0,2,1,3,0,0,2,0,0,2,0,0,2,2,0,3,0,0,2,2,2,0,2,3,2,1,3,0,1];
var coinsILevel10 = [13,27,4,23,2,0,23,32,24,22,16,16,0,14,5,40,29,29,11,24,23,33,22,17,33,5,19,10,0,35,36,3,9,9,37,36,26,15,41,35,32,31,1,30,20,18,0,25,17,32,23,3,18,41,20,15,24,36,9,32,19,18,7,28,12];
var coinsJLevel10 = [11,2,19,32,36,39,13,27,12,27,12,38,5,38,37,36,14,31,31,28,0,33,17,14,41,5,36,41,30,36,19,16,5,5,5,36,39,20,23,7,13,20,36,25,0,2,2,38,17,22,22,4,16,13,18,27,26,11,30,37,10,40,0,26,18];
var ankhsILevel10 = [41,5];
var ankhsJLevel10 = [18,31];
var embersILevel10 = [19,35,36];
var embersJLevel10 = [31,37,9];
var playerILevel11 = 2;
var playerJLevel11 = 13;
var monsterILevel11 = [36,15,14,19,14,22,0,31,20,8,38,13,20,30,28,30,18,10,10,32,11,7,8,8,10,30,11,17,16,2,21,12,19,18,19,27,34,1,38,8,5,37,8,23,16,20,30,26,20,33,25,10,41,35,1,31,28,13,7,25];
var monsterJLevel11 = [24,33,22,36,14,0,39,3,2,26,3,32,24,0,35,6,37,26,31,37,6,39,2,7,38,1,37,31,39,32,33,36,8,32,7,4,11,34,32,7,0,13,20,4,15,8,20,2,13,7,14,22,14,31,31,14,5,29,6,28];
var monsterDirectionLevel11 = [2,1,0,0,0,3,3,3,2,3,0,0,1,1,1,0,3,3,0,2,0,1,2,0,2,3,0,3,3,2,0,3,2,0,2,1,1,0,3,0,1,0,0,0,3,3,0,0,3,2,3,0,2,3,2,0,0,0,3,2];
var coinsILevel11 = [21,40,4,4,0,8,6,3,31,14,17,4,25,10,10,8,20,12,29,21,31,11,32,27,0,35,19,23,10,28,9,7,5,17,21,21,16,28,4,23,15,35,26,40,40,21,32,1,32,29,12,30,1,31,8,17,26,12,24,33,38,24,23,9,6,27,26,7,20,20];
var coinsJLevel11 = [1,14,30,21,13,18,35,21,16,38,32,23,9,4,0,28,18,20,25,25,21,26,22,33,36,12,12,25,19,40,40,26,36,36,34,23,37,4,14,30,5,35,10,25,4,9,8,40,21,27,9,15,0,6,39,3,7,15,0,2,12,13,10,0,22,20,19,21,26,11];
var ankhsILevel11 = [13,38,14];
var ankhsJLevel11 = [30,23,25];
var embersILevel11 = [35,3,2];
var embersJLevel11 = [3,22,10];
var playerILevel12 = 24;
var playerJLevel12 = 38;
var monsterILevel12 = [15,34,21,5,11,6,8,12,33,18,31,41,18,33,39,20,27,9,13,15,1,14,22,11,11,22,1,14,19,9,8,4,15,28,17,1,35,15,0,11,14,28,18,4,22,29,34,16,11,29,13,17,40,18,9,41,3,12,27,13,0,13,23,15,9];
var monsterJLevel12 = [3,10,9,22,20,37,23,1,11,33,10,36,4,28,7,34,25,6,40,29,36,20,3,1,40,24,32,23,20,7,8,21,3,13,37,34,36,37,20,18,29,20,26,7,7,14,29,14,33,20,18,0,7,16,15,7,7,33,18,38,7,34,5,17,10];
var monsterDirectionLevel12 = [0,0,2,2,3,2,3,2,2,1,3,0,0,2,1,3,2,0,1,3,2,1,1,3,0,0,1,3,2,0,0,2,3,2,3,3,0,3,1,0,2,1,2,2,1,1,2,2,3,0,1,0,2,2,1,0,2,0,0,3,2,2,0,3,1];
var coinsILevel12 = [10,4,1,29,7,2,23,16,27,12,19,0,30,20,23,21,30,29,40,28,12,30,18,6,20,33,41,12,23,9,6,17,3,31,31,37,27,28,13,17,3,0,4,5,18,34,25,9,6,30,40,2,8,35,31,24,16,2,7,7,4,18,29,10,26,13,31,4,38,28,26,27,34,0,7];
var coinsJLevel12 = [29,27,40,38,14,27,37,15,0,39,31,14,27,19,9,24,1,8,5,17,7,1,27,26,9,41,30,26,38,26,13,23,26,39,5,8,31,17,12,7,4,10,12,31,38,3,26,39,10,0,11,11,21,16,16,28,18,38,39,4,38,14,26,26,24,39,38,0,37,14,0,5,4,38,23];
var ankhsILevel12 = [23,1,29];
var ankhsJLevel12 = [31,22,20];
var embersILevel12 = [18,0,20];
var embersJLevel12 = [28,1,0];

var playerILevels = [
	playerILevel1,
	playerILevel2,
	playerILevel3,
	playerILevel4,
	playerILevel5,
	playerILevel6,
	playerILevel7,
	playerILevel8,
	playerILevel9,
	playerILevel10,
	playerILevel11,
	playerILevel12
];

var playerJLevels = [
	playerJLevel1,
	playerJLevel2,
	playerJLevel3,
	playerJLevel4,
	playerJLevel5,
	playerJLevel6,
	playerJLevel7,
	playerJLevel8,
	playerJLevel9,
	playerJLevel10,
	playerJLevel11,
	playerJLevel12
];

var monsterILevels = [
	monsterILevel1,
	monsterILevel2,
	monsterILevel3,
	monsterILevel4,
	monsterILevel5,
	monsterILevel6,
	monsterILevel7,
	monsterILevel8,
	monsterILevel9,
	monsterILevel10,
	monsterILevel11,
	monsterILevel12
];

var monsterJLevels = [
	monsterJLevel1,
	monsterJLevel2,
	monsterJLevel3,
	monsterJLevel4,
	monsterJLevel5,
	monsterJLevel6,
	monsterJLevel7,
	monsterJLevel8,
	monsterJLevel9,
	monsterJLevel10,
	monsterJLevel11,
	monsterJLevel12
];

var monsterDirectionLevels = [
	monsterDirectionLevel1,
	monsterDirectionLevel2,
	monsterDirectionLevel3,
	monsterDirectionLevel4,
	monsterDirectionLevel5,
	monsterDirectionLevel6,
	monsterDirectionLevel7,
	monsterDirectionLevel8,
	monsterDirectionLevel9,
	monsterDirectionLevel10,
	monsterDirectionLevel11,
	monsterDirectionLevel12
];

var coinsILevels = [
	coinsILevel1,
	coinsILevel2,
	coinsILevel3,
	coinsILevel4,
	coinsILevel5,
	coinsILevel6,
	coinsILevel7,
	coinsILevel8,
	coinsILevel9,
	coinsILevel10,
	coinsILevel11,
	coinsILevel12
];

var coinsJLevels = [
	coinsJLevel1,
	coinsJLevel2,
	coinsJLevel3,
	coinsJLevel4,
	coinsJLevel5,
	coinsJLevel6,
	coinsJLevel7,
	coinsJLevel8,
	coinsJLevel9,
	coinsJLevel10,
	coinsJLevel11,
	coinsJLevel12
];

var ankhsILevels = [
	ankhsILevel1,
	ankhsILevel2,
	ankhsILevel3,
	ankhsILevel4,
	ankhsILevel5,
	ankhsILevel6,
	ankhsILevel7,
	ankhsILevel8,
	ankhsILevel9,
	ankhsILevel10,
	ankhsILevel11,
	ankhsILevel12
];

var ankhsJLevels = [
	ankhsJLevel1,
	ankhsJLevel2,
	ankhsJLevel3,
	ankhsJLevel4,
	ankhsJLevel5,
	ankhsJLevel6,
	ankhsJLevel7,
	ankhsJLevel8,
	ankhsJLevel9,
	ankhsJLevel10,
	ankhsJLevel11,
	ankhsJLevel12
];

var embersILevels = [
	embersILevel1,
	embersILevel2,
	embersILevel3,
	embersILevel4,
	embersILevel5,
	embersILevel6,
	embersILevel7,
	embersILevel8,
	embersILevel9,
	embersILevel10,
	embersILevel11,
	embersILevel12
];

var embersJLevels = [
	embersJLevel1,
	embersJLevel2,
	embersJLevel3,
	embersJLevel4,
	embersJLevel5,
	embersJLevel6,
	embersJLevel7,
	embersJLevel8,
	embersJLevel9,
	embersJLevel10,
	embersJLevel11,
	embersJLevel12
];

var numberOfPixelsPerCanvas = 21;
var pixelWidth = Math.round(canvasWidth/numberOfPixelsPerCanvas);
var pixelHeight = Math.round(canvasHeight/numberOfPixelsPerCanvas);
var numberOfPixelsInGrid = 2*numberOfPixelsPerCanvas;
var numberOfTraps = 30;
var numberOfMonsters = 65;
var numberOfMonsterFrames = 5;
var numberOfCoins = 75;
var numberOfAnkhs = 3;
var numberOfEmbers = 5;
var numberOfLevels = 12;
var minimumNumberOfTiles = Math.round(0.6*numberOfPixelsInGrid*numberOfPixelsInGrid);
var cutoff = 0.85;
var tileOpacity = 0.3;

var grid;
var checkedGrid;

var playerI, playerJ, playerDirection, monsterI, monsterJ, monsterDirection, coinsI, coinsJ, isCoinActive, ankhsI, ankhsJ, isAnkhActive, embersI, embersJ, isEmberActive;

var isWalking = 0;
var keyReleased = 1;
var isTargetTrackingOn = 0;
var lastkeycode;
var couldIGetAKeyInEdgewise = 0;
var monsterIsAsleep;// = new Array(numberOfMonsters);
var monsterWalkIndex;// = new Array(numberOfMonsters);
var playerWalkIndex = 0;
var monsterIsAlive;// = new Array(numberOfMonsters);
var monsterTimer = 80;
var playerTimer = 30;

var blankSpaceWidth = Math.round((canvasWidth-pixelWidth)/2);
var blankSpaceHeight = Math.round((canvasHeight-pixelHeight)/2);
//var mazeImage = new Image(numberOfPixelsInGrid*pixelWidth+2*blankSpaceWidth,numberOfPixelsInGrid*pixelHeight+2*blankSpaceHeight);
var mazeImages = new Array(numberOfLevels);
//var trapsImage = new Image(mazeImage.width,mazeImage.height);
var trapsImages = new Array(numberOfLevels);
var ballImage = new Image(pixelWidth,pixelHeight);
var playerImages = new Array(4);
var footstepImages = new Array(4);
var monsterImages = [new Array(4), new Array(4)];
var snakeSlitherImages = new Array(4);
var spiderWalkImages = [new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight)];
var restingSpiderImage = new Image(pixelWidth,pixelHeight);
var tileImages = [new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight)];
var liftedTileImages = [new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight),new Image(pixelWidth,pixelHeight)];
//var overImage = new Image(numberOfPixelsInGrid*pixelWidth+2*blankSpaceWidth,numberOfPixelsInGrid*pixelHeight+2*blankSpaceHeight);
var overImages = new Array(numberOfLevels);
//var underImage = new Image(numberOfPixelsInGrid*pixelWidth+2*blankSpaceWidth,numberOfPixelsInGrid*pixelHeight+2*blankSpaceHeight);
var underImages = new Array(numberOfLevels);
var gameOver = 0;
var monsterSightRadius = 5;
var footstepXs = new Array(20), footstepYs = new Array(20), footstepAlphas = new Array(20), footstepDirections = new Array(20);
var waterImage = new Image(1680,1680);
var waterTimer, waterX, waterY, waterTheta;

var largeImageWidth = numberOfPixelsInGrid*pixelWidth+2*blankSpaceWidth;
var largeImageHeight = numberOfPixelsInGrid*pixelHeight+2*blankSpaceHeight;

var brickImage = new Image(40,40);
var tileImage = new Image(20,20);
var floorTileImage = new Image(20,20);
var gateImage = new Image(265,200);
//var heiroglyphImage = new Image(60,60);
var heiroglyphImages = new Array(numberOfLevels);
var spikesImage = new Image(20,20);
var coinImage = new Image(20,20);
var coinEdge = new Image(20,20);
var scarabImage = new Image(20,20);
var emberImage = new Image(20,20);
var ankhImage = new Image(20,20);
var ankhEdgeImage = new Image(20,20);
var targetImage = new Image(20,20);

var omega = 5*Math.PI/180;
var phiX = 0*Math.PI/180;
var phiY = 0*Math.PI/180;
var thetaX = 0, thetaY = 0, thetaZ = 0;
var rotationMatrix = [[1,0,0],[0,1,0],[0,0,1]];

var mazeImageSourceLevels = [
	mazeImageSourceLevel1,
	mazeImageSourceLevel2,
	mazeImageSourceLevel3,
	mazeImageSourceLevel4,
	mazeImageSourceLevel5,
	mazeImageSourceLevel6,
	mazeImageSourceLevel7,
	mazeImageSourceLevel8,
	mazeImageSourceLevel9,
	mazeImageSourceLevel10,
	mazeImageSourceLevel11,
	mazeImageSourceLevel12
];

var overImageSourceLevels = [
	overImageSourceLevel1,
	overImageSourceLevel2,
	overImageSourceLevel3,
	overImageSourceLevel4,
	overImageSourceLevel5,
	overImageSourceLevel6,
	overImageSourceLevel7,
	overImageSourceLevel8,
	overImageSourceLevel9,
	overImageSourceLevel10,
	overImageSourceLevel11,
	overImageSourceLevel12
];

var underImageSourceLevels = [
	underImageSourceLevel1,
	underImageSourceLevel2,
	underImageSourceLevel3,
	underImageSourceLevel4,
	underImageSourceLevel5,
	underImageSourceLevel6,
	underImageSourceLevel7,
	underImageSourceLevel8,
	underImageSourceLevel9,
	underImageSourceLevel10,
	underImageSourceLevel11,
	underImageSourceLevel12
];

var trapsImageSourceLevels = [
	trapsImageSourceLevel1,
	trapsImageSourceLevel2,
	trapsImageSourceLevel3,
	trapsImageSourceLevel4,
	trapsImageSourceLevel5,
	trapsImageSourceLevel6,
	trapsImageSourceLevel7,
	trapsImageSourceLevel8,
	trapsImageSourceLevel9,
	trapsImageSourceLevel10,
	trapsImageSourceLevel11,
	trapsImageSourceLevel12
];

var heiroglyphSourceLevels = [
	heiroglyphSourceLevel1,
	heiroglyphSourceLevel2,
	heiroglyphSourceLevel3,
	heiroglyphSourceLevel4,
	heiroglyphSourceLevel5,
	heiroglyphSourceLevel6,
	heiroglyphSourceLevel7,
	heiroglyphSourceLevel8,
	heiroglyphSourceLevel9,
	heiroglyphSourceLevel10,
	heiroglyphSourceLevel11,
	heiroglyphSourceLevel12
];

var score = 0, embersFound = 0, numberOfLives = 1, startingLives = 1, currentLevel = 0, isLevelComplete = 0, areImagesLoaded = 0, isPlacardDrawing = 0, isReplayOn = 0, targetI = -1, targetJ = -1;

var globalMonsterTimer, monsterTimerIsRunning = 0;

var colorThetaRArray = [0,-5,1,0,-20,-20,-35,-25,10,15,25,-1];
var colorThetaGArray = [0,-5,1,-10,-25,-30,-35,-35,-10,-10,0,0];
var colorThetaBArray = [0,-5,1,-5,-25,-30,-35,-35,-10,-10,-10,1.5];

var colorThetaR = colorThetaRArray[currentLevel]*Math.PI/12;
var colorThetaG = colorThetaGArray[currentLevel]*Math.PI/12;
var colorThetaB = colorThetaBArray[currentLevel]*Math.PI/12;

var redRotation = [[1,0,0],[0,Math.cos(colorThetaR),-Math.sin(colorThetaR)],[0,Math.sin(colorThetaR),Math.cos(colorThetaR)]];
var greenRotation = [[Math.cos(colorThetaG),0,Math.sin(colorThetaG)],[0,1,0],[-Math.sin(colorThetaG),0,Math.cos(colorThetaG)]];
var blueRotation = [[Math.cos(colorThetaB),-Math.sin(colorThetaB),0],[Math.sin(colorThetaB),Math.cos(colorThetaB),0],[0,0,1]];
var partialRotation = matrixMultiply(greenRotation,redRotation);
var colorRotation = matrixMultiply(blueRotation,partialRotation);

var underTileColor0 = "peru";
var underTileColor1 = "moccasin";
var tileColorStop0 = "wheat";
var tileColorStop1 = "sandybrown";
var tileStrokeStyle = "rgba(160,82,45,0.3)";
var liftedUnderTileColor0 = rotateColor(130,20,20,1);
var liftedUnderTileColor1 = rotateColor(205,92,92,1);
var liftedFillStyle = rotateColor(178,34,34,1);
var liftedStrokeStyle = rotateColor(25,25,112,1);
var underImageFillStyle = rotateColor(128,0,0,1);
var heiroglyphColorStop0 = rotateColor(0,128,128,1);
var heiroglyphColorStop1 = rotateColor(0,0,139,0);
var heiroglyphAuraColorStop0 = rotateColor(0,0,255,0.2);
var heiroglyphAuraColorStop1 = rotateColor(0,0,255,0);

var isDrumsAudioLoaded = 0, isDeathAudioLoaded = 0, isTransitionAudioLoaded = 0, isDrumsAudioLoading = 0, isDeathAudioLoading = 0, isTransitionAudioLoading = 0, isIOS = 0, isMobile = 0;

var screenshotImage = new Image(420,460);

function drawScreenshotImage() {
	screenshotImage.src = screenshotImageURL;
	screenshotImage.onload = drawWaterImage;
}

function playTransitionSound() {
	if (lastAudioSource2) {
		lastAudioSource2.stop();
	}
	var audioSource = audioContext2.createBufferSource();
	audioVolume2.gain.value = 1;
	audioSource.connect(audioVolume2);
	audioSource.buffer = transitionBuffer;
	if (audioSource.start) {
		audioSource.start(0);
	} else if (audioSource.play) {
		audioSource.play(0);
	} else if (audioSource.noteOn) {
		audioSource.noteOn(0);	
	}
	lastAudioSource2 = audioSource;
}

function playDeathSound() {
	/*
	if (lastAudioSource2) {
		lastAudioSource2.stop();
	}
	*/
	var audioSource = audioContext2.createBufferSource();
	audioVolume2.gain.value = 1;
	audioSource.connect(audioVolume2);
	audioSource.buffer = deathBuffer;
	if (audioSource.start) {
		audioSource.start(0);
	} else if (audioSource.play) {
		audioSource.play(0);
	} else if (audioSource.noteOn) {
		audioSource.noteOn(0);	
	}
	lastAudioSource2 = audioSource;
}

function playDrums() {
	if (lastAudioSource) {
		lastAudioSource.loop = false;
		lastAudioSource.stop();
	}
	var audioSource = audioContext.createBufferSource();
	audioVolume.gain.value = 1;
	audioSource.connect(audioVolume);
	audioSource.buffer = drumsBuffer;
	audioSource.loop = true;
	if (audioSource.start) {
		audioSource.start(0);
	} else if (audioSource.play) {
		audioSource.play(0);
	} else if (audioSource.noteOn) {
		audioSource.noteOn(0);	
	}
	lastAudioSource = audioSource;
}

function loadTransitionAudio() {
	if (isTransitionAudioLoading) return;
	isTransitionAudioLoading = 1;
	var request = new XMLHttpRequest();
	request.open('GET', transitionURL, true);
	request.responseType = 'arraybuffer';
	request.onload = function() {
		audioContext2.decodeAudioData(request.response, function(buffer) {
			transitionBuffer = buffer;
			isTransitionAudioLoaded = 1;
		});
	};
	request.send();
}

function loadDeathAudio() {
	if (isDeathAudioLoading) return;
	isDeathAudioLoading = 1;
	audioContext2 = new (window.AudioContext || window.webkitAudioContext)();
	audioVolume2 = audioContext2.createGain();
	audioVolume2.connect(audioContext2.destination);
	var request = new XMLHttpRequest();
	request.open('GET', deathURL, true);
	request.responseType = 'arraybuffer';
	request.onload = function() {
		audioContext2.decodeAudioData(request.response, function(buffer) {
			deathBuffer = buffer;
			isDeathAudioLoaded = 1;
		});
	};
	request.send();
}

function loadDrumsAudio() {
	if (isDrumsAudioLoading) return;
	isDrumsAudioLoading = 1;
	audioContext = new (window.AudioContext || window.webkitAudioContext)();
	audioVolume = audioContext.createGain();
	audioVolume.connect(audioContext.destination);
	var request = new XMLHttpRequest();
	request.open('GET', drumsURL, true);
	request.responseType = 'arraybuffer';
	request.onload = function() {
		audioContext.decodeAudioData(request.response, function(buffer) {
			drumsBuffer = buffer;
			isDrumsAudioLoaded = 1;
			playDrums();
		});
	};
	request.send();
}

function matrixMultiply(mat1,mat2) {
	var matrix = [[0,0,0],[0,0,0],[0,0,0]];
	for (var i = 0; i < 3; i++) {
		for (var j = 0; j < 3; j++) {
			for (var k = 0; k < 3; k++) {
				matrix[i][j] += mat1[i][k]*mat2[k][j];
			}
		}
	}
	return matrix;
}

function vectorMultiply(mat,vec) {
	var vector = [0,0,0];
	for (var i = 0; i < 3; i++) {
		for (var j = 0; j < 3; j++) {
			vector[i] += mat[i][j]*vec[j];
		}
	}
	return vector;
}

function rotateColor(red,green,blue,alpha) {
	var oldColor = [red,green,blue];
	var newColor = vectorMultiply(colorRotation,oldColor);
	return "rgba(" + Math.floor(newColor[0]) + "," + Math.floor(newColor[1]) + "," + Math.floor(newColor[2]) + "," + alpha + ")";
}

function rotateX() {
	var xRotation = [[1,0,0],[0,1,0],[0,0,1]];
	xRotation[1][1] = Math.cos(thetaX);
	xRotation[2][2] = xRotation[1][1];
	xRotation[1][2] = -Math.sin(thetaX);
	xRotation[2][1] = -xRotation[1][2];
	rotationMatrix = matrixMultiply(xRotation,rotationMatrix);
}

function rotateY() {
	var yRotation = [[1,0,0],[0,1,0],[0,0,1]];
	yRotation[0][0] = Math.cos(thetaY);
	yRotation[2][2] = yRotation[0][0];
	yRotation[0][2] = Math.sin(thetaY);
	yRotation[2][0] = -yRotation[0][2];
	rotationMatrix = matrixMultiply(yRotation,rotationMatrix);
}

function rotateZ() {
	var zRotation = [[1,0,0],[0,1,0],[0,0,1]];
	zRotation[0][0] = Math.cos(thetaZ);
	zRotation[1][1] = zRotation[0][0];
	zRotation[0][1] = -Math.sin(thetaZ);
	zRotation[1][0] = -zRotation[0][1];
	rotationMatrix = matrixMultiply(zRotation,rotationMatrix);
}

function drawDimmerCanvas() {
	dimmerContext.clearRect(0,0,420,420);
	/*
	if (embersFound >= numberOfEmbers - 1) {
		return;
	}
	*/
	var grad = dimmerContext.createRadialGradient(210,210,40+170*embersFound/numberOfEmbers,210,210,210);
	grad.addColorStop(0,"rgba(0,0,0,0)");
	grad.addColorStop(1,"rgba(0,0,0,1)");
	dimmerContext.fillStyle = grad;
	dimmerContext.fillRect(0,0,420,420);
}

function drawShadow(i,j) {
	if (Math.abs(i-playerI) > 10 || Math.abs(j-playerJ) > 10) return;
	var xLeft = i*pixelWidth + blankSpaceWidth;
	var yTop = j*pixelHeight + blankSpaceHeight;
	var xRight = xLeft + pixelWidth;
	var yBottom = yTop + pixelHeight;
	var playerX = playerI*pixelWidth + blankSpaceWidth;
	var playerY = playerJ*pixelHeight + blankSpaceHeight;
	var x1, x2, x3, x4, y1, y2, y3, y4;
	x4 = -1;
	y4 = -1;
	if (playerI > i) {
		if (playerJ > j) {
			x1 = xLeft;
			x2 = xLeft;
			x3 = xRight;
			//x4 = xRight;
			y1 = yBottom;
			y2 = yTop;
			y3 = yTop;
			//y4 = yBottom;
		} else {
			if (playerJ === j) {
				x1 = xRight;
				x2 = xLeft;
				x3 = xLeft;
				x4 = xRight;
				y1 = yBottom;
				y2 = yBottom;
				y3 = yTop;
				y4 = yTop;
			} else {
				x1 = xLeft;
				x2 = xLeft;
				x3 = xRight;
				//x4 = xRight;
				y1 = yTop;
				y2 = yBottom;
				y3 = yBottom;
				//y4 = yTop;
			}
		}
	} else {
		if (playerI === i) {
			if (playerJ > j) {
				x1 = xLeft;
				x2 = xLeft;
				x3 = xRight;
				x4 = xRight;
				y1 = yBottom;
				y2 = yTop;
				y3 = yTop;
				y4 = yBottom;
			} else {
				x1 = xLeft;
				x2 = xLeft;
				x3 = xRight;
				x4 = xRight;
				y1 = yTop;
				y2 = yBottom;
				y3 = yBottom;
				y4 = yTop;
			}
		} else {
			if (playerJ > j) {
				x1 = xLeft;
				x2 = xRight;
				x3 = xRight;
				//x4 = xRight;
				y1 = yTop;
				y2 = yTop;
				y3 = yBottom;
				//y4 = yBottom;
			} else {
				if (playerJ === j) {
					x1 = xLeft;
					x2 = xRight;
					x3 = xRight;
					x4 = xLeft;
					y1 = yTop;
					y2 = yTop;
					y3 = yBottom;
					y4 = yBottom;
				} else {
					x1 = xLeft;
					x2 = xRight;
					x3 = xRight;
					//x4 = xRight;
					y1 = yBottom;
					y2 = yBottom;
					y3 = yTop;
					//y4 = yBottom;
				}
			}
		}
	}
	var x1_, x2_, x3_, y1_, y2_, y3_;
	var ratioOfPlayerHeightToBlockHeight = 2;
	//var factor = 1/(ratioOfPlayerHeightToBlockHeight - 1);
	var factor = (1-embersFound/numberOfEmbers);
	playerX += pixelWidth/2;
	playerY += pixelHeight/2;
	var dx = playerX - x1;
	var dy = playerY - y1;
	var distanceToPlayer = Math.sqrt(dx*dx + dy*dy);
	//var lengthOfShadow = 840;
	var lengthOfShadow1 = factor*distanceToPlayer;
	var angleOfShadow1 = Math.atan2(-dy,-dx);
	dx = playerX - x2;
	dy = playerY - y2;
	distanceToPlayer = Math.sqrt(dx*dx + dy*dy);
	var lengthOfShadow2 = factor*distanceToPlayer;
	var angleOfShadow2 = Math.atan2(-dy,-dx);
	dx = playerX - x3;
	dy = playerY - y3;
	distanceToPlayer = Math.sqrt(dx*dx + dy*dy);
	var lengthOfShadow3 = factor*distanceToPlayer;
	var angleOfShadow3 = Math.atan2(-dy,-dx);
	dx = playerX - x4;
	dy = playerY - y4;
	distanceToPlayer = Math.sqrt(dx*dx + dy*dy);
	var lengthOfShadow4 = factor*distanceToPlayer;
	var angleOfShadow4 = Math.atan2(-dy,-dx);
	
	x1_ = x1 + lengthOfShadow1*Math.cos(angleOfShadow1);
	y1_ = y1 + lengthOfShadow1*Math.sin(angleOfShadow1);
	x2_ = x2 + lengthOfShadow2*Math.cos(angleOfShadow2);
	y2_ = y2 + lengthOfShadow2*Math.sin(angleOfShadow2);
	x3_ = x3 + lengthOfShadow3*Math.cos(angleOfShadow3);
	y3_ = y3 + lengthOfShadow3*Math.sin(angleOfShadow3);
	if (x4 > 0) {
		var x4_ = x4 + lengthOfShadow4*Math.cos(angleOfShadow4);
		var y4_ = y4 + lengthOfShadow4*Math.sin(angleOfShadow4);
	}
	imageContext.fillStyle = "black";
	imageContext.beginPath();
	imageContext.moveTo(Math.round(x1),Math.round(y1));
	imageContext.lineTo(Math.round(x1_),Math.round(y1_));
	imageContext.lineTo(Math.round(x2_),Math.round(y2_));
	imageContext.lineTo(Math.round(x3_),Math.round(y3_));
	if (x4 > 0) {
		imageContext.lineTo(Math.round(x4_),Math.round(y4_));
		imageContext.lineTo(Math.round(x4),Math.round(y4));
	}
	imageContext.lineTo(Math.round(x3),Math.round(y3));
	imageContext.lineTo(Math.round(x2),Math.round(y2));
	imageContext.lineTo(Math.round(x1),Math.round(y1));
	imageContext.closePath();
	imageContext.fill();
}

function drawCoinAura(i,j) {
	if (Math.abs(i-playerI) > 10 || Math.abs(j-playerJ) > 10) return;
	var radius = 20;
	var grad = imageContext.createRadialGradient(i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5,0,i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5,radius);
	grad.addColorStop(0,"rgba(158,11,0,1)");
	grad.addColorStop(1,"rgba(158,11,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5);
	imageContext.arc(i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5,radius,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
}

function drawAnkhAura(i,j) {
	if (Math.abs(i-playerI) > 10 || Math.abs(j-playerJ) > 10) return;
	var radius = 20;
	var grad = imageContext.createRadialGradient(i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5,0,i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5,radius);
	grad.addColorStop(0,"rgba(0,0,200,1)");
	grad.addColorStop(1,"rgba(0,0,200,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5);
	imageContext.arc(i*pixelWidth+blankSpaceWidth+5,j*pixelHeight+blankSpaceHeight+5,radius,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
}

function drawEmberAura(i,j) {
	if (Math.abs(i-playerI) > 10 || Math.abs(j-playerJ) > 10) return;
	var radius = 20;
	var grad = imageContext.createRadialGradient(i*pixelWidth+blankSpaceWidth+10,j*pixelHeight+blankSpaceHeight+10,0,i*pixelWidth+blankSpaceWidth+10,j*pixelHeight+blankSpaceHeight+10,radius);
	grad.addColorStop(0,"rgba(200,0,0,1)");
	grad.addColorStop(1,"rgba(200,0,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(i*pixelWidth+blankSpaceWidth+10,j*pixelHeight+blankSpaceHeight+10);
	imageContext.arc(i*pixelWidth+blankSpaceWidth+10,j*pixelHeight+blankSpaceHeight+10,radius,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
}

function drawShadowCanvas() {
	shadowContext.clearRect(0,0,canvasWidth,canvasHeight);
	imageContext.clearRect(0,0,canvasWidth,canvasHeight);
	imageContext.save();
	//shadowContext.translate(playerI*pixelWidth+blankSpaceWidth,playerJ*pixelHeight+blankSpaceHeight);
	imageContext.translate(-playerI*pixelWidth,-playerJ*pixelHeight);
	for (var i = 0; i < grid.length; i++) {
		for (var j = 0; j < grid[i].length; j++) {
			if (grid[i][j] === -1) {
				drawShadow(i,j);
			}
		}
	}
	for (var i = 0; i < coinsI.length; i++) {
		if (isCoinActive[i]) {
			drawCoinAura(coinsI[i],coinsJ[i]);
		}
	}
	for (var i = 0; i < ankhsI.length; i++) {
		if (isAnkhActive[i]) {
			drawAnkhAura(ankhsI[i],ankhsJ[i]);
		}
	}
	for (var i = 0; i < embersI.length; i++) {
		if (isEmberActive[i]) {
			drawEmberAura(embersI[i],embersJ[i]);
		}
	}
	imageContext.restore();
	//shadowContext.globalAlpha = 0.5*(1-embersFound/numberOfEmbers);
	shadowContext.globalAlpha = 0.5;
	shadowContext.drawImage(imageCanvas,0,0,imageCanvas.width,imageCanvas.height,0,0,canvasWidth,canvasHeight);
}

function isPlayerVisible(i,j)
{
	var deltaI = playerI - i;
	var deltaJ = playerJ - j;
	var rSquared = deltaI*deltaI + deltaJ*deltaJ;
	if (rSquared > monsterSightRadius*monsterSightRadius) {return 0;}
	var rSquared2, theta, theta1, theta2, theta3, theta4, minTheta, maxTheta, startI, startJ, endI, endJ;
	theta = Math.atan2(deltaJ,deltaI);
	if (theta < 0) {theta += 2*Math.PI;}
	startI = i - monsterSightRadius;
	if (startI < 0) {startI = 0;}
	startJ = j - monsterSightRadius;
	if (startJ < 0) {startJ = 0;}
	endI = i + monsterSightRadius;
	if (endI >= grid.length) {endI = grid.length-1;}
	endJ = j + monsterSightRadius;
	if (endJ >= grid[startI].length) {endJ = grid[startI].length-1;}
	for (var m = startI; m <= endI; m++)
	{
		for (var n = startJ; n <= endJ; n++)
		{
			if (grid[m][n] == -1)
			{
				deltaI = m-i;
				deltaJ = n-j;
				rSquared2 = deltaI*deltaI + deltaJ*deltaJ;
				if (rSquared2 < rSquared)
				{
					theta1 = Math.atan2(deltaJ+0.5,deltaI-0.5);
					if (theta1 < 0) {theta1 += 2*Math.PI;}
					theta2 = Math.atan2(deltaJ+0.5,deltaI+0.5);
					if (theta2 < 0) {theta2 += 2*Math.PI;}
					theta3 = Math.atan2(deltaJ-0.5,deltaI-0.5);
					if (theta3 < 0) {theta3 += 2*Math.PI;}
					theta4 = Math.atan2(deltaJ-0.5,deltaI+0.5);
					if (theta4 < 0) {theta4 += 2*Math.PI;}
					minTheta = theta1;
					maxTheta = theta1;
					if (minTheta > theta2) {minTheta = theta2;}
					if (maxTheta < theta2) {maxTheta = theta2;}
					if (minTheta > theta3) {minTheta = theta3;}
					if (maxTheta < theta3) {maxTheta = theta3;}
					if (minTheta > theta4) {minTheta = theta4;}
					if (maxTheta < theta4) {maxTheta = theta4;}
					if (maxTheta - minTheta > Math.PI)
					{
						maxTheta -= 2*Math.PI;
						if (theta > Math.PI)
						{
							theta -= 2*Math.PI;
						}
						if (theta >= maxTheta && theta <= minTheta) {return 0;}
						if (theta < 0)
						{
							theta += 2*Math.PI;
						}
					}
					if (minTheta <= theta && maxTheta >= theta) {return 0;}
				}
			}
		}
	}
	return 1;
}

function monsterWalk(monsterIndex,currentI,currentJ,nextI,nextJ,frame)
{
	if (frame > 4)
	{
		monsterWalkIndex[monsterIndex] = frame-1;
		monsterI[monsterIndex] = nextI;
		monsterJ[monsterIndex] = nextJ;
		if (grid[monsterI[monsterIndex]][monsterJ[monsterIndex]] === -2)
		{
			monsterIsAlive[monsterIndex] = 0;
			renderMaze();
		}
		//checkIfMonsterSeesPlayer(monsterIndex);
	} else {
		monsterWalkIndex[monsterIndex] = frame-1;
		monsterI[monsterIndex] = (nextI - currentI)*frame/4 + currentI;
		monsterJ[monsterIndex] = (nextJ - currentJ)*frame/4 + currentJ;
		renderMaze();
		(function(mI,cI,cJ,nI,nJ,f) {
			setTimeout( function() {
				monsterWalk(mI,cI,cJ,nI,nJ,f+1);
			}, monsterTimer);
		})(monsterIndex,currentI,currentJ,nextI,nextJ,frame);
	}
}

function rankDirectionsByDistance(distArray) {
	var dist = distArray[0];
	var rank0 = 0;
	for (var i = 1; i < 4; i++) {
		if (distArray[i] < dist) {
			rank0 = i;
			dist = distArray[i];
		}
	}
	distArray[rank0] = 100000;
	dist = distArray[0];
	var rank1 = 0;
	for (var i = 1; i < 4; i++) {
		if (distArray[i] < dist) {
			rank1 = i;
			dist = distArray[i];
		}
	}
	distArray[rank1] = 100000;
	dist = distArray[0];
	var rank2 = 0;
	for (var i = 1; i < 4; i++) {
		if (distArray[i] < dist) {
			rank2 = i;
			dist = distArray[i];
		}
	}
	distArray[rank2] = 100000;
	dist = distArray[0];
	var rank3 = 0;
	for (var i = 1; i < 4; i++) {
		if (distArray[i] < dist) {
			rank3 = i;
			dist = distArray[i];
		}
	}
	var ranks = [rank0,rank1,rank2,rank3];
	return ranks;
}

function monsterNextMove(monsterIndex) {
	if (!monsterIsAlive[monsterIndex] || gameOver || !isPlayerVisible(Math.round(monsterI[monsterIndex]),Math.round(monsterJ[monsterIndex]))) return;
	var deltaI = playerI - monsterI[monsterIndex];
	var deltaJ = playerJ - monsterJ[monsterIndex];
	if (deltaI === 0 && deltaJ === 0 && !gameOver)
	{
		deathSequence();
		return;
	}
	var distanceSquaredLeft = (deltaI+1)*(deltaI+1) + deltaJ*deltaJ;
	if (monsterI[monsterIndex]-1 < 0 || grid[monsterI[monsterIndex]-1][monsterJ[monsterIndex]] === -1) {
		distanceSquaredLeft = 10000;
	}
	var distanceSquaredRight = (deltaI-1)*(deltaI-1) + deltaJ*deltaJ;
	if (monsterI[monsterIndex]+1 >= grid.length || grid[monsterI[monsterIndex]+1][monsterJ[monsterIndex]] === -1) {
		distanceSquaredRight = 10000;
	}
	var distanceSquaredUp = deltaI*deltaI + (deltaJ+1)*(deltaJ+1);
	if (monsterJ[monsterIndex]-1 < 0 || grid[monsterI[monsterIndex]][monsterJ[monsterIndex]-1] === -1) {
		distanceSquaredUp = 10000;
	}
	var distanceSquaredDown = deltaI*deltaI + (deltaJ-1)*(deltaJ-1);
	if (monsterJ[monsterIndex]+1 >= grid[0].length || grid[monsterI[monsterIndex]][monsterJ[monsterIndex]+1] === -1) {
		distanceSquaredDown = 10000;
	}
	var distanceSquaredArray = [distanceSquaredLeft,distanceSquaredRight,distanceSquaredUp,distanceSquaredDown];
	var directionsRanked = rankDirectionsByDistance(distanceSquaredArray);
	var newI = monsterI[monsterIndex], newJ = monsterJ[monsterIndex], newDirection = monsterDirection[monsterIndex];
	for (var i = 0; i < 4; i++) {
		switch (directionsRanked[i]) {
			case 0:
				newI--;
				break;
			case 1:
				newI++;
				break;
			case 2:
				newJ--;
				break;
			case 3:
				newJ++;
				break;
		}
		if (grid[newI][newJ] != -1) {
			newDirection = directionsRanked[i];
			break;
		}
	}
	monsterDirection[monsterIndex] = newDirection;
	monsterWalk(monsterIndex,monsterI[monsterIndex],monsterJ[monsterIndex],newI,newJ,1);
}

function checkIfMonsterSeesPlayer(monsterIndex)
{
	if (!monsterIsAlive[monsterIndex]) {return;}
	monsterI[monsterIndex] = Math.round(monsterI[monsterIndex]);
	monsterJ[monsterIndex] = Math.round(monsterJ[monsterIndex]);
	if (gameOver) {return;}
	if (isPlayerVisible(monsterI[monsterIndex],monsterJ[monsterIndex])) {
		monsterNextMove(monsterIndex);
	}
	/*
	if (monsterIsAsleep[monsterIndex] && isPlayerVisible(monsterI[monsterIndex],monsterJ[monsterIndex]))
	{
		monsterIsAsleep[monsterIndex] = 0;
		monsterNextMove(monsterIndex);
		renderMaze();
		return;
	}
	if (!monsterIsAsleep[monsterIndex])
	{
		if (!isPlayerVisible(monsterI[monsterIndex],monsterJ[monsterIndex]))
		{
			monsterIsAsleep[monsterIndex] = 1;
			renderMaze();
		} else {
			monsterNextMove(monsterIndex);
		}
	}
	*/
}

function setAllMonsterIntervals() {
	if (monsterTimerIsRunning) return;
	globalMonsterTimer = setInterval(function() {
		for (var i = 0; i < monsterI.length; i++) {
			monsterNextMove(i);
		}
	},5*monsterTimer);
	monsterTimerIsRunning = 1;
}

function renderMaze()
{
	//footstepsCanvas.width = footstepsCanvas.width;
	footstepsContext.clearRect(0,0,420,420);
	footstepsContext.save();
	footstepsContext.translate(-playerI*pixelWidth,-playerJ*pixelHeight);
	for (var i = 0; i < footstepXs.length; i++) {
		if (footstepXs[i] >= 0) {
			footstepsContext.globalAlpha = footstepAlphas[i];
			footstepsContext.drawImage(footstepImages[footstepDirections[i]],footstepXs[i],footstepYs[i]);
		}
	}
	footstepsContext.restore();
	if (isTargetTrackingOn) {
		footstepsContext.globalAlpha = 1;
		footstepsContext.drawImage(targetImage,(targetI - playerI)*pixelWidth + blankSpaceWidth,(targetJ - playerJ)*pixelHeight + blankSpaceHeight);
	}
	drawShadowCanvas();
	//drawRotatedHeiroglyph();
	drawEmbers();
	playerContext.clearRect(0,0,canvasWidth,canvasHeight);
	playerContext.drawImage(playerImages[playerDirection],blankSpaceWidth-20,blankSpaceHeight-20);
	backgroundContext.clearRect(0,0,canvasWidth,canvasHeight);
	backgroundContext.drawImage(mazeImages[currentLevel],playerI*pixelWidth,playerJ*pixelHeight,canvasWidth,canvasHeight,0,0,canvasWidth,canvasHeight);
	trapsContext.clearRect(0,0,canvasWidth,canvasHeight);
	trapsContext.drawImage(trapsImages[currentLevel],playerI*pixelWidth,playerJ*pixelHeight,canvasWidth,canvasHeight,0,0,canvasWidth,canvasHeight);
	overContext.clearRect(0,0,canvasWidth,canvasHeight);
	overContext.drawImage(overImages[currentLevel],playerI*pixelWidth,playerJ*pixelHeight,canvasWidth,canvasHeight,0,0,canvasWidth,canvasHeight);
	underContext.clearRect(0,0,canvasWidth,canvasHeight);
	underContext.drawImage(underImages[currentLevel],playerI*pixelWidth,playerJ*pixelHeight,canvasWidth,canvasHeight,0,0,canvasWidth,canvasHeight);
	monsterContext.clearRect(0,0,canvasWidth,canvasHeight);
	if (isLevelComplete) {
		underContext.drawImage(floorTileImage,(20-playerI)*pixelWidth+blankSpaceWidth,-playerJ*pixelHeight-20+blankSpaceHeight);
		return;
	}
	var test = 1;
	for (var i = 0; i < monsterI.length; i++)
	{
		if (monsterIsAlive[i])
		{
			test = 0;
			if (Math.abs(monsterI[i]-playerI) > 10 || Math.abs(monsterJ[i]-playerJ) > 10) continue;
			monsterContext.drawImage(monsterImages[i%2][monsterDirection[i]][monsterWalkIndex[i]],(monsterI[i]-playerI)*pixelWidth+Math.round((canvasWidth-pixelWidth)/2),(monsterJ[i]-playerJ)*pixelHeight+Math.round((canvasHeight-pixelHeight)/2));
		}
	}
	if (test) {
		isLevelComplete = 1;
		renderMaze();
	}
	return;
}

var snakeImageSources = [
	snakeImageSources0,
	snakeImageSources1,
	snakeImageSources2,
	snakeImageSources3,
	snakeImageSources4
];

function drawSnakeImages(index,direction)
{
	if (direction > 3)
	{
		drawSnakeImages(index+1,0);
		return;
	}
	if (index >= numberOfMonsterFrames)
	{
		drawSpiderImages(0,0);
	} else {
		monsterImages[0][direction][index].src = snakeImageSources[index][direction];
		monsterImages[0][direction][index].onload = function() {
			drawSnakeImages(index,direction+1);
		}
	}
}

var spiderImageSources = [
	spiderImageSources0,
	spiderImageSources1,
	spiderImageSources2,
	spiderImageSources3,
	spiderImageSources4
];

function drawSpiderImages(index,direction)
{
	if (direction > 3)
	{
		drawSpiderImages(index+1,0);
		return;
	}
	if (index >= numberOfMonsterFrames)
	{
		areImagesLoaded = 1;
		drawWater();
		//drawPlacard();
		isReplayOn = 1;
		rescaleAllCanvases();
		window.addEventListener("resize",rescaleAllCanvases);
		document.onkeydown = function(e) {
			arrowKey(e.keyCode);
		};
		document.onkeyup = function(e) {
			if (e.keyCode == lastkeycode) {keyReleased = 1;}
		};
		stopGlobalLoadingIndicator();
	} else {
		monsterImages[1][direction][index].src = spiderImageSources[index][direction];
		monsterImages[1][direction][index].onload = function() {
			drawSpiderImages(index,direction+1);
		}
	}
}

function drawTrapsImage(index)
{
	if (index >= numberOfLevels) {
		drawSnakeImages(0,0);
		return;
	}
	trapsImages[index] = new Image(largeImageWidth,largeImageHeight);
	trapsImages[index].src = trapsImageSourceLevels[index];
	trapsImages[index].onload = function() {
		drawTrapsImage(index+1);
	};
}

function drawUnderImage(index) {
	if (index >= numberOfLevels) {
		drawTrapsImage(0);
		return;
	}
	underImages[index] = new Image(largeImageWidth,largeImageHeight);
	underImages[index].src = underImageSourceLevels[index];
	underImages[index].onload = function() {
		drawUnderImage(index+1);
	};
}

function drawOverImage(index)
{
	if (index >= numberOfLevels) {
		drawUnderImage(0);
		return;
	}
	overImages[index] = new Image(largeImageWidth,largeImageHeight);
	overImages[index].src = overImageSourceLevels[index];
	overImages[index].onload = function() {
		drawOverImage(index+1);
	};
}

function drawMazeImage(index)
{
	if (index >= numberOfLevels) {
		drawOverImage(0);
		return;
	}
	mazeImages[index] = new Image(largeImageWidth,largeImageHeight);
	mazeImages[index].src = mazeImageSourceLevels[index];
	mazeImages[index].onload = function() {
		drawMazeImage(index+1);
	};
}

function dealiasArray(arr) {
	var newArray = new Array(arr.length);
	for (var i = 0; i < arr.length; i++) {
		newArray[i] = arr[i];
	}
	return newArray;
}

function dealiasGrid(arr) {
	var newArray = new Array(arr.length);
	for (var i = 0; i < arr.length; i++) {
		newArray[i] = new Array(arr[i].length);
		for (var j = 0; j < arr[i].length; j++) {
			newArray[i][j] = arr[i][j];
		}
	}
	return newArray;
}

function initializeGrid()
{
	if (/iPhone|iPad|iPod|Android|webOS|Blackberry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
		isMobile = 1;
	}
	if (/iPhone|iPad|iPod/i.test(navigator.userAgent) || true) {
		isIOS = 1;
	} else {
		loadDrumsAudio();
		loadDeathAudio();
		loadTransitionAudio();
	}
	monsterTimer = (isIOS || isAndroid ? 80 : 40);
	scoreCanvas.addEventListener("mousedown",function(evt) {
		if (!isDrumsAudioLoaded) loadDrumsAudio();
		if (!isDeathAudioLoaded) loadDeathAudio();
		if (!isTransitionAudioLoaded) loadTransitionAudio();
		if (isReplayOn) {
			numberOfLives = startingLives;
			score = 0;
			embersFound = 0;
			currentLevel = 0;
			initializeGrid();
		}
	});
	scoreCanvas.addEventListener("touchstart",function(evt) {
		evt.preventDefault();
		if (!isDrumsAudioLoaded) loadDrumsAudio();
		if (!isDeathAudioLoaded) loadDeathAudio();
		if (!isTransitionAudioLoaded) loadTransitionAudio();
		if (isReplayOn) {
			numberOfLives = startingLives;
			score = 0;
			embersFound = 0;
			currentLevel = 0;
			initializeGrid();
		} else {
			touchScreen(evt);
		}
	});
	scrollPreventCanvas.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	});
	isTargetTrackingOn = 0;
	targetI = -1;
	targetJ = -1;
	gameOver = 1;
	colorThetaR = colorThetaRArray[currentLevel]*Math.PI/12;
	colorThetaG = colorThetaGArray[currentLevel]*Math.PI/12;
	colorThetaB = colorThetaBArray[currentLevel]*Math.PI/12;

	redRotation = [[1,0,0],[0,Math.cos(colorThetaR),-Math.sin(colorThetaR)],[0,Math.sin(colorThetaR),Math.cos(colorThetaR)]];
	greenRotation = [[Math.cos(colorThetaG),0,Math.sin(colorThetaG)],[0,1,0],[-Math.sin(colorThetaG),0,Math.cos(colorThetaG)]];
	blueRotation = [[Math.cos(colorThetaB),-Math.sin(colorThetaB),0],[Math.sin(colorThetaB),Math.cos(colorThetaB),0],[0,0,1]];
	partialRotation = matrixMultiply(greenRotation,redRotation);
	colorRotation = matrixMultiply(blueRotation,partialRotation);

	heiroglyphAuraColorStop0 = rotateColor(0,0,255,0.2);
	heiroglyphAuraColorStop1 = rotateColor(0,0,255,0);
	isLevelComplete = 0;
	grid = dealiasGrid(gridLevels[currentLevel]);
	playerI = dealiasArray(playerILevels[currentLevel]);
	playerJ = dealiasArray(playerJLevels[currentLevel]);
	playerDirection = 0;
	for (var i = 0; i < footstepXs.length; i++) {
		footstepXs[i] = -1;
		footstepYs[i] = -1;
		footstepAlphas[i] = 0;
		footstepDirections[i] = 0;
	}
	monsterI = dealiasArray(monsterILevels[currentLevel]);
	monsterJ = dealiasArray(monsterJLevels[currentLevel]);
	monsterDirection = dealiasArray(monsterDirectionLevels[currentLevel]);
	monsterIsAsleep = new Array(monsterI.length);
	monsterIsAlive = new Array(monsterI.length);
	monsterWalkIndex = new Array(monsterI.length);
	for (var i = 0; i < monsterI.length; i++) {
		monsterIsAsleep[i] = 1;
		monsterIsAlive[i] = 1;
		monsterWalkIndex[i] = 4;
	}
	coinsI = dealiasArray(coinsILevels[currentLevel]);
	coinsJ = dealiasArray(coinsJLevels[currentLevel]);
	isCoinActive = new Array(coinsI.length);
	for (var i = 0; i < coinsI.length; i++) {
		isCoinActive[i] = 1;
	}
	embersI = dealiasArray(embersILevels[currentLevel]);
	embersJ = dealiasArray(embersJLevels[currentLevel]);
	isEmberActive = new Array(embersI.length);
	for (var i = 0; i < embersI.length; i++) {
		isEmberActive[i] = 1;
	}
	ankhsI = dealiasArray(ankhsILevels[currentLevel]);
	ankhsJ = dealiasArray(ankhsJLevels[currentLevel]);
	isAnkhActive = new Array(ankhsI.length);
	for (var i = 0; i < ankhsI.length; i++) {
		isAnkhActive[i] = 1;
	}
	isReplayOn = 0;
	if (areImagesLoaded) {
		drawPlacard();
		return;
	}
	for (var i = 0; i < monsterImages[0].length; i++)
	{
		monsterImages[0][i] = new Array(numberOfMonsterFrames);
		monsterImages[1][i] = new Array(numberOfMonsterFrames);
		for (var j = 0; j < numberOfMonsterFrames; j++)
		{
			monsterImages[0][i][j] = new Image(pixelWidth,pixelHeight);
			monsterImages[1][i][j] = new Image(pixelWidth,pixelHeight);
		}
	}
	drawCoinImage();
}

function drawHat() {
	imageContext.fillStyle = "saddlebrown";
	imageContext.beginPath();
	imageContext.moveTo(30,30);
	imageContext.arc(30,30,6,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
	imageContext.fillStyle = "peru";
	imageContext.beginPath();
	imageContext.moveTo(30,30);
	imageContext.arc(30,30,3,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
	imageContext.fillStyle = "sienna";
	imageContext.beginPath();
	imageContext.moveTo(30,27);
	imageContext.bezierCurveTo(28,30,28,30,30,33);
	imageContext.bezierCurveTo(32,30,32,30,30,27);
	imageContext.closePath();
	imageContext.fill();
}

function drawTorch() {
	imageContext.fillStyle = "saddlebrown";
	imageContext.fillRect(18,22,6,6);
	imageContext.fillStyle = "rgb(109,39,0)";
	imageContext.fillRect(20,24,2,2);
	//imageContext.beginPath();
	//imageContext.moveTo(20,22);
	//imageContext.arc(20,22,4,0,2*Math.PI);
	//imageContext.closePath();
	//imageContext.fill();
	var grad = imageContext.createRadialGradient(21,22,0,21,25,20);
	grad.addColorStop(0,"orangered");
	grad.addColorStop(1,"rgba(255,69,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(19,22);
	imageContext.lineTo(0,0);
	imageContext.lineTo(42,0);
	imageContext.lineTo(23,22);
	//imageContext.arc(20,22,10,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
	imageContext.beginPath();
	imageContext.moveTo(19,28);
	imageContext.lineTo(0,50);
	imageContext.lineTo(42,50);
	imageContext.lineTo(23,28);
	//imageContext.arc(20,22,10,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
	grad = imageContext.createRadialGradient(21,22,0,21,25,20);
	grad.addColorStop(0,"yellow");
	grad.addColorStop(1,"rgba(255,25,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(19,22);
	imageContext.lineTo(21,0);
	imageContext.lineTo(23,22);
	//imageContext.arc(20,22,10,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
	imageContext.beginPath();
	imageContext.moveTo(19,28);
	imageContext.lineTo(21,50);
	imageContext.lineTo(23,28);
	//imageContext.arc(20,22,10,0,2*Math.PI);
	imageContext.closePath();
	imageContext.fill();
}

function drawFlashlight() {
	imageContext.fillStyle = "dimgrey";
	imageContext.beginPath();
	imageContext.moveTo(20,27);
	imageContext.lineTo(20,21);
	imageContext.lineTo(18,17);
	imageContext.lineTo(25,17);
	imageContext.lineTo(23,21);
	imageContext.lineTo(23,27);
	imageContext.lineTo(20,27);
	imageContext.closePath();
	imageContext.fill();
}

function drawHand() {
	imageContext.fillStyle = "darksalmon";
	imageContext.beginPath();
	imageContext.moveTo(20,22);
	imageContext.lineTo(18,27);
	imageContext.lineTo(20,29);
	imageContext.bezierCurveTo(24,28,24,28,23,27);
	//imageContext.lineTo(20,32);
	imageContext.bezierCurveTo(21,26,21,26,20,22);
	imageContext.closePath();
	imageContext.fill();
}

function drawBody() {
	imageContext.fillStyle = "black";
	imageContext.beginPath();
	imageContext.moveTo(30,26);
	imageContext.bezierCurveTo(20,29,20,29,20,30);
	imageContext.bezierCurveTo(20,32,20,33,30,35);
	imageContext.lineTo(30,26);
	imageContext.closePath();
	imageContext.fill();
	imageContext.beginPath();
	imageContext.moveTo(30,26);
	imageContext.bezierCurveTo(40,29,40,29,40,30);
	imageContext.bezierCurveTo(40,32,40,33,30,35);
	imageContext.lineTo(30,26);
	imageContext.closePath();
	imageContext.fill();
}

function drawRays() {
	var grad = imageContext.createRadialGradient(21,18,0,22,18,16);
	grad.addColorStop(0,"rgba(255,69,0,1)");
	grad.addColorStop(1,"rgba(255,69,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(18,17);
	imageContext.lineTo(25,17);
	imageContext.lineTo(22,0);
	imageContext.lineTo(21,0);
	imageContext.lineTo(18,17);
	imageContext.closePath();
	imageContext.fill();
	var grad = imageContext.createRadialGradient(21,18,0,22,18,16);
	grad.addColorStop(0,"rgba(255,165,0,0.8)");
	grad.addColorStop(0.8,"rgba(255,165,0,0)");
	imageContext.fillStyle = grad;
	imageContext.beginPath();
	imageContext.moveTo(18,17);
	imageContext.lineTo(0,0);
	imageContext.lineTo(43,0);
	imageContext.lineTo(25,17);
	imageContext.lineTo(18,17);
	imageContext.closePath();
	imageContext.fill();
}

function setFootstep(x,y,direction) {
	var index = -1;
	for (var i = 0; i < footstepXs.length; i++) {
		if (footstepXs[i] < 0) {
			index = i;
			break;
		}
	}
	if (index < 0) {
		return;
	}
	footstepXs[index] = x;
	footstepYs[index] = y;
	footstepAlphas[index] = 1;
	footstepDirections[index] = direction;
	var footstepTimer = setInterval(function() {
		footstepAlphas[index] -= 1./10.;
		if (footstepAlphas[index] <= 0) {
			clearInterval(footstepTimer);
			footstepXs[index] = -1;
			footstepYs[index] = -1;
			footstepAlphas[index] = 0;
			footstepDirections[index] = 0;
			renderMaze();
		}
	},playerTimer);
}

function drawFootstepImage4() {
	footstepImages[3] = new Image(10,10);
	footstepImages[3].src = footstepImageURLs[3];
	footstepImages[3].onload = function() {
		drawMazeImage(0);
	};
}

function drawFootstepImage3() {
	footstepImages[2] = new Image(10,10);
	footstepImages[2].src = footstepImageURLs[2];
	footstepImages[2].onload = drawFootstepImage4;
}

function drawFootstepImage2() {
	footstepImages[1] = new Image(10,10);
	footstepImages[1].src = footstepImageURLs[1];
	footstepImages[1].onload = drawFootstepImage3;
}

function drawFootstepImage1() {
	footstepImages[0] = new Image(10,10);
	footstepImages[0].src = footstepImageURLs[0];
	footstepImages[0].onload = drawFootstepImage2;
}

function drawPlayerImage4() {
	playerImages[3] = new Image(60,60);
	playerImages[3].src = playerImageURLs[3];
	playerImages[3].onload = drawFootstepImage1;
}

function drawPlayerImage3() {
	playerImages[2] = new Image(60,60);
	playerImages[2].src = playerImageURLs[2];
	playerImages[2].onload = drawPlayerImage4;
}

function drawPlayerImage2() {
	playerImages[1] = new Image(60,60);
	playerImages[1].src = playerImageURLs[1];
	playerImages[1].onload = drawPlayerImage3;
}

function drawPlayerImage1() {
	playerImages[0] = new Image(60,60);
	playerImages[0].src = playerImageURLs[0];
	playerImages[0].onload = drawPlayerImage2;
}

function drawWater() {
	waterTheta = 0;
	waterY = 0;
	waterTimer = setInterval(function() {
		waterContext.clearRect(0,0,420,420);
		waterContext.drawImage(waterImage,Math.round(waterX),waterY,420,420,0,0,420,420);
		waterY++;
		waterY %= 840;
		waterTheta += 0.3*Math.PI/180;
		waterX = 30*Math.sin(waterTheta)*Math.sin(waterTheta);
	},10);
}

function drawWaterImage() {
	waterImage.src = waterImageURL;
	waterImage.onload = drawPlayerImage1;
}

function drawHeiroglyphImage(index) {
	if (index >= numberOfLevels) {
		drawSpikesImage();
		phiX = -50*Math.PI/180;
		phiY = -20*Math.PI/180;
		thetaX = phiX;
		thetaY = phiY;
		thetaZ = 0;
		rotateX();
		rotateY();
		rotateZ();
		var glyphTimer = setInterval(function() {
			thetaX = -omega*Math.sin(phiY)*Math.sin(phiX);
			thetaY = -omega*Math.cos(phiX);
			thetaZ = -omega*Math.sin(phiX)*Math.cos(phiY);
			rotateX();
			rotateY();
			rotateZ();
			drawRotatedHeiroglyph();
			drawCoins();
		},30);
		return;
	}
	heiroglyphImages[index] = new Image(60,60);
	heiroglyphImages[index].src = heiroglyphSourceLevels[index];
	heiroglyphImages[index].onload = function() {
		drawHeiroglyphImage(index+1);
	}
}

function drawRotatedCoin(i,j) {
	coinsContext.save();
	coinsContext.translate((i-playerI)*pixelWidth+blankSpaceWidth+5,(j-playerJ)*pixelHeight+blankSpaceHeight+5);
	coinsContext.transform(rotationMatrix[0][0],rotationMatrix[1][0],rotationMatrix[0][1],rotationMatrix[1][1],rotationMatrix[0][2],rotationMatrix[1][2]);
	coinsContext.translate(-8.5,-8.5);
	coinsContext.drawImage(coinEdge,0,0,20,20,0,0,17,17);
	coinsContext.restore();
	coinsContext.save();
	coinsContext.translate((i-playerI)*pixelWidth+blankSpaceWidth+5,(j-playerJ)*pixelHeight+blankSpaceHeight+7);
	coinsContext.transform(rotationMatrix[0][0],rotationMatrix[1][0],rotationMatrix[0][1],rotationMatrix[1][1],rotationMatrix[0][2],rotationMatrix[1][2]);
	coinsContext.translate(-8.5,-8.5);
	coinsContext.drawImage(coinImage,0,0,20,20,0,0,17,17);
	coinsContext.restore();
}

function drawCoins() {
	coinsContext.clearRect(0,0,420,420);
	for (var i = 0; i < coinsI.length; i++) {
		if (isCoinActive[i]) {
			drawRotatedCoin(coinsI[i],coinsJ[i]);
		}
	}
	for (var i = 0; i < ankhsI.length; i++) {
		if (isAnkhActive[i]) {
			drawRotatedAnkh(ankhsI[i],ankhsJ[i]);
		}
	}
}

function drawRotatedAnkh(i,j) {
	coinsContext.save();
	coinsContext.translate((i-playerI)*pixelWidth+blankSpaceWidth+5,(j-playerJ)*pixelHeight+blankSpaceHeight+5);
	coinsContext.transform(rotationMatrix[0][0],rotationMatrix[1][0],rotationMatrix[0][1],rotationMatrix[1][1],rotationMatrix[0][2],rotationMatrix[1][2]);
	coinsContext.translate(-8.5,-8.5);
	coinsContext.drawImage(ankhEdgeImage,0,0,20,20,0,0,17,17);
	coinsContext.restore();
	coinsContext.save();
	coinsContext.translate((i-playerI)*pixelWidth+blankSpaceWidth+5,(j-playerJ)*pixelHeight+blankSpaceHeight+7);
	coinsContext.transform(rotationMatrix[0][0],rotationMatrix[1][0],rotationMatrix[0][1],rotationMatrix[1][1],rotationMatrix[0][2],rotationMatrix[1][2]);
	coinsContext.translate(-8.5,-8.5);
	coinsContext.drawImage(ankhImage,0,0,20,20,0,0,17,17);
	coinsContext.restore();
}

function drawEmbers() {
	powerupsContext.clearRect(0,0,420,420);
	for (var i = 0; i < embersI.length; i++) {
		if (isEmberActive[i]) {
			powerupsContext.drawImage(emberImage,(embersI[i]-playerI)*pixelWidth+blankSpaceWidth,(embersJ[i]-playerJ)*pixelHeight+blankSpaceHeight);
		}
	}
}

function drawScore() {
	scoreContext.clearRect(0,0,420,460);
	scoreContext.fillStyle = "black";
	scoreContext.fillRect(0,0,420,40);
	scoreContext.drawImage(coinImage,390,10);
	scoreContext.fillStyle = "white";
	scoreContext.font = "14px helvetica";
	scoreContext.textAlign = "right";
	scoreContext.textBaseline = "middle";
	scoreContext.fillText("" + score,385,20);
	scoreContext.drawImage(ankhImage,10,10);
	scoreContext.textAlign = "left";
	scoreContext.fillText("" + numberOfLives,35,20);
	scoreContext.textAlign = "center";
	scoreContext.fillText("Level " + (currentLevel+1),210,20);
}

function coinAnimation() {
	var x = 200;
	var y = 240;
	var coinTimer = setInterval(function() {
		//drawScore();
		scoreContext.clearRect(0,40,420,420);
		scoreContext.drawImage(coinImage,x,y);
		x += 19;
		y -= 23;
		if (x >= 390) {
			clearInterval(coinTimer);
			//scoreContext.clearRect(0,40,420,420);
			drawScore();
		}
	},10);
}

function ankhAnimation() {
	var x = 200;
	var y = 240;
	var ankhTimer = setInterval(function() {
		scoreContext.clearRect(0,40,420,420);
		scoreContext.drawImage(ankhImage,x,y);
		x -= 19;
		y -= 23;
		if (x <= 10) {
			clearInterval(ankhTimer);
			drawScore();
		}
	},10);
}

function drawRotatedHeiroglyph() {
	//glyphCanvas.width = 60;
	//glyphCanvas.height = 60;
	if (gameOver) {
		glyphContext.clearRect(0,0,420,420);
		return;
	}
	glyphContext.clearRect(0,0,420,420);
	var grad = glyphContext.createRadialGradient(-playerI*pixelWidth+570,-playerJ*pixelHeight+20,0,-playerI*pixelWidth+570,-playerJ*pixelHeight+20,60);
	//grad.addColorStop(0,"rgba(255,100,0,0.2)");
	//grad.addColorStop(1,"rgba(255,255,0,0)");
	grad.addColorStop(0,heiroglyphAuraColorStop0);
	grad.addColorStop(1,heiroglyphAuraColorStop1);
	glyphContext.fillStyle = grad;
	glyphContext.fillRect(0,0,420,420);
	glyphContext.save();
	glyphContext.translate(-playerI*pixelWidth+570,-playerJ*pixelHeight+20);
	glyphContext.transform(rotationMatrix[0][0],rotationMatrix[1][0],rotationMatrix[0][1],rotationMatrix[1][1],rotationMatrix[0][2],rotationMatrix[1][2]);
	glyphContext.translate(-30,-30);
	glyphContext.drawImage(heiroglyphImages[currentLevel],0,0);
	glyphContext.restore();
}

function drawSpikesImage() {
	spikesImage.src = spikesImageURL;
	spikesImage.onload = drawScreenshotImage;
}

function drawFloorTileImage() {
	floorTileImage.src = floorTileImageURL;
	floorTileImage.onload = function() {
		drawHeiroglyphImage(0);
	}
}

function drawEmberImage() {
	emberImage.src = emberImageURL;
	emberImage.onload = drawFloorTileImage;
}

function drawAnkhEdge() {
	ankhEdgeImage.src = ankhEdgeImageURL;
	ankhEdgeImage.onload = drawEmberImage;
}

function drawAnkhImage() {
	ankhImage.src = ankhImageURL;
	ankhImage.onload = drawAnkhEdge;
}

function drawTargetImage() {
	targetImage.src = targetImageURL;
	targetImage.onload = drawAnkhImage;
}

function drawCoinEdge() {
	coinEdge.src = coinEdgeURL;
	coinEdge.onload = drawTargetImage;
}

function drawCoinImage() {
	coinImage.src = coinImageURL;
	coinImage.onload = drawCoinEdge;
}

function walk(currentI,currentJ,newI,newJ,frame)
{
	playerWalkIndex = frame-1;
	if (frame > 4)
	{
		playerWalkIndex = 0;
		if (grid[playerI][playerJ] == -2 && !gameOver)
		{
			deathSequence();
			return;
		}
		for (var i = 0; i < coinsI.length; i++) {
			if (isCoinActive[i] && playerI === coinsI[i] && playerJ === coinsJ[i]) {
				isCoinActive[i] = 0;
				score++;
				coinAnimation();
			}
		}
		for (var i = 0; i < embersI.length; i++) {
			if (embersFound <= numberOfEmbers && isEmberActive[i] && playerI === embersI[i] && playerJ === embersJ[i]) {
				isEmberActive[i] = 0;
				embersFound++;
				drawDimmerCanvas();
				drawEmbers();
			}
		}
		for (var i = 0; i < ankhsI.length; i++) {
			if (isAnkhActive[i] && playerI === ankhsI[i] && playerJ === ankhsJ[i]) {
				isAnkhActive[i] = 0;
				numberOfLives++;
				ankhAnimation();
			}
		}
		for (var i = 0; i < monsterI.length; i++)
		{
			if (monsterIsAlive[i] && playerI == monsterI[i] && playerJ == monsterJ[i] && !gameOver)
			{
				deathSequence();
				return;
			}
		}
		setTimeout( function() {
			isWalking = 0;
			if (!keyReleased || couldIGetAKeyInEdgewise)
			{
				arrowKey(lastkeycode);
				return;
			};
			if (isTargetTrackingOn) {
				targetTracking();
				return;
			}
			renderMaze();
		}, playerTimer);
		return;
	}
	playerI = (newI - currentI)*frame/4 + currentI;
	playerJ = (newJ - currentJ)*frame/4 + currentJ;
	renderMaze();
	(function(cI,cJ,nI,nJ,f) {
		setTimeout( function() {
			walk(cI,cJ,nI,nJ,f+1);
		}, playerTimer);
	})(currentI,currentJ,newI,newJ,frame);
}

function targetTracking() {
	couldIGetAKeyInEdgewise = 0;
	keyReleased = 1;
	var deltaI = targetI - playerI;
	var deltaJ = targetJ - playerJ;
	isTargetTrackingOn = !(deltaI === 0 && deltaJ === 0);
	if (!isTargetTrackingOn) return;
	var distanceSquaredLeft = (deltaI+1)*(deltaI+1) + deltaJ*deltaJ;
	if (playerI-1 < 0 || grid[playerI-1][playerJ] < 0) {
		distanceSquaredLeft = 10000;
	}
	var distanceSquaredRight = (deltaI-1)*(deltaI-1) + deltaJ*deltaJ;
	if (playerI+1 >= grid.length || grid[playerI+1][playerJ] < 0) {
		distanceSquaredRight = 10000;
	}
	var distanceSquaredUp = deltaI*deltaI + (deltaJ+1)*(deltaJ+1);
	if (playerJ-1 < 0 || grid[playerI][playerJ-1] < 0) {
		distanceSquaredUp = 10000;
	}
	var distanceSquaredDown = deltaI*deltaI + (deltaJ-1)*(deltaJ-1);
	if (playerJ+1 >= grid[0].length || grid[playerI][playerJ+1] < 0) {
		distanceSquaredDown = 10000;
	}
	var distanceSquaredArray = [distanceSquaredLeft,distanceSquaredRight,distanceSquaredUp,distanceSquaredDown];
	var directionsRanked = rankDirectionsByDistance(distanceSquaredArray);
	var newI = playerI, newJ = playerJ;
	switch (directionsRanked[0]) {
		case 0:
			newI--;
			playerDirection = 3;
			break;
		case 1:
			newI++;
			playerDirection = 1;
			break;
		case 2:
			newJ--;
			playerDirection = 0;
			break;
		case 3:
			newJ++;
			playerDirection = 2;
			break;
	}
	//playerDirection = directionsRanked[0];
	isWalking = 1;
	var shiftFootstepX = (playerDirection % 2 === 0 ? 5:0);
	var shiftFootstepY = (playerDirection % 2 === 0 ? 0:5);
	setFootstep(playerI*pixelWidth+blankSpaceWidth-5+shiftFootstepX,playerJ*pixelHeight+blankSpaceHeight+5+shiftFootstepY,playerDirection);
	setFootstep(playerI*pixelWidth+blankSpaceWidth+5+shiftFootstepX,playerJ*pixelHeight+blankSpaceHeight-5+shiftFootstepY,playerDirection);
	walk(playerI,playerJ,newI,newJ,1);
}

function touchScreen(evt) {
	evt.preventDefault();
	if (gameOver) return;
	var rect = playerCanvas.getBoundingClientRect();
	var x = evt.targetTouches[0].clientX - rect.left;
	x *= 420./playerCanvas.width;
	x += playerI*pixelWidth - 210;
	var y = evt.targetTouches[0].clientY - rect.top;
	y *= 420./playerCanvas.height;
	y += playerJ*pixelHeight - 210;
	x = Math.round(x/pixelWidth);
	y = Math.round(y/pixelHeight);
	//if (x < 0 || x >= grid.length || y < 0 || y >= grid[0].length) return;
	if (isLevelComplete && y < 0 && playerI === 20 && playerJ === 0) {
		animateTransition();
		return;
	}
	targetI = x;
	targetJ = y;
	if (!isTargetTrackingOn) targetTracking();
}

function arrowKey(keycode)
{
	if (gameOver) {return;}
	if (isWalking)
	{
		if (lastkeycode != keycode) {couldIGetAKeyInEdgewise = 1;}
		lastkeycode = keycode;
		return;
	}
	keyReleased = 0;
	couldIGetAKeyInEdgewise = 0;
	lastkeycode = keycode;
	var newI = playerI;
	var newJ = playerJ;
	var newDirection = playerDirection;
	if (isLevelComplete && keycode === 38 && playerI === 20 && playerJ === 0) {
		animateTransition();
		return;
	}
	switch (keycode)
	{
		case 37: //left
			newI = playerI - 1;
			newDirection = 3;
			break;
		case 38: //up
			newJ = playerJ - 1;
			newDirection = 0;
			break;
		case 39: //right
			newI = playerI + 1;
			newDirection = 1;
			break;
		case 40: //down
			newJ = playerJ + 1;
			newDirection = 2;
			break;
	}
	if (newI < grid.length && newI >= 0 && newJ < grid[newI].length && newJ >= 0 && grid[newI][newJ] != -1)
	{
		playerDirection = newDirection;
		isWalking = 1;
		var shiftFootstepX = (playerDirection % 2 === 0 ? 5:0);
		var shiftFootstepY = (playerDirection % 2 === 0 ? 0:5);
		setFootstep(playerI*pixelWidth+blankSpaceWidth-5+shiftFootstepX,playerJ*pixelHeight+blankSpaceHeight+5+shiftFootstepY,playerDirection);
		setFootstep(playerI*pixelWidth+blankSpaceWidth+5+shiftFootstepX,playerJ*pixelHeight+blankSpaceHeight-5+shiftFootstepY,playerDirection);
		walk(playerI,playerJ,newI,newJ,1);
	} else {
		playerDirection = newDirection;
		renderMaze();
	}
	return;
}

function gameOverSequence()
{
	gameOver = 1;
	score = 0;
	embersFound = 0;
	numberOfLives = 0;
	isReplayOn = 1;
	dimmerContext.fillStyle = "black";
	dimmerContext.fillRect(0,0,420,420);
	scoreContext.clearRect(0,0,420,460);
	scoreContext.drawImage(screenshotImage,0,0);
}

function resetPlayerPosition() {
	playerI = playerILevels[currentLevel];
	playerJ = playerJLevels[currentLevel];
	var test = 1;
	for (var i = 0; i < monsterI.length; i++) {
		if (monsterIsAlive[i] && monsterI[i] === playerI && monsterJ[i] === playerJ) {
			test = 0;
		}
	}
	if (test) return;
	while (!test) {
		playerI = Math.floor(Math.random()*grid.length);
		playerJ = Math.floor(Math.random()*grid[0].length);
		test = (grid[playerI][playerJ] === 0);
		if (test) {
			for (var i = 0; i < monsterI.length; i++) {
				if (monsterIsAlive[i] && monsterI[i] === playerI && monsterJ[i] === playerJ) {
					test = 0;
					break;
				}
			}
			for (var i = 0; i < coinsI.length; i++) {
				if (isCoinActive[i] && coinsI[i] === playerI && coinsJ[i] === playerJ) {
					test = 0;
					break;
				}
			}
			for (var i = 0; i < embersI.length; i++) {
				if (isEmberActive[i] && embersI[i] === playerI && embersJ[i] === playerJ) {
					test = 0;
					break;
				}
			}
			for (var i = 0; i < ankhsI.length; i++) {
				if (isAnkhActive[i] && ankhsI[i] === playerI && ankhsJ[i] === playerJ) {
					test = 0;
					break;
				}
			}
		}
	}
}

function drawPlacard() {
	isPlacardDrawing = 1;
	textContext.fillStyle = "black";
	textContext.fillRect(0,0,canvasWidth,canvasHeight);
	textContext.fillStyle = "gold";
	textContext.font = "20px Georgia";
	textContext.textAlign = "center";
	textContext.textBaseline = "middle";
	textContext.fillRect(Math.round((canvasWidth-pixelWidth)/2)-2.5*pixelWidth,Math.round(canvasHeight/2)-0.85*pixelHeight,6*pixelWidth,1.7*pixelHeight);
	textContext.fillStyle = "indigo";
	textContext.fillText("Level " + (currentLevel+1),Math.round(canvasWidth/2),Math.round(canvasHeight/2));
	var timeout = setTimeout(function() {
		isPlacardDrawing = 0;
		textContext.clearRect(0,0,420,420);
		wakeUpSequence();
	},1500);
}

function wakeUpSequence() {
	isTargetTrackingOn = 0;
	embersFound = 0;
	for (var i = 0; i < isAnkhActive.length; i++) {
		isAnkhActive[i] = 1;
	}
	resetPlayerPosition();
	renderMaze();
	drawScore();
	var counter = 0;
	var wakeUpTimer = setInterval(function() {
		var grad = dimmerContext.createRadialGradient(210,210,(40+170*embersFound/numberOfEmbers)*counter/216,210,210,210);
		grad.addColorStop(0,"rgba(0,0,0,0)");
		grad.addColorStop(counter/216,"rgba(0,0,0,1)");
		dimmerContext.clearRect(0,0,420,420);
		dimmerContext.fillStyle = grad;
		dimmerContext.fillRect(0,0,420,420);
		counter++;
		if (counter >= 216) {
			clearInterval(wakeUpTimer);
			drawDimmerCanvas();
			gameOver = 0;
			isWalking = 0;
			couldIGetAKeyInEdgewise = 0;
			setAllMonsterIntervals();
		}
	},10);
}

function deathSequence() {
	if (isDeathAudioLoaded) playDeathSound();
	gameOver = 1;
	numberOfLives--;
	var theta = 0;
	var deathTimer = setInterval(function() {
		playerContext.clearRect(0,0,420,420);
		playerContext.save();
		playerContext.translate(210,210);
		playerContext.rotate(theta);
		playerContext.drawImage(playerImages[playerDirection],-30,-30);
		playerContext.restore();
		var grad = dimmerContext.createRadialGradient(210,210,(40+170*embersFound/numberOfEmbers)*(1-theta/(6*Math.PI)),210,210,210);
		grad.addColorStop(0,"rgba(0,0,0,0)");
		grad.addColorStop(1-theta/(6*Math.PI),"rgba(0,0,0,1)");
		dimmerContext.clearRect(0,0,420,420);
		dimmerContext.fillStyle = grad;
		dimmerContext.fillRect(0,0,420,420);
		theta += 5*Math.PI/180;
		if (theta >= 6*Math.PI) {
			clearInterval(deathTimer);
			if (numberOfLives > 0) {
				wakeUpSequence();
			} else {
				gameOverSequence();
			}
		}
	},10);
}

function victorySequence()
{
	if (lastAudioSource) {
		lastAudioSource.loop = false;
		lastAudioSource.stop();
	}
	gameOver = 1;
	isReplayOn = 1;
	textContext.fillStyle = "gold";
	textContext.font = "20px Georgia";
	textContext.textAlign = "center";
	textContext.textBaseline = "bottom";
	textContext.fillRect(Math.round((canvasWidth-pixelWidth)/2)-3*pixelWidth,Math.round(canvasHeight/2)-pixelHeight,7*pixelWidth,2*pixelHeight);
	textContext.fillStyle = "indigo";
	textContext.fillText("VICTORY!",Math.round(canvasWidth/2),Math.round(canvasHeight/2)+2);
	textContext.textBaseline = "top";
	textContext.font = "10px Georgia";
	textContext.fillText("YOU HAVE ESCAPED THE DUAT",Math.round(canvasWidth/2),Math.round(canvasHeight/2)+5);
}

function animateTransition() {
	if (isTransitionAudioLoaded) playTransitionSound();
	gameOver = 1;
	if (monsterTimerIsRunning) clearInterval(globalMonsterTimer);
	monsterTimerIsRunning = 0;
	var counter = 0;
	var numberOfFrames = 20;
	var transitionTimer = setInterval(function() {
		playerContext.clearRect(0,0,420,420);
		playerContext.drawImage(playerImages[0],180,180-5*counter);
		var grad = dimmerContext.createRadialGradient(210,210,(40+170*embersFound/numberOfEmbers)*(1-counter/numberOfFrames),210,210,210);
		grad.addColorStop(0,"rgba(0,0,0,0)");
		grad.addColorStop(1-counter/numberOfFrames,"rgba(0,0,0,1)");
		dimmerContext.clearRect(0,0,420,420);
		dimmerContext.fillStyle = grad;
		dimmerContext.fillRect(0,0,420,420);
		counter++;
		if (counter >= numberOfFrames) {
			clearInterval(transitionTimer);
			currentLevel++;
			if (currentLevel >= numberOfLevels) {
				victorySequence();
			} else {
				initializeGrid();
			}
		}
	},playerTimer);
}

function centerCanvas(canvas) {
	canvas.style.left = "0px";
	canvas.style.top = "0px";
	var rect = canvas.getBoundingClientRect();
	var leftPosition = Math.floor((window.innerWidth - canvas.width)/2);
	leftPosition -= rect.left;
	var topPosition = Math.floor((window.innerHeight - canvas.height)/2);
	topPosition -= rect.top;
	canvas.style.left = leftPosition + "px";
	canvas.style.top = topPosition + "px";
}

function centerAllCanvases() {
	centerCanvas(scrollPreventCanvas);
	centerCanvas(imageCanvas);
	centerCanvas(hiddenCanvas);
	centerCanvas(waterCanvas);
	centerCanvas(backgroundCanvas);
	centerCanvas(trapsCanvas);
	centerCanvas(playerCanvas);
	centerCanvas(monsterCanvas);
	centerCanvas(shadowCanvas);
	centerCanvas(textCanvas);
	centerCanvas(overCanvas);
	centerCanvas(glyphCanvas);
	centerCanvas(underCanvas);
	centerCanvas(dimmerCanvas);
	centerCanvas(footstepsCanvas);
	centerCanvas(coinsCanvas);
	centerCanvas(scoreCanvas);
	centerCanvas(powerupsCanvas);
}

function rescaleCanvas(canvas,context,scale,offsetX,offsetY) {
	canvas.width = Math.floor(canvasWidth*scale);
	canvas.height = Math.floor(canvasHeight*scale);
	canvas.top = offsetY + "px";
	canvas.left = offsetX + "px";
	context.scale(scale,scale);
}

function rescaleAllCanvases() {
	window.scrollTo(0,0);
	scoreCanvas.style.left = "0px";
	scoreCanvas.style.top = "0px";
	scrollPreventCanvas.style.left = "0px";
	scrollPreventCanvas.style.top = "0px";
	scrollPreventCanvas.width = window.innerWidth;
	scrollPreventCanvas.height = window.innerHeight;
	var rect = hiddenCanvas.getBoundingClientRect();
	var widthNeeded = window.innerWidth;
	var heightNeeded = window.innerHeight;
	var scaleX = widthNeeded/520;
	var scaleY = heightNeeded/460;
	var scale = (scaleX < scaleY ? scaleX:scaleY);
	scale = (scale >= 1. ? 1.:scale);
	var offsetY = scale*40;
	var offsetX = 0;
	scoreCanvas.width = Math.floor(420.*scale);
	scoreCanvas.height = Math.floor(460.*scale);
	scoreCanvas.top = "0px";
	scoreCanvas.left = "0px";
	scoreContext.scale(scale,scale);
	rescaleCanvas(imageCanvas,imageContext,scale,offsetY);
	hiddenCanvas.width = 0;
	hiddenCanvas.height = 0;
	rescaleCanvas(waterCanvas,waterContext,scale,offsetX,offsetY);
	rescaleCanvas(backgroundCanvas,backgroundContext,scale,offsetX,offsetY);
	rescaleCanvas(trapsCanvas,trapsContext,scale,offsetX,offsetY);
	rescaleCanvas(playerCanvas,playerContext,scale,offsetX,offsetY);
	rescaleCanvas(monsterCanvas,monsterContext,scale,offsetX,offsetY);
	rescaleCanvas(shadowCanvas,shadowContext,scale,offsetX,offsetY);
	rescaleCanvas(textCanvas,textContext,scale,offsetX,offsetY);
	rescaleCanvas(overCanvas,overContext,scale,offsetX,offsetY);
	rescaleCanvas(glyphCanvas,glyphContext,scale,offsetX,offsetY);
	rescaleCanvas(underCanvas,underContext,scale,offsetX,offsetY);
	rescaleCanvas(dimmerCanvas,dimmerContext,scale,offsetX,offsetY);
	rescaleCanvas(footstepsCanvas,footstepsContext,scale,offsetX,offsetY);
	rescaleCanvas(coinsCanvas,coinsContext,scale,offsetX,offsetY);
	rescaleCanvas(powerupsCanvas,powerupsContext,scale,offsetX,offsetY);
	if (isMobile) {
		setTimeout(function() {
			window.scrollTo(0,rect.top);
			centerAllCanvases();
		},500);
	} else {
		window.scrollTo(0,rect.top);
		centerAllCanvases();
	}
	waterContext.fillStyle = "black";
	waterContext.fillRect(0,0,canvasWidth,canvasHeight);
	drawDimmerCanvas();
	drawScore();
	renderMaze();
	if (isPlacardDrawing) {
		textContext.fillStyle = "black";
		textContext.fillRect(0,0,canvasWidth,canvasHeight);
		textContext.fillStyle = "gold";
		textContext.font = "20px Georgia";
		textContext.textAlign = "center";
		textContext.textBaseline = "middle";
		textContext.fillRect(Math.round((canvasWidth-pixelWidth)/2)-2.5*pixelWidth,Math.round(canvasHeight/2)-0.85*pixelHeight,6*pixelWidth,1.7*pixelHeight);
		textContext.fillStyle = "indigo";
		textContext.fillText("Level " + (currentLevel+1),Math.round(canvasWidth/2),Math.round(canvasHeight/2));
		dimmerContext.fillStyle = "black";
		dimmerContext.fillRect(0,0,canvasWidth,canvasHeight);
	}
	if (isReplayOn) {
		hiddenContext.fillStyle = "black";
		hiddenContext.fillRect(0,0,620,460);
		gameOverSequence();
	}
}

function play()
{
	dimmerContext.fillStyle = "black";
	dimmerContext.fillRect(0,0,canvasWidth,canvasHeight);
	initializeGrid();
	return;
}

export class Entombed extends React.Component {
    componentDidMount() {
		startGlobalLoadingIndicator();
        scrollPreventCanvas = document.getElementById("scrollPreventCanvas");
        imageCanvas = document.getElementById("imgCanvas");
        imageContext = imageCanvas.getContext("2d");
        hiddenCanvas = document.getElementById("hddnCanvas");
        hiddenContext = hiddenCanvas.getContext("2d");
        waterCanvas = document.getElementById("wtrCanvas");
        waterContext = waterCanvas.getContext("2d");
        backgroundCanvas = document.getElementById("bkgrndCanvas");
        backgroundContext = backgroundCanvas.getContext("2d");
        trapsCanvas = document.getElementById("trpsCanvas");
        trapsContext = trapsCanvas.getContext("2d");
        playerCanvas = document.getElementById("plyrCanvas");
        playerContext = playerCanvas.getContext("2d");
        monsterCanvas = document.getElementById("mnstrCanvas");
        monsterContext = monsterCanvas.getContext("2d");
        shadowCanvas = document.getElementById("shdwCanvas");
        shadowContext = shadowCanvas.getContext("2d");
        textCanvas = document.getElementById("txtCanvas");
        textContext = textCanvas.getContext("2d");
        overCanvas = document.getElementById("ovrCanvas");
        overContext = overCanvas.getContext("2d");
        glyphCanvas = document.getElementById("hrglCanvas");
        glyphContext = glyphCanvas.getContext("2d");
        underCanvas = document.getElementById("undrCanvas");
        underContext = underCanvas.getContext("2d");
        dimmerCanvas = document.getElementById("dmrCanvas");
        dimmerContext = dimmerCanvas.getContext("2d");
        footstepsCanvas = document.getElementById("ftstpsCanvas");
        footstepsContext = footstepsCanvas.getContext("2d");
        coinsCanvas = document.getElementById("cnsCanvas");
        coinsContext = coinsCanvas.getContext("2d");
        scoreCanvas = document.getElementById("scrCanvas");
        scoreContext = scoreCanvas.getContext("2d");
        powerupsCanvas = document.getElementById("pwrupsCanvas");
		powerupsContext = powerupsCanvas.getContext("2d");
		document.documentElement.style.overflow = "hidden";
		document.body.scroll = "no";

        play();
    }

    render() {
        return (
            <div>
                <canvas id="scrollPreventCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 0, border: "0px solid black"}} />
                <canvas id="imgCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 1, border: "0px solid black"}} />
                <canvas id="hddnCanvas" width="620" height="460" style={{position: "absolute", top: "0p", left: "0", zIndex: "2", border: "0px solid black"}} />
                <canvas id="wtrCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 3, border: "0px solid black"}} />
                <canvas id="bkgrndCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 4, border: "0px solid black"}} />
                <canvas id="ftstpsCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 5, border: "0px solid black"}} />
                <canvas id="trpsCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 5, border: "0px solid black"}} />
                <canvas id="cnsCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 9, border: "0px solid black"}} />
                <canvas id="pwrupsCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 9, border: "0px solid black"}} />
                <canvas id="undrCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 8, border: "0px solid black"}} />
                <canvas id="plyrCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 10, border: "0px solid black"}} />
                <canvas id="mnstrCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 6, border: "0px solid black"}} />
                <canvas id="shdwCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 7, border: "0px solid black"}} />
                <canvas id="ovrCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 11, border: "0px solid black"}} />
                <canvas id="hrglCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 13, border: "0px solid black"}} />
                <canvas id="dmrCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 12, border: "0px solid black"}} />
                <canvas id="txtCanvas" width="420" height="420" style={{position: "absolute", top: "40", left: "100", zIndex: 14, border: "0px solid black"}} />
                <canvas id="scrCanvas" width="420" height="460" style={{position: "absolute", top: "0", left: "100", zIndex: 14, border: "0px solid black"}} />
            </div>
        );
    }
}

export {Entombed as default};